<?xml version="1.0" encoding="utf-8"?><search><entry><title>如何为 Linux 寻找免驱的外接无线网卡</title><link href="/posts/8c24de48/"/><url>/posts/8c24de48/</url><content type="html"><![CDATA[<div class="note note-info">            <p>一台正常的笔记本基本上都会自带 WIFI 网卡，不需要额外的操作即可连接使用 WIFI. </p><p>但是如果你<strong>笔记本的无线网卡的天线坏了，修复起来可能会非常麻烦</strong>。<br>参见我的文章：<a href="https://blog.ovvv.top/posts/1c33c3c7/">https://blog.ovvv.top/posts/1c33c3c7/</a> ，我在更换网卡的时候，不小心将天线的金属扣给按扁了 无法再按回去，导致无线信号极差。</p><p>我的笔记本的天线 是焊接在笔记本电脑的屏幕后面的金属壳板上的，维修更换天线需要拆掉屏幕和笔记本的转轴，自己弄显然太冒险了（显然我没这个胆），去问了官方直营店，售后报价材料费 400 + 人工费 100 多，他们售后都不建议我换，推荐我直接外接个网卡。</p>          </div><p>我是 Win + Linux 双持用户，在寻找外接网卡时，除了考虑宽带和 WIFI 协议，网卡是否系统免驱也是我重要的考量因素之一，<strong>系统固件免驱支持比手动安装更省事、放心</strong>。</p><p>市面上的网卡几乎都是默认兼容 Win 的，不做 Win 的适配基本上是放弃大部分用户了。所以我们将目标转向 Linux 免驱的网卡。不建议在淘宝上用关键词搜索什么 <code>外接网卡 Linux 免驱</code> 之类的，没什么用，商品的海报不一定写，问客服也不一定知道。下面推荐两种寻找方式：</p><h2 id="1-查看-morrownr-USB-WiFi-仓库"><a href="#1-查看-morrownr-USB-WiFi-仓库" class="headerlink" title="1. 查看 morrownr&#x2F;USB-WiFi 仓库"></a>1. 查看 morrownr&#x2F;USB-WiFi 仓库</h2><p>推荐看：<a href="https://github.com/morrownr/USB-WiFi/blob/main/home/USB_WiFi_Adapters_that_are_supported_with_Linux_in-kernel_drivers.md">morrownr&#x2F;USB-WiFi</a></p><p>这个仓库列举了 <code>支持 Linux 内核驱动程序的 USB WiFi 适配器</code>，我们可以在其中寻找适合我们的无线网卡。建议用浏览器快捷键 <code>CTRL + F</code> 在网页上搜索。</p><p><strong>协议</strong>：<code>WIFI 7</code> 在今年 24 年推出，WIFI 6 在 2019 年推出。我推荐选购支持 WIFI 6 以上协议的无线网卡，新的协议能够提供更大的带宽，更快的速度和更低的延迟。当然还需要你的设备和路由器都支持 WIFI 6.<br>WIFI6 的 IEEE 标准为 802.11ax，所以在搜索的时候可以带上 AX 或者 WIFI6 来查看对应网卡。</p><p><strong>芯片</strong>：根据网上口碑和仓库作者的描述，Realtek 网卡芯片不如 Mediatek（就是安卓手机芯片我们熟知的发哥），最好避免使用基于 Realtek 芯片的网卡，所以 有发哥选发哥。</p><h2 id="2-直接查看-Linux-内核对芯片的支持"><a href="#2-直接查看-Linux-内核对芯片的支持" class="headerlink" title="2. 直接查看 Linux 内核对芯片的支持"></a>2. 直接查看 Linux 内核对芯片的支持</h2><p>上述的仓库毕竟是用户整理的，可能会出现遗漏。</p><p>我们还可以先在淘宝上搜索网卡，查询网卡商品详情列出的芯片是否在 Linux Wireless drivers 支持列表中，再决定是否购买：<a href="https://wireless.wiki.kernel.org/en/users/drivers">https://wireless.wiki.kernel.org/en/users/drivers</a></p><p>比如 Linux Wireless drivers 中支持的发哥芯片列表：<br><img src="https://pica.zhimg.com/80/v2-0abcbc913a3aa0a6a8a228208401ffbe_1440w.webp" alt="发哥芯片"></p><h2 id="3-我的选择"><a href="#3-我的选择" class="headerlink" title="3. 我的选择"></a>3. 我的选择</h2><p>我优先考虑支持 WIFI 6 协议的网卡，所以搜索 <code>AX</code> 关键词</p><p><code>EDUP EP-AX1672</code> 虽然是 AX3000，但淘宝 119 感觉有点贵，且其天线太长不优雅（深圳的公司在淘宝居然没有店，离谱）。</p><p><code>Netgear A8000</code> 淘宝 800+ 劝退</p><p><code>ALFA</code> 湾湾的公司，他们公司的网卡感觉也不便宜，都是大几百</p><p>最后选择了 <code>Fenvi FU-AX1800</code>，小而美、支持 WIFI6、便宜（淘宝 65），最重要的是它在淘宝有旗舰店，不是小作坊，买得放心。可以看到，它的芯片 <code>mt7921</code> 也在上述的支持列表中。</p><p><img src="https://picx.zhimg.com/80/v2-ea16261fb0b08d34e893b293b053687a_1440w.webp" alt="仓库贴的图"></p><p>买回来插在我的笔记本上确实是即插即用的，注意要直接插到笔记本的 USB 口，不要插在拓展坞的 USB 口。</p><p>命令行输入 <code>nmcli device</code></p><p>会看到多出来名叫 <code>wlp3s0f3u2</code> 的设备，笔记本默认的无线设备叫 <code>wlp1s0</code>，同一个 WIFI 会有设备后缀的区分</p><p><img src="https://picx.zhimg.com/80/v2-b94fc9eb9d14797f918587eda0c1ab04_1440w.png" alt="wifi 根据设备区分"></p>]]></content><tags><tag>Linux</tag></tags></entry><entry><title>再见小米 10，你好小米 14</title><link href="/posts/fcb7565f/"/><url>/posts/fcb7565f/</url><content type="html"><![CDATA[<h2 id="1-从小米-10-换到小米-14"><a href="#1-从小米-10-换到小米-14" class="headerlink" title="1. 从小米 10 换到小米 14"></a>1. 从小米 10 换到小米 14</h2><p>618 我换手机了，从小米 10 换到小米 14.</p><p>小米 10 当年号称是“十周年梦幻之作”，当年高考完就直接买了，也就是那一年“米冲高”，现在米高端应该是成了，就是系统相较于其他厂商还疑似是拖油瓶。小米 14 主打“徕卡光学 不负此刻”，看上去已经找到了高端的方向 —— 摄影，现在大学毕业了刚好直接换。</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-7f2d4fa8" role="button" aria-expanded="false" aria-controls="collapse-7f2d4fa8">        <div class="fold-arrow">▶</div>小米 10 海报      </div>      <div class="fold-collapse collapse" id="collapse-7f2d4fa8">        <div class="fold-content">          <p><img src="https://pic1.zhimg.com/80/v2-2485a994147490082bb765bb4681f295_1440w.webp" alt="小米 10 海报"></p>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-198c0ef5" role="button" aria-expanded="false" aria-controls="collapse-198c0ef5">        <div class="fold-arrow">▶</div>小米 14 海报      </div>      <div class="fold-collapse collapse" id="collapse-198c0ef5">        <div class="fold-content">          <p><img src="https://pica.zhimg.com/80/v2-4aea24f81864d7c797f17a3b966a939a_1440w.webp" alt="小米 14 海报"></p>        </div>      </div>    </div><p>小米 10 与小米 14 参数对比：</p><table><thead><tr><th align="center">对比</th><th align="center">小米 10</th><th align="center">小米 14</th></tr></thead><tbody><tr><td align="center">发售价</td><td align="center">8+256 3999</td><td align="center">16+512 4599</td></tr><tr><td align="center">发布时间</td><td align="center">2020 年 02 月 13 日</td><td align="center">2023 年 10 月 26 日</td></tr><tr><td align="center">屏幕尺寸</td><td align="center">6.67 英寸</td><td align="center">6.36 英寸</td></tr><tr><td align="center">分辨率</td><td align="center">2340 x 1080</td><td align="center">2670x1200</td></tr><tr><td align="center">刷新率</td><td align="center">90Hz</td><td align="center">120Hz</td></tr><tr><td align="center">屏幕曲直</td><td align="center">曲面屏</td><td align="center">直面屏</td></tr><tr><td align="center">像素密度</td><td align="center">386 ppi</td><td align="center">460 ppi</td></tr><tr><td align="center">峰值亮度</td><td align="center">1120 nits</td><td align="center">3000nit</td></tr><tr><td align="center">高 x 宽 x 厚</td><td align="center">162.6x74.8x8.96 mm</td><td align="center">152.8x71.5x8.2 mm</td></tr><tr><td align="center">芯片</td><td align="center">高通骁龙 865</td><td align="center">高通骁龙 8Gen3</td></tr><tr><td align="center">CPU 制程</td><td align="center">7nm</td><td align="center">4nm</td></tr><tr><td align="center">电池容量</td><td align="center">4780mAh</td><td align="center">4610mAh</td></tr><tr><td align="center">有线 &#x2F; 无线充电</td><td align="center">30W &#x2F; 30W</td><td align="center">90W &#x2F; 50W</td></tr><tr><td align="center">RAM 存储类型</td><td align="center">LPDDR 5</td><td align="center">LPDDR 5X</td></tr><tr><td align="center">ROM 存储类型</td><td align="center">UFS 3.0</td><td align="center">UFS 4.0</td></tr><tr><td align="center">WIFI 协议</td><td align="center">Wi-Fi 6</td><td align="center">Wi-Fi 7</td></tr><tr><td align="center">重量</td><td align="center">208g</td><td align="center">193g</td></tr><tr><td align="center">系统版本</td><td align="center">MIUI 11 (Android 10)</td><td align="center">HyperOS 1 (Android 14)</td></tr><tr><td align="center">红外遥控 &#x2F; NFC</td><td align="center">支持</td><td align="center">支持</td></tr></tbody></table><p>小米 10 是一部优秀的手机，各方面都比较均衡，没什么短板。我的 小米 10 用了四年，现在硬件老化严重，现在卡顿发热比较严重，也该换了。</p><p>小米 14 是 4K 价位左右的手机里不错的选择（看大米测评挺水桶的），16+512 发售价为 4599，618 淘宝 88vip 整点被我以 3900 的价格拿下（凑了 5000-390），下午顺丰就送到了，顶级。而反观京东的优惠力度就很没诚意，618 整点 plus 会员，手机并不参与凑 5000-350 的活动，到上午才有。</p><p>吐槽一下， <strong><code>618 守整点抢 还不如提前抢</code></strong> ！我记得 6.17 晚上的 11 点手机还是 3780 左右，6.18 0:00 点就涨了 100！<br>记住教训： <strong><code>618 可以提前到 5.30 或者 6.1 买</code></strong> ，放心买，毕竟手机都会有价保，保到 6.20 左右，后续手机降价了还能申请价保，后续贵了就不知道找谁哭了…</p><p>其实同价位的还有 vivo x100，我还是挺想体验 vivo 的 origin OS 的。但是最后也没换，原因有二：</p><ol><li>芯片为联发科天玑 9300，我对联发科不信任。x100 pro 是骁龙，但是超出预算。</li><li>线下试了一下 vivo x100，发现 origin OS 很多 UI 没有 Hyper 好看，再加上小米的系统用挺久的习惯了。</li></ol><h2 id="2-小米-14-的使用体验"><a href="#2-小米-14-的使用体验" class="headerlink" title="2. 小米 14 的使用体验"></a>2. 小米 14 的使用体验</h2><p>下面简单讲讲小米 14 的使用感受：</p><p>总体来说我是比较满意的</p><p><img src="https://picx.zhimg.com/80/v2-8308cc897b4866254b1fd81a7d736b51_1440w.webp" alt="小米 14 外观"></p><p>14 的金属边框很好看，方方正正，比 10 好看多了，数字系列好像从 13 开始就这样了？反正果味比较浓 doge. 就是摄像头排布有点丑，太大了，而且不居中，再不济整个浴霸的摄像头排列也行啊。</p><p>14 屏幕比 10 小，但是重量很轻，握持手感也很好。再加上优雅的直屏设计，很 nice. 曲面屏多少有点太反人类了。屏幕参数方面 14 肯定是比 10 更加细腻的，但是我还没有仔细感受。14 的屏幕在阳光下的亮度有点保守，拉大了好像也不是特别亮。</p><p>我之前米 10 用的是国际版的 HyperOS，现在用回国内版的 HyperOS，感觉 HyperOS 相较于 MIUI 动画确实流畅了点，控制中心与通知中心的下拉时间渐变动画很舒服，文件夹打开的动画也更优雅。当然还有因为新机、新芯片的缘故，骁龙 8Gen3 还是很顶的，已经确认将转向纯 64 位架构，这意味着它将完全不再支持 32 位应用程序，带来更好的性能，我强迫症狂喜。</p><p>摄影方面 14 相对于 10 肯定是有大进步的，首先就是大名鼎鼎的徕卡调教，后置摄像头有「徕卡生动」和「徠卡鲜艳」两种风格，但是前段时间一直下雨，没怎么拍风景。但是人像方面确实厉害，人像模式下出片很出色，帮女朋友拍照的福音哈哈哈。</p><p>HyperOS 让我感到惊喜的是有更多的人性化细节，高德地图打车的时候与系统的交互，左上角没上车的时候显示车牌号，上车后显示到达用时，锁屏有路程进度条；打孔的灵动岛，充电和耳机连接都有提示。希望澎湃以后越做越好，交互再好点，动画再丰富、流畅点。</p><p>小米 14 的续航比较出色，虽然它的电池容量只有 4610mAh，比市面上其他旗舰略小了点。但是日用不怎么耗电池，后台锁屏也不怎么掉，可以做到一天一冲。</p><p>小米 14 的体验就先讲这么多吧，后面想到了再补充。</p><h2 id="3-近期购物"><a href="#3-近期购物" class="headerlink" title="3. 近期购物"></a>3. 近期购物</h2><p>618 这段时间买了不少东西，简单梳理一下</p><h3 id="小米-14"><a href="#小米-14" class="headerlink" title="小米 14"></a>小米 14</h3><p>具体使用上文有讲。值得注意的是，我 2020 年入手的小米 10，买的时候没赶上 618，价格也是 3900，配置还只是 8+256。酷安当时有 3200 就入手的，气煞我也 QAQ.</p><p><img src="https://pica.zhimg.com/80/v2-9ef453ddd5dad12ae239fb3ebd25d5f7_1440w.webp" alt="小米 14"></p><h3 id="酷态科充电宝"><a href="#酷态科充电宝" class="headerlink" title="酷态科充电宝"></a>酷态科充电宝</h3><p>酷态科是小米的团队，它的充电宝可以放心买。我买的这款是两万毫安的，可以上飞机。</p><p>优点：充电功率最高 55w，贼快，秒杀我之前用过的充电宝。<br>缺点：太重了，相当于两个一万毫安的充电宝。</p><p><img src="https://picx.zhimg.com/80/v2-d3ae6e0f285fd960948c1af5533b6aa1_1440w.webp" alt="酷态科充电宝"></p><h3 id="锐捷-x60pro-路由器"><a href="#锐捷-x60pro-路由器" class="headerlink" title="锐捷 x60pro 路由器"></a>锐捷 x60pro 路由器</h3><p>锐捷是弗洛伊德群友推荐入手的，感觉他们的路由器确实牛逼，看测评视频基本上是拉爆同价位的路由器的。只不过之前并不了解这个牌子，就知道腾达，TP-LINK，小米，华为之类的路由器。</p><p>优点：信号真的很牛，家里同层基本隔墙都能满信号，楼上也有三格，而且不论是后台的 UI，或者手机 APP，都是完爆我之前用的红米 AC2100<br>缺点：发热比红米 AC2100 严重，不知道是路由器的正常情况还是它设计问题。</p><p><img src="https://picx.zhimg.com/80/v2-85a4e655f940cf08faf00daca4133a9f_1440w.webp" alt="锐捷 x60pro 路由器"></p><h3 id="电脑包"><a href="#电脑包" class="headerlink" title="电脑包"></a>电脑包</h3><p>之前用的灰色的电脑包，容易脏。随便在 pdd 找了一个，容量确实大，里面也有做防震的保护层，感觉还可以。</p><p><img src="https://picx.zhimg.com/80/v2-e9d8a2d3a51c7dbbf260e3bb2a858c7d_1440w.webp" alt="电脑包"></p><h3 id="电脑手机配件"><a href="#电脑手机配件" class="headerlink" title="电脑手机配件"></a>电脑手机配件</h3><p>618 下单手机后马上就买了手机壳和闪魔的手机钢化膜，手机壳感觉颜值还是挺高的。闪魔 伟大无需多言，在他们家买了很多年，应该有二十几次了，膜质量很好，贴膜工具也辅助得到位。最重要的是：<strong>贴坏包赔</strong>！！我贴坏了膜给客服验证过了，马上就发了个一模一样的，售后太给力了哈哈。</p><p><img src="https://pica.zhimg.com/80/v2-c7fcd5c69145be4ea5b33af1169bef56_1440w.webp" alt="电脑手机配件"></p><p>618 期间还买了些电脑工具换硅脂和无线网卡，但是翻车了，详见前面的文章。</p>]]></content><tags><tag>生活</tag><tag>mi10</tag><tag>mi14</tag></tags></entry><entry><title>如何上传自己的 npm 包？</title><link href="/posts/9ac67242/"/><url>/posts/9ac67242/</url><content type="html"><![CDATA[<div class="note note-primary">            <p>本文将介绍如何将自己的 npm 包上传到 npm registry 仓库。</p>          </div><p>在开始之前，请先阅读 <a href="https://docs.npmjs.com/">npm 官方文档</a>，了解 npm 的基本使用方法。</p><h2 id="0-创建-npm-包"><a href="#0-创建-npm-包" class="headerlink" title="0. 创建 npm 包"></a>0. 创建 npm 包</h2><blockquote><p>一个 npm 包是由 <code>package.json</code> 文件描述的文件或目录。npm 包必须包含 <code>package.json</code> 文件，才能发布到 npm registry 仓库。</p></blockquote><p><strong>如果你已经有了 npm 包，可以跳过这一步</strong>。</p><p>否则，你可以在项目目录下执行如下命令来创建一个 npm 包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm init<br></code></pre></td></tr></table></figure><p>根据命令行的提示填写项目信息，npm 会生成一个 <code>package.json</code> 文件，这个文件是 npm 包的配置文件，里面包含了项目的基本信息。</p><p>或者，你也可以手动创建一个 <code>package.json</code> 文件，内容参考：</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-dcdac752" role="button" aria-expanded="false" aria-controls="collapse-dcdac752">        <div class="fold-arrow">▶</div>package.json      </div>      <div class="fold-collapse collapse" id="collapse-dcdac752">        <div class="fold-content">          <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;repository&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;git&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;git+https://github.com/mobeicanyue/test.git&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mobeicanyue&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;license&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;MIT&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;bugs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://github.com/mobeicanyue/test/issues&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;homepage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://github.com/mobeicanyue/test#readme&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div><p>根据自己的需求修改对应字段即可。</p><h2 id="1-注册-npm-账号"><a href="#1-注册-npm-账号" class="headerlink" title="1. 注册 npm 账号"></a>1. 注册 npm 账号</h2><p>首先，你需要注册一个 npm 账号，打开 <a href="http://www.npmjs.com/signup">www.npmjs.com/signup</a> 填写用户名、邮箱、密码并注册，注意 npm 会发验证邮件，验证后即可登录。</p><h2 id="2-登录-npm"><a href="#2-登录-npm" class="headerlink" title="2. 登录 npm"></a>2. 登录 npm</h2><p>在终端中输入以下命令登录 npm：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm login<br></code></pre></td></tr></table></figure><p>命令行会显示</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">npm notice Log in on https://registry.npmjs.org/<br>Login at:<br>https://www.npmjs.com/login?next=/login/cli/xxxxxxx<br>Press ENTER to open in the browser...<br></code></pre></td></tr></table></figure><p>我们敲回车，浏览器会打开 npm 验证页面，它会发送验证码到你的邮箱，输入验证码后即可登录。<br>登陆成功后，命令行会显示：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">Logged in on https://registry.npmjs.org/.<br></code></pre></td></tr></table></figure><h2 id="3-发布-npm-包"><a href="#3-发布-npm-包" class="headerlink" title="3. 发布 npm 包"></a>3. 发布 npm 包</h2><p>输入以下命令发布 npm 包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm publish<br></code></pre></td></tr></table></figure><p>发布成功后，终端会显示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">+ your-package-name@1.0.0<br></code></pre></td></tr></table></figure><p>至此，你的 npm 包已经成功发布到 npm 仓库。你可以在 <a href="http://www.npmjs.com/">www.npmjs.com</a> 里搜索你的包。</p><h2 id="4-更新-npm-包"><a href="#4-更新-npm-包" class="headerlink" title="4. 更新 npm 包"></a>4. 更新 npm 包</h2><p>如果你的 npm 包有更新，你需要修改 <code>package.json</code> 中的 <code>version</code> 字段，然后重新发布。</p><p>注意，规范的 <code>version</code> 格式应为 <code>major.minor.patch</code>（<code>主版本号.次版本号.修订号</code>），例如 <code>1.0.0</code>。你也可以使用 <code>node-semver</code> 来规范版本号。</p><p>更新 <code>package.json</code> 后，输入以下命令发布 npm 包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm version [&lt;newversion&gt; | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]<br><br>npm publish<br></code></pre></td></tr></table></figure><p>其中 <code>&lt;newversion&gt;</code> 为新版本号，<code>major</code>、<code>minor</code>、<code>patch</code> 分别为主版本号、次版本号、修订号。<br>比如，你可以输入 <code>npm version patch</code> 来更新修订号；或者输入 <code>npm version 1.0.1</code> 来更新到 <code>1.0.1</code> 版本，然后发布。</p><h2 id="5-在-Github-Actions-中发布-npm-包"><a href="#5-在-Github-Actions-中发布-npm-包" class="headerlink" title="5. 在 Github Actions 中发布 npm 包"></a>5. 在 Github Actions 中发布 npm 包</h2><p>Github 可以通过手动触发工作流来发布 npm 包。该工作流会将包上传到 npm registry。<br>请确保在存储库的 Secrets 中设置 <code>NPM_TOKEN</code>.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Publish</span> <span class="hljs-string">Package</span> <span class="hljs-string">to</span> <span class="hljs-string">npmjs</span><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">workflow_dispatch:</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v4</span><br>      <span class="hljs-comment"># Setup .npmrc file to publish to npm</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v4</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;20.x&#x27;</span><br>          <span class="hljs-attr">registry-url:</span> <span class="hljs-string">&#x27;https://registry.npmjs.org&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">ci</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">publish</span> <span class="hljs-string">--provenance</span> <span class="hljs-string">--access</span> <span class="hljs-string">public</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">NODE_AUTH_TOKEN:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.NPM_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure>]]></content><tags><tag>npm</tag></tags></entry><entry><title>记录一次深夜更换硅脂网卡和翻车</title><link href="/posts/1c33c3c7/"/><url>/posts/1c33c3c7/</url><content type="html"><![CDATA[<p>我本来想写一篇更换硅脂和网卡的教程，但是不出意外的话还是出意外了。<del>捂脸</del></p><p>参考了这个视频：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?bvid=BV1F3411n7S3&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0; border-radius: 5px"> </iframe></div><p><br><br></p><p>这是我买的螺丝刀套装、硅脂和网卡：<br><img src="https://pic4.zhimg.com/80/v2-9fbf586bea9eb44b7460397760a3e76f_1440w.webp" alt="淘宝订单"><br>网卡是 Intel AX210，支持 Wi-Fi 6E 和蓝牙 5.3.<br>硅脂买的信越的硅脂，不知道是不是正品，但是用着好像还行。</p><p>展示一下军火.webp<br><img src="https://pic2.zhimg.com/80/v2-ea1c5184b8b5a5b7b60b6d2230d8b70d_1440w.webp" alt="用到的工具"></p><p>笔记本是联想小新 Pro13，它的硅脂和网卡都是可以更换的，快递收到后就万事俱备 只欠东风。</p><p>首先使用六角的螺丝刀拧开底壳的螺丝，然后用塑料片撬开底壳，整个过程都很顺利，没有遇到什么问题。注意撬开的时候要小心，不要划到里面的线。下图是我电脑的内部构造：</p><p><img src="https://pic2.zhimg.com/80/v2-58b030c4761410372fbb7d7c77bbea05_1440w.webp" alt="内部构造"></p><p>用工具拧开芯片散热片的螺丝，然后掀开散热片。</p><p><img src="https://pic4.zhimg.com/80/v2-2c08dec204c388d3b82d229d6f6c1bfb_1440w.webp" alt="芯片上面残留的硅脂"></p><p>拧开风扇的螺丝，用毛刷仔细打扫灰尘。之前给风扇表面清过一次灰，这次清理风扇倒是没什么灰，底部有些灰。</p><p><img src="https://pic1.zhimg.com/80/v2-11ef0b3018da299262c1a59c7363643c_1440w.webp" alt="给风扇清灰"></p><p>散热片的灰肉眼可见的多，需要用毛刷仔细清理。</p><p><img src="https://pic3.zhimg.com/80/v2-ee7f3ff62f0d1b35a301e6a35ec3a10e_1440w.webp" alt="给散热片清灰"></p><p>清理芯片的硅脂。<br>买硅脂自带了清理用的酒精棉（见上面军火展示），我用酒精棉擦掉了芯片上的硅脂，注意不要碰到芯片周围的小电容，不然容易短路。擦掉硅脂后，用干净的棉布擦干净芯片。</p><p><img src="https://pic3.zhimg.com/80/v2-080c8c49b0afd587f964a3ce5f7c04f2_1440w.webp" alt="清理后的芯片"></p><p>给芯片涂硅脂，先把硅脂挤到芯片上，然后套上塑料手指套，用手指把硅脂均匀地拍打在芯片上，注意不要把硅脂弄出芯片。涂抹完硅脂后，把散热片装回去，拧紧螺丝。上完硅脂忘记拍照了 :)</p><p>然后是更换网卡，先拔掉天线，然后拧掉网卡的螺丝，拔掉网卡，装上新的网卡，拧上螺丝，插上天线。这整个过程非常简单，但是不出意外的话，还是出意外了。</p><p><img src="https://pic1.zhimg.com/80/v2-654a48bdd8a43b24c414783c1ea0e2bc_1440w.webp" alt="网卡"></p><p>这个无线网卡的天线，不知道是我在拆的时候用力按了它导致它扁了，还是它在我拆之前就已经扁了。我换完网卡想将其按回去，发现它变形了… 据网友说这玩意是 <code>IPEX</code> 天线，出了名的脆弱，我也是醉了。看到的网友们切记拆机时要万分小心去处理这个天线，血的教训 QAQ…</p><p><img src="https://pic3.zhimg.com/80/v2-bcf94d194cfc2e669f7cc6f00746b2de_1440w.webp" alt="网卡口"><br><img src="https://pic1.zhimg.com/80/v2-8ced1e9d01d79a858ac63aa0675f54fc_1440w.webp" alt="变形的天线"></p><p><strong>天线接不上，最显著的问题就是信号不好，我电脑放在路由器旁边都只有两格信号！啊…</strong></p><p>总之昨晚用了各种办法都不能将天线按回去。今天去电脑店修，他们并没有这种天线，而且天线是接在转轴里面的，要拆开非常麻烦。店里只能帮我把天线焊到网卡上，但开机后信号还是非常弱，并没有解决问题。我们尝试了很多次，最后只能放弃，我打算下次返校再去找联想的网点维修。</p><p>拆机有风险，操作需谨慎。本期文章就到这里，我们下期再见。</p>]]></content><tags><tag>生活</tag><tag>翻车</tag></tags></entry><entry><title>Github Actions - workflow 如何调用另一个 workflow</title><link href="/posts/dfda3314/"/><url>/posts/dfda3314/</url><content type="html"><![CDATA[<div class="note note-secondary">            <p>在 Github Actions 中，我们可能会有这样的需求：一个 workflow 执行满足了某个条件后，调用另一个 workflow 完成相应业务。</p><p>本文将介绍如何在 Github Actions 的 workflow 中调用另一个 workflow.<br>Github 官方文档：<a href="https://docs.github.com/en/actions/using-workflows/reusing-workflows">https://docs.github.com/en/actions/using-workflows/reusing-workflows</a>.</p>          </div><h2 id="1-创建一个可重用的-workflow"><a href="#1-创建一个可重用的-workflow" class="headerlink" title="1. 创建一个可重用的 workflow"></a>1. 创建一个可重用的 workflow</h2><p>要创建一个可重用的 workflow，我们需要在<code>被调用的 workflow 文件</code>的 <code>on</code> 字段中指定 <code>workflow_call</code> 事件，如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">workflow_call:</span><br></code></pre></td></tr></table></figure><p>这样，我们就可以在其他 workflow 中调用这个 workflow 了。</p><h2 id="2-调用-workflow"><a href="#2-调用-workflow" class="headerlink" title="2. 调用 workflow"></a>2. 调用 workflow</h2><br>文档中提到如下信息：<hr><p>You call a reusable workflow by using the uses keyword. Unlike when you are using actions within a workflow, you call reusable workflows directly within a job, and not from within job steps.</p><p><code>jobs.&lt;job_id&gt;.uses</code></p><p>You reference reusable workflow files using one of the following syntaxes:</p><ul><li><code>&#123;owner&#125;/&#123;repo&#125;/.github/workflows/&#123;filename&#125;@&#123;ref&#125;</code> for reusable workflows in public and private repositories.</li><li><code>./.github/workflows/&#123;filename&#125;</code> for reusable workflows in the same repository.</li></ul><hr><p>也就是说，Github Action 有两种调用 <code>workflow</code> 的方式：</p><ol><li>调用本仓库的 workflow，使用 <code>./.github/workflows/&#123;filename&#125;</code>.<br><code>./</code> 代表 <code>Github Action 的默认工作目录</code>。</li><li>调用其他仓库的 workflow，使用 <code>&#123;owner&#125;/&#123;repo&#125;/.github/workflows/&#123;filename&#125;@&#123;ref&#125;</code>.</li></ol><p>文档中好像还提到了 <code>./.github/actions</code> 这种路径的调用方式，和 <code>./.github/workflows</code> 类似，感兴趣的可以自行查看文档：<a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-an-action-in-the-same-repository-as-the-workflow">Using an action in the same repository as the workflow</a></p><br><p>示例代码如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">in-local-repo-1:</span><br>    <span class="hljs-attr">uses:</span> <span class="hljs-string">octo-org/this-repo/.github/workflows/workflow-1.yml@172239021f7ba04fe7327647b213799853a9eb89</span><br>  <span class="hljs-attr">in-local-repo-2:</span><br>    <span class="hljs-attr">uses:</span> <span class="hljs-string">./.github/workflows/workflow-2.yml</span><br>  <span class="hljs-attr">in-another-repo:</span><br>    <span class="hljs-attr">uses:</span> <span class="hljs-string">octo-org/another-repo/.github/workflows/workflow.yml@v1</span><br></code></pre></td></tr></table></figure><p>由例子可见：使用 <code>uses:</code> 调用 workflow 时，需要直接在 <code>jobs.&lt;job_id&gt;.uses</code> 调用，而不是在 job 的 steps 中调用。</p><h2 id="3-传递参数"><a href="#3-传递参数" class="headerlink" title="3. 传递参数"></a>3. 传递参数</h2><p>如果你需要在调用 workflow 时传递参数，你可以使用 <code>with</code> 字段，如下所示：</p><p>这是调用 workflow 的文件 <code>workflow1.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">call-workflow:</span><br>    <span class="hljs-attr">uses:</span> <span class="hljs-string">octo-org/this-repo/.github/workflows/workflow.yml@main</span><br>    <span class="hljs-attr">with:</span><br>      <span class="hljs-attr">foo:</span> <span class="hljs-string">bar</span><br></code></pre></td></tr></table></figure><p>使用 <code>with</code> 字段传递参数，<code>foo</code> 是参数名，<code>bar</code> 是参数值。</p><p>这是被调用的 workflow 文件 <code>workflow2.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">workflow_call:</span><br>    <span class="hljs-attr">inputs:</span><br>      <span class="hljs-attr">foo:</span><br>        <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">called-workflow:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Print</span> <span class="hljs-string">the</span> <span class="hljs-string">input</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">inputs.foo</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>在被调用的 workflow 文件中，在 <code>on.workflow_call.inputs</code> 中定义参数，然后在 <code>jobs</code> 中使用 <code>$&#123;&#123; inputs.foo &#125;&#125;</code> 获取参数值。</p><h2 id="4-项目实战"><a href="#4-项目实战" class="headerlink" title="4. 项目实战"></a>4. 项目实战</h2><p>我们来看一个实际的例子，如何在一个 workflow 中调用另一个 workflow.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Detect</span> <span class="hljs-string">Update</span><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">schedule:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">cron:</span> <span class="hljs-string">&quot;0 0 * * 1&quot;</span><br>    <span class="hljs-comment"># 每个星期一零点检查</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">check-update:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-comment">### 省略业务逻辑 ###</span><br><br>    <span class="hljs-attr">outputs:</span><br>      <span class="hljs-attr">lxgw_newer:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.version-compare.outputs.lxgw_newer</span> <span class="hljs-string">&#125;&#125;</span><br><br>  <span class="hljs-attr">update:</span><br>    <span class="hljs-attr">needs:</span> <span class="hljs-string">check-update</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">needs.check-update.outputs.lxgw_newer</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">uses:</span> <span class="hljs-string">mobeicanyue/test-font/.github/workflows/split.yml@main</span><br>    <span class="hljs-attr">permissions:</span><br>      <span class="hljs-attr">contents:</span> <span class="hljs-string">write</span><br>    <span class="hljs-attr">with:</span><br>      <span class="hljs-attr">lxgw_tag:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">needs.check-update.outputs.lxgw_tag</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>这是一个检查更新的 workflow，分为两个 job：<code>check-update</code> 和 <code>update</code>。<code>check-update</code> 用于检查是否有更新，<code>update</code> 用于更新。<br>当 <code>check-update</code> 检查到有更新时，<code>update</code> 会调用 <code>mobeicanyue/test-font</code> 仓库的 <code>split.yml</code> workflow。</p><p>需要注意：</p><ol><li>你需要在 <code>job</code> 中使用 <code>uses</code> 调用 workflow，而不是在 <code>steps</code> 中使用。</li><li>如果你需要在 job 中使用 <code>if</code> 判断条件，需要在上一步的环境变量中输出到 <code>GITHUB_OUTPUT</code>，然后指定 <code>job</code> 的 <code>outputs</code>，这样才能在 <code>if</code> 中使用。</li><li>如果被调用的 workflow 涉及到 push 等操作，你需要在 <code>uses</code> 中指定 <code>permissions: contents: write</code>。具体权限参考：<a href="https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs">Assign permissions to jobs</a>.</li></ol><p>被调用文件 <code>split.yml</code> 如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Split</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">workflow_call:</span><br>    <span class="hljs-attr">inputs:</span><br>      <span class="hljs-attr">lxgw_tag:</span><br>        <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">split:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-comment">### 省略业务逻辑 ###</span><br></code></pre></td></tr></table></figure><p>这样，我们就实现了在一个 workflow 中调用另一个 workflow 的功能。</p>]]></content><tags><tag>Github</tag><tag>Github-Actions</tag></tags></entry><entry><title>我这大学四年</title><link href="/posts/ac61edc7/"/><url>/posts/ac61edc7/</url><content type="html"><![CDATA[<p>随着毕业答辩最后一个字落下，随着大学最后一节课 形式与政策的考试结束，我的大学生涯也似乎悄然画上了句号。没有轰轰烈烈的大起大落，没有激昂慷慨的呐喊，我在象牙塔的日子就这样平淡地结束了。</p><p>脑海也好像浮现出同学经常哼唱的那首歌：“潺潺流水终于穿过了群山一座座 好像多年之后你依然执着…”</p><p>莫名感觉自己有点<code>为赋新词强说愁</code>的感觉哈哈。</p><p>人生或许就是活一个瞬间，往后想念。大学时时常怀念高中，指不定工作了又怀念起大学了。人对一个地方怀念，是因为这个地方承载着自己的回忆和彼时对未来的憧憬。趁着最近有空，我也来回忆一下我四年的大学生活。</p><p><img src="https://pic3.zhimg.com/80/v2-536b29ac88803fe2c4bdd8aa89ad8552_1440w.webp" alt="校园操场"></p><p>首先我庆幸自己选择了计算机这一专业，我很喜欢它，兴趣是最好的老师，我在这四年里学到了很多东西。然后要感谢遇到的舍友和同学，他们性格很好，我和他们相处的很融洽，欢度了大学四年的时光。感谢学校的老师，他们教会了我很多东西，让我受益匪浅。感谢互联网无私的开源分享精神，让我能够学到更多的知识。</p><p>其次要夸一下学校的绿化做得特别好，绿树成荫，环境相当宜人，处处都是树。就连宿舍外的树上每天都有鸟儿在叽叽喳喳。图书馆门前有大片的开阔草坪，时常会看到学生在上面晒太阳、读书、举办活动。</p><p>如果阳光明媚，我们一路沿着图书馆至主教学楼散步，左边近处是名人石雕，不远处是开阔的草坪，右手是边杨柳绕堤的小湖，微风拂过湖面吹至脸颊，落花簌簌飘落。往草坪高处走是小山坡，小山坡上，处处是盛开的花朵。走到另一边的山坡上会有小亭子，在亭子里可以看到整个校园的风景，应该可以欣赏到日出日落。</p><p><img src="https://pic4.zhimg.com/80/v2-778576cfa1a19d1d10df4e44e0498c8f_1440w.webp" alt="校道"></p><p>还记得 20 年刚来学校的那会，还没有扫脸出入的门禁，我似乎是验录取通知书进来的。那天下着雨，天气灰蒙蒙的，我撑着伞推着行李箱前行。从南门走了好久的路到致用楼，学院里有志愿者学姐帮忙带路到和风寝室大门口，我在宿舍放东西完就去取军训物品，那时舍友也刚来没多久，还在打扫宿舍卫生。</p><p>然后就是为期一星期的军训了，多亏了这阴雨蒙蒙的七天，太阳基本上没露过头，我们少受了很多罪（连我买的防晒霜都没用上哈哈），还记得每天打伞踩着雨水去军训，在体育馆屋檐下站军姿。军训最后两天刚好放晴，在操场上阅兵，有种雨后天晴的美。</p><p><img src="https://pic1.zhimg.com/80/v2-4ff242e1aa4af66899d7f1a2d3b58e68_1440w.webp" alt="军训前的准备"></p><p>在军训结束后，我们就开始了大学的生活。</p><p>大一的时候主要心思是花在学习上的，专业开设了不少的计算机基础课程：C&#x2F;C++、高数、计算机导论、网页设计、计算机组成原理、数据库等。我有空天天往图书馆跑，学习很有感觉，可能是学新东西有新鲜感，一天都不累。还参加了学校的图书馆委员会，每周参加部门举办的活动，比如说科普进校园（去比较远的小学上科普课）、举办科普比赛活动、参加图书馆游园会等等，认识了很多同学。</p><p><img src="https://pic1.zhimg.com/80/v2-9efcc548e4d479f9fa715eb896016d84_1440w.webp" alt="计算机科学"></p><p><img src="https://pic2.zhimg.com/80/v2-9fda7ec1d935bda8949042dc466d6109_1440w.webp" alt="图书馆活动"></p><p>大二没什么变化，线代、概率统计、数据结构、算法设计、计网、Java、Python、Web 前后端框架。看了不少网文和漫画，现在有印象的是万古神帝（现在好像 4000 多章了，虽然不是特别拖沓但是真的太长了）、完美世界（后期感觉尾大不掉，虎头蛇尾的感觉）、夜的命名术（前期不错，后期答辩）、极品家丁（神作）、大奉打更人（结尾有点草率，总体不失为一本好书）。</p><p>大一大二拿了 2 次一等奖学金、2 次二等奖学金，算是比较值得高兴的事。</p><p><img src="https://pic3.zhimg.com/80/v2-70e575b60fc803d56f24a176363accca_1440w.webp" alt="上课"></p><p>大三大四学习就有点乏力，Android 开发、组网、网安、数据挖掘、ML、DL、NLP 等，虽然有难度但是结课还是比较容易的。我自学学会了倒腾服务器和在上面部署应用、并开始写博客。大三下的时候搬寝室，从和风搬到了嘉风，寝室硬件变得更好了，上床从爬楼梯变成了踩阶梯，甚至洗手台都有热水，楼下就是小卖部和早餐店、饭店，很方便。后面寝室一楼学校还建了健身房和自习室，好的不像话哈哈哈。</p><p>大四上考研没上岸，后面去了中学实习，当信息技术课老师，教 python。联考事业编没进面，可能是准备得还不够充分，有点遗憾。前不久毕业设计答辩非常顺利地通过了，感谢指导老师的帮助。</p><p>现走在学校路上看着熙熙攘攘的人群，陌生又熟悉，仿佛在另一个世界 — 我不知不觉间好像很久没有呆在教室上课了，从大四开始，就一直在备考、实习、准备毕业答辩。弘德楼和特教楼上课的情景还是那么历历在目，仿佛昨日重现。</p><p><img src="https://pic1.zhimg.com/80/v2-5ae4b52daba195b19ce8666451d8f4ec_1440w.webp" alt="困是常态"></p><p>大学的记忆碎片一幕幕在眼前划过。早上赶早八迷迷糊糊地起床刷牙吃早餐，上课听讲回答老师问题，下课打着伞踩着雨水、穿过熙熙攘攘的人群去另一栋教学楼上课，课间眺望学校远处郁郁葱葱的小树林，中午赶到食堂吃饭，短暂的午休后又起身去上课。如果是水课会自习或者玩手机。和舍友上体育课划水、在寝室打游戏。周末利用时间去图书馆学习。偶尔出去聚餐逛街。放假有空去找女票玩。好像很难有什么印象深刻的事情，平淡而又充实。</p><p>现在再怎么怀念也没有当时的那种感觉了，不论是开心的还是焦虑的。就像高中那会总觉得成绩不好天会塌了，大学里很紧张的每个期末的课设答辩、期末考试，现在看看好像也没什么了。或许不是人变洒脱了，而是曾经那些令你焦虑的事情，已经和现在的你没有关系了。</p><p><img src="https://pic3.zhimg.com/80/v2-c9483ce8cafa6dd96641c56b2baacc7e_1440w.webp" alt="校园风景"></p><p>前段时间还和舍友去网吧通宵打 PUBG 和 LOL，一打打到了早上 7 点，走出去看见天亮了，第一次有种恍如隔世的感觉。回学校吃了个面条，洗了个热水澡，迷迷糊糊地睡了一觉，醒来的时候已经是下午了，第一回体验到熬夜感觉。算是体验到了大家口中的大学在网吧熬夜？虽然并不推荐，不太健康 hhh</p><p>一个人的经历就像一座冰山一样，很少一部分显露在外面，大部分都隐藏在水面之下。文字所展现出来的就是所谓冰山一角，文字只是将其中印象深刻的冰山展现出来，而其余漫长、蹉跎、迷茫的日子，则不足为外人道也。</p><p>我还想给看到这篇文章的大学新生一些建议。</p><p>首先，我认为大学最重要的状态是该玩玩、该学学，不要一味地玩，也不要一味地去像高中那样埋头苦干，大学是一个宽广的天地，适当的放松自己，不要太过焦虑。我大学虽然学是学了，但是没有好好去放开玩，有点遗憾。其次是适当参加社团活动，可以认识更多的朋友，也可以锻炼自己的能力，对以后步入社会有好处。如果你所在专业有什么比赛可以参加也可以尝试一下，锻炼自己的能力，可以给自己简历增色不少。最后，你大学要有清晰的规划，在大三的时候应该开始考虑自己的未来，是继续读研、考公考编、找工作等等，不要等到大四才开始考虑，那时候准备就有点手忙脚乱了。</p><p>我自己没有认真整理过拍摄的照片，本文所展示的也只是校园生活中随手拍摄的一部分，以后有机会再补充。</p><p><img src="https://pic3.zhimg.com/80/v2-610edced8532eae1dd4d79d238c25c46_1440w.webp" alt="小道"></p><p>本期生活随笔就到这里，我们下期再见。</p>]]></content><tags><tag>随笔</tag><tag>生活</tag></tags></entry><entry><title>Manjaro Linux 有何优缺点？是否推荐使用？</title><link href="/posts/f0c7a71a/"/><url>/posts/f0c7a71a/</url><content type="html"><![CDATA[<p><img src="https://pic1.zhimg.com/80/v2-bbe860b20d0a54a003a27483ca8071b8_1440w.webp" alt="Manjaro"></p><blockquote><p>Manjaro 是基于 Archlinux 的 Linux 发行版，注重用户友好性和易用性。它采用滚动发布更新模式，使用 pacman 作为软件包管理器。关于它的争议也不在少数。</p><p>笔者使用了约一年的 Manjaro，不久前转为 Archlinux：<a href="/posts/22b3d1e2/" title="初来乍到 Archlinux">初来乍到 Archlinux</a>。那么，Manjaro Linux 值得推荐使用吗？有何优缺点？本文将探讨这些问题，帮助你做出决策。</p></blockquote><p>在本文开始之前，我们得先明确自己对操作系统的需求。<strong>用户对操作系统的需求不同，那么适合的操作系统也不尽相同。</strong> 什么样的<strong>需求</strong>就促使你做出什么样的<strong>选择</strong>。我并不赞成在明确受众需求之前就直接否定某个操作系统是否适合用户的观点。</p><ul><li><p>如果你不喜欢折腾，只是想用个稳定的操作系统，因为厌倦了 Windows 的各种毛病而想尝试 Linux。那么 Manjaro Linux 可能是一个不错的选择。它提供了很多缺省的配置和软件包，让你可以快速上手。</p></li><li><p>如果你是一个喜欢折腾、喜欢自定义操作系统的人，那么 Archlinux 可能更适合你，这种方式更加灵活，但是也需要你有一定的 Linux 使用经验。</p></li></ul><p>二者在我眼里都是优秀的 Linux 发行版，只是目标用户不同。基于此，我们来探讨一下 Manjaro Linux 的差异及优缺点。</p><h2 id="1-Manjaro-简介"><a href="#1-Manjaro-简介" class="headerlink" title="1. Manjaro 简介"></a>1. Manjaro 简介</h2><p>Manjaro 是基于 Archlinux 的操作系统发行版，以其简单、用户友好且开箱即用而备受欢迎，提供多种流行的桌面环境，如 XFCE、KDE、GNOME。</p><p>Manjaro 采用滚动式更新模式，这意味着系统会持续接收最新的软件更新，长期保持系统处于最新状态，无需重新安装整个操作系统。还预置了许多开箱即用的软件包，让用户可以快速上手。</p><h2 id="2-Manjaro-Linux-与-Archlinux-的差异"><a href="#2-Manjaro-Linux-与-Archlinux-的差异" class="headerlink" title="2. Manjaro Linux 与 Archlinux 的差异"></a>2. Manjaro Linux 与 Archlinux 的差异</h2><p>Manjaro 是 Manjaro，Archlinux 是 Archlinux，二者虽然有很多相似之处，但却早有天壤之别。下面简单介绍一下二者之间的差异。</p><h3 id="2-1-软件源及发行周期"><a href="#2-1-软件源及发行周期" class="headerlink" title="2.1 软件源及发行周期"></a>2.1 软件源及发行周期</h3><p>首先，尽管 Manjaro 使用 pacman 软件包管理器，但 Manjaro 有自己的软件源，不直接使用 Archlinux 的软件源，并且早已不与 Arch 兼容。</p><p><img src="https://pic1.zhimg.com/80/v2-922990bf36b2a74ebfdce17f13fdab0c_1440w.webp" alt="Manjaro 测试 Arch Linux 软件包的稳定性 &lt;sup id=&quot;fnref:1&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--rounded&quot; aria-label=&quot;https://itsfoss.com/endeavouros-vs-manjaro/&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;"></p><p>其次，Manjaro Linux 虽然也和 Archlinux 一样采用滚动发布更新模式，但是 Manjaro Linux 会对软件包进行测试、修改等。因此，Manjaro Linux 的软件包更新周期会比 Archlinux 的更新周期慢一些以保证稳定性，周期大概是 1-2 周甚至更久。</p><h3 id="2-2-Manjaro-和-Arch-的文档和问题解决"><a href="#2-2-Manjaro-和-Arch-的文档和问题解决" class="headerlink" title="2.2 Manjaro 和 Arch 的文档和问题解决"></a>2.2 Manjaro 和 Arch 的文档和问题解决</h3><p>Archlinux 以其详细的文档 Arch wiki 著称，是 Archlinux 用户的宝库。Manjaro 和 Arch 是两个不同的发行版，Arch wiki 并不完全适用于 Manjaro。</p><p>很多 Manjaro 的问题，也不能用 Arch 的解决方案解决，因此，我推荐你在遇到问题时，优先查看 Manjaro 的 wiki 和到 Manjaro 的论坛寻找解决方案。</p><h3 id="2-3-ArchlinuxCN-并不适用于-Manjaro"><a href="#2-3-ArchlinuxCN-并不适用于-Manjaro" class="headerlink" title="2.3 ArchlinuxCN 并不适用于 Manjaro"></a>2.3 ArchlinuxCN 并不适用于 Manjaro</h3><blockquote><p>Arch Linux 中文社区仓库是由 Arch Linux 中文社区驱动的非官方软件仓库，包含许多官方仓库未提供的额外的软件包，以及已有软件的 git 版本等变种。一部分软件包的打包脚本来源于 AUR，但也有许多包与 AUR 不一样<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://www.archlinuxcn.org/archlinux-cn-repo-and-mirror/">[2]</span></a></sup>。</p></blockquote><p>ArchlinuxCN 上放的都是二进制的软件包，很多时候并不适合 Manjaro。Manjaro 对系统的某些修改，会导致软件包无法正常运行（比如 nekoray）。因此，我建议你在使用 Manjaro 时，不要添加 ArchlinuxCN 仓库。</p><p>AUR 通常可以正常使用，因为 AUR 是下载源码到本地进行编译安装的（除非碰到需要某些依赖等问题）。</p><h2 id="3-Manjaro-Linux-的优缺点"><a href="#3-Manjaro-Linux-的优缺点" class="headerlink" title="3. Manjaro Linux 的优缺点"></a>3. Manjaro Linux 的优缺点</h2><p>正如上文提到的，<strong>用户对操作系统的需求不同，那么适合的操作系统也不尽相同。</strong> </p><p>下面谈到的优缺点同样对于不同的用户同样有不同的取舍与选择。</p><h3 id="3-1-优点"><a href="#3-1-优点" class="headerlink" title="3.1 优点"></a>3.1 优点</h3><p>根据我用了一年多的 Manjaro Linux 的体验，我认为 Manjaro Linux 的优点有：</p><ul><li><strong>继承了一些 Archlinux 的优点</strong>：Manjaro Linux 继承了一些 Archlinux 的优点，比如滚动发布更新模式、AUR 等。由于更新慢，不会出什么大毛病。</li><li><strong>易用性</strong>：Manjaro Linux 提供了很多缺省的配置和软件包，很多东西都是开箱即用的。对于新手和不想折腾的 Linux 用户来说，Manjaro Linux 是一个不错的选择。</li><li><strong>稳定性</strong>：Manjaro Linux 一个可以明显感知的优点就是它的稳定性。我用了一年多的 Manjaro Linux，没遇到过滚挂的情况，系统也没什么大毛病，相当适合养老。</li></ul><h3 id="3-2-缺点"><a href="#3-2-缺点" class="headerlink" title="3.2 缺点"></a>3.2 缺点</h3><p>Manjaro 的不足也是相对应的：</p><ul><li><strong>软件包更新周期慢</strong>：Manjaro Linux 会对软件包进行测试、修改等，因此软件包更新周期会比 Archlinux 的更新周期慢。这对于追求新功能的用户来说可能不太合适，并且可能导致某些更新激进的软件包出现兼容性问题。</li><li><strong>自定义性不高</strong>：Manjaro Linux 隐藏了系统的复杂性，这意味着你不能像 Archlinux 那样自如地自定义系统。如果你喜欢折腾，Manjaro Linux 可能不太适合你。</li><li><strong>无法使用 ArchlinuxCN 仓库</strong>：对于我个人来说，这是我切换到 Archlinux 的原因之一。另外一个是想试试原汁原味的 Archlinux.</li></ul><h3 id="3-3-总结"><a href="#3-3-总结" class="headerlink" title="3.3 总结"></a>3.3 总结</h3><p>总的来说，Manjaro Linux 是一个注重用户友好性和易用性的 Linux 发行版，如果你喜欢的是开箱即用的配置和滚动更新，那么选择 Manjaro 是很合理的。</p><p>如果你是一个喜欢折腾、喜欢自定义操作系统的人，那么 Archlinux 可能更适合你。Archlinux 虽然安装上比较繁琐，但这是自由对等的代价，你可以更加灵活地自定义系统。</p><h2 id="4-EndeavourOS"><a href="#4-EndeavourOS" class="headerlink" title="4. EndeavourOS"></a>4. EndeavourOS</h2><p><img src="https://pic4.zhimg.com/80/v2-d8dee0d2a1833f0b3cd35ca09bdc091f_1440w.webp" alt="EndeavourOS"></p><p>如果你想体验更加原汁原味的 Archlinux，但又不想折腾，那么 EndeavourOS 可能是一个不错的选择。EndeavourOS 是一个基于 Archlinux 的 Linux 发行版，它提供了一个图形化的安装程序，让你可以快速安装 Archlinux。EndeavourOS 保持了 Archlinux 的原汁原味，但是提供了一些额外的工具和软件包，让你可以更加方便地使用 Arch。</p><p><strong>EndeavourOS 没有自己的软件源。它依赖于 Arch Linux 的主软件源</strong>，因此使用 EndeavourOS 可以获得比较 <code>纯粹</code> 的 Archlinux 体验<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://itsfoss.com/endeavouros-vs-manjaro/">[1]</span></a></sup>。</p><p><br><br></p><p>参考资料：</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://itsfoss.com/endeavouros-vs-manjaro/">https://itsfoss.com/endeavouros-vs-manjaro/</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.archlinuxcn.org/archlinux-cn-repo-and-mirror/">https://www.archlinuxcn.org/archlinux-cn-repo-and-mirror/</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content><tags><tag>Linux</tag><tag>Manjaro-Linux</tag><tag>Archlinux</tag></tags></entry><entry><title>在 Linux 上安装和配置 GraalVM</title><link href="/posts/526d514a/"/><url>/posts/526d514a/</url><content type="html"><![CDATA[<div class="note note-primary">            <p>GraalVM 是一个高性能的通用虚拟机，支持 Java、JavaScript、Python、Ruby、R、WebAssembly 等多种语言。通过它你可以将 Java 程序编译成本地二进制文件，大大提高程序的启动速度和运行效率。本文介绍如何在 Linux 系统上安装配置 GraalVM.</p>          </div><p>截止到文章发布时，GraalVM 仍没有在 Debian 和 Archlinux 的官方仓库中发布，不能直接通过包管理器安装，需要我们手动下载。而 GraalVM 的 <code>Community Edition</code> 版本，是 GraalVM 的开源版本，与 <code>OpenJDK</code> 类似。本文将其作为 GraalVM 演示。</p><h2 id="1-下载-GraalVM"><a href="#1-下载-GraalVM" class="headerlink" title="1. 下载 GraalVM"></a>1. 下载 GraalVM</h2><p>访问 <a href="https://github.com/graalvm/graalvm-ce-builds/releases/">GraalVM Community’s builds</a> 下载页面，选择你需要的 JDK 版本。截止到文章发布时，最新的 <code>JDK LTS</code> 版本是 <code>21</code>.</p><p>使用 <code>wget</code> 命令下载压缩包，我选择 <code>GraalVM for JDK 21 Community 21.0.2</code> 的压缩包下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-21.0.2/graalvm-community-jdk-21.0.2_linux-x64_bin.tar.gz<br></code></pre></td></tr></table></figure><p>如果下载速度过慢可以考虑使用镜像站下载。</p><h2 id="2-解压-GraalVM"><a href="#2-解压-GraalVM" class="headerlink" title="2. 解压 GraalVM"></a>2. 解压 GraalVM</h2><p>下载完成后，解压你下载的 GraalVM：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -xvf graalvm-community-jdk-21.0.2_linux-x64_bin.tar.gz<br></code></pre></td></tr></table></figure><p>将解压出的文件夹重命名为 <code>java-21-graalvm</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> graalvm-community-openjdk-21.0.2+13.1 java-21-graalvm<br></code></pre></td></tr></table></figure><p>将 <code>java-21-graalvm</code> 移至 <code>/usr/lib/jvm</code> 目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mv</span> java-21-graalvm /usr/lib/jvm/<br></code></pre></td></tr></table></figure><h2 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3. 配置环境变量"></a>3. 配置环境变量</h2><p>编辑 <code>/etc/profile</code> 文件，添加 GraalVM 的环境变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/profile<br></code></pre></td></tr></table></figure><p>在文件末尾添加如下内容，将 <code>GRAALVM_HOME</code> 和 <code>JAVA_HOME</code> 设置为你的 GraalVM 安装路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> GRAALVM_HOME=/usr/lib/jvm/java-21-graalvm<br><span class="hljs-built_in">export</span> JAVA_HOME=<span class="hljs-variable">$GRAALVM_HOME</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$GRAALVM_HOME</span>/bin<br></code></pre></td></tr></table></figure><p>使配置生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h2 id="4-查看-GraalVM-版本"><a href="#4-查看-GraalVM-版本" class="headerlink" title="4. 查看 GraalVM 版本"></a>4. 查看 GraalVM 版本</h2><p>查看 GraalVM 的 <code>OpenJDK</code> 和 <code>native-image</code> 版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java --version &amp;&amp; <span class="hljs-built_in">echo</span> &amp;&amp; native-image --version<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">openjdk 21.0.2 2024-01-16<br>OpenJDK Runtime Environment GraalVM CE 21.0.2+13.1 (build 21.0.2+13-jvmci-23.1-b30)<br>OpenJDK 64-Bit Server VM GraalVM CE 21.0.2+13.1 (build 21.0.2+13-jvmci-23.1-b30, mixed mode, sharing)<br><br>native-image 21.0.2 2024-01-16<br>GraalVM Runtime Environment GraalVM CE 21.0.2+13.1 (build 21.0.2+13-jvmci-23.1-b30)<br>Substrate VM GraalVM CE 21.0.2+13.1 (build 21.0.2+13, serial gc)<br></code></pre></td></tr></table></figure><h2 id="5-使用-GraalVM-编译-Java-程序"><a href="#5-使用-GraalVM-编译-Java-程序" class="headerlink" title="5. 使用 GraalVM 编译 Java 程序"></a>5. 使用 GraalVM 编译 Java 程序</h2><h3 id="5-1-编译-Java-程序"><a href="#5-1-编译-Java-程序" class="headerlink" title="5.1 编译 Java 程序"></a>5.1 编译 Java 程序</h3><p>新建一个 Java 文件 <code>HelloWorld.java</code>，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello, GraalVM!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先使用 <code>javac</code> 编译 <code>Hello.java</code>，生成 <code>HelloWorld.class</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">javac HelloWorld.java<br></code></pre></td></tr></table></figure><p>然后使用 <code>native-image</code> 将 <code>HelloWorld.class</code> 文件编译成本地二进制文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">native-image HelloWorld<br></code></pre></td></tr></table></figure><p>执行编译后的二进制文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./helloworld<br></code></pre></td></tr></table></figure><p>输出 <code>Hello, GraalVM!</code> 则表示 GraalVM 安装成功。</p><h3 id="5-2-编译-SpringBoot-项目"><a href="#5-2-编译-SpringBoot-项目" class="headerlink" title="5.2 编译 SpringBoot 项目"></a>5.2 编译 SpringBoot 项目</h3><p>同样的，你也可以对 SpringBoot 项目进行编译，提高启动速度和运行效率。<br>首先将 SpringBoot 项目打包成 <code>jar</code> 文件</p><ul><li>idea 可以点击左侧 <code>clean</code> –&gt; <code>package</code> 直接打包，</li><li>或者使用 <code>maven</code> 命令打包：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn clean package<br></code></pre></td></tr></table></figure></li></ul><p>然后使用 <code>native-image</code> 将 <code>jar</code> 文件编译成本地二进制文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">native-image -jar your-springboot-project.jar<br></code></pre></td></tr></table></figure><p>执行编译后的二进制文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./your-springboot-project<br></code></pre></td></tr></table></figure><p><br><br></p><p>参考文章：</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://docs.oracle.com/zh-cn/learn/graalvm-native-image-quick-start/index.html">https://docs.oracle.com/zh-cn/learn/graalvm-native-image-quick-start/index.html</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.graalvm.org/jdk21/reference-manual/native-image/overview/Options/">https://www.graalvm.org/jdk21/reference-manual/native-image/overview/Options/</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content><tags><tag>Java</tag><tag>GraalVM</tag></tags></entry><entry><title>记录一次服务器部署 SpringBoot 项目的过程</title><link href="/posts/e9bc4027/"/><url>/posts/e9bc4027/</url><content type="html"><![CDATA[<p>我毕业设计做的是 <code>SpringBoot</code> 前后端结合项目，项目开发完成后，需要将项目部署到服务器上，以便在公网访问。我想尝试一下真正的项目部署流程，即使毕设并没有要求我部署到服务器上。</p><div class="note note-info">            <p>不同于以往相对严谨的科普教程，本文偏向于整理一个大概的 SpringBoot 项目部署流程框架，内容也会随意些。如有谬误之处，欢迎指正。</p>          </div><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><h3 id="1-1-开发环境"><a href="#1-1-开发环境" class="headerlink" title="1.1 开发环境"></a>1.1 开发环境</h3><p><strong>开发环境：</strong><br>开发系统环境：<code>Archlinux</code><br>服务器系统：<code>Debian-12.5</code></p><p><strong>开发工具：</strong><br>开发软件：<code>IntelliJ IDEA 2024.1</code><br>图形化数据库管理工具：<code>Beekeeper-studio v4.2.9</code></p><p><strong>开发框架：</strong><br>Java 环境：<code>OpenJDK version 21.0.2</code><br>Springboot 版本：<code>3.2.4</code><br>MariaDB 数据库：<code>11.3.2</code></p><h3 id="1-2-备份数据库"><a href="#1-2-备份数据库" class="headerlink" title="1.2 备份数据库"></a>1.2 备份数据库</h3><p>这里我直接将开发时使用的数据库备份导入到服务器上，方便省事。<br>MariaDB 数据库备份命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mariadb-dump -u root -p database_name &gt; bak.sql<br></code></pre></td></tr></table></figure><p>上述命令执行完毕，我们就可以在目录下找到备份好的 <code>bak.sql</code> 文件了。</p><h3 id="1-3-打包图片资源"><a href="#1-3-打包图片资源" class="headerlink" title="1.3 打包图片资源"></a>1.3 打包图片资源</h3><p>项目需要使用一些图片资源，要打包上传到服务器上。</p><p>执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -caf images.tar.zst images<br></code></pre></td></tr></table></figure><p>这里我使用了 <code>zstd</code> 压缩算法，是一种压缩效率很高、压缩速度也很快的算法。压缩后的文件名为 <code>compress.tar.zst</code>。</p><ul><li><code>-caf</code> 压缩指定文件或文件夹，自动选择压缩算法</li><li><code>images</code> 要压缩的文件夹</li><li><code>images.tar.zst</code> 压缩后的文件名</li></ul><h2 id="2-打包-SpringBoot-项目"><a href="#2-打包-SpringBoot-项目" class="headerlink" title="2. 打包 SpringBoot 项目"></a>2. 打包 SpringBoot 项目</h2><p>在 <code>IntelliJ IDEA</code> 中，点击右侧栏的 <code>Maven</code> 展开找到 <code>Lifecycle</code>，先双击执行 <code>clean</code>，再执行 <code>package</code> 进行打包。<br>当然，你也可以在终端中执行 <code>mvn clean package</code> 命令来打包，这和在 <code>IDEA</code> 中执行的效果是一样的。</p><p><img src="https://pic1.zhimg.com/80/v2-014016435bdec1ee44f103ced9db2dd0_1440w.webp" alt="构建 jar 包"></p><p>执行完毕后我们就可以在项目的 <code>target</code> 目录下找到打包好的 <code>jar</code> 包了。</p><p><img src="https://pic2.zhimg.com/80/v2-8a1ec89db3eee3c40a435a524c86ffc9_1440w.webp" alt="找到 jar 包"></p><h2 id="3-上传到服务器"><a href="#3-上传到服务器" class="headerlink" title="3. 上传到服务器"></a>3. 上传到服务器</h2><p>现在开始把 数据库备份文件、<code>jar</code> 包、图片资源压缩包 上传到服务器上。我是通过 <code>1Panel</code> 面板上传的。</p><p>你也可以通过 <code>scp</code> 命令上传文件到服务器上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp -P 22 /path/to/local/file username@server:/path/to/remote/file<br></code></pre></td></tr></table></figure><ul><li><code>-P</code> 指定端口</li><li><code>/path/to/local/file</code> 本地文件路径</li><li><code>username</code> 服务器用户名</li><li><code>server</code> 服务器地址</li><li><code>/path/to/remote/file</code> 服务器文件路径</li></ul><h2 id="4-服务器配置"><a href="#4-服务器配置" class="headerlink" title="4. 服务器配置"></a>4. 服务器配置</h2><p>既然要在服务器上运行项目，那么服务器就要安装并配置和本地开发环境一样的运行环境。</p><h3 id="4-1-安装-Java-环境"><a href="#4-1-安装-Java-环境" class="headerlink" title="4.1 安装 Java 环境"></a>4.1 安装 Java 环境</h3><p>值得一提的是 <code>OpenJDK 21</code> 正式版于 <code>2023/09/19</code> 发布<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://openjdk.org/projects/jdk/21/#Schedule">[1]</span></a></sup>，距今（<code>2024/04/17</code>）已经半年多了。但 Debian 这个老顽固 <code>stable</code> 源迟迟未能更新至 <code>OpenJDK 21</code>，至今还在 <code>testing</code> 源中测试。<code>stable</code> 源目前仅提供 <code>OpenJDK 17</code>。</p><p><img src="https://pic3.zhimg.com/80/v2-f5959e59c01a9a22098ed2861d0e6cf2_1440w.webp" alt="openjdk21 的计划表"></p><p><img src="https://pic4.zhimg.com/80/v2-376f2c6779b47f9127ceb781d4868257_1440w.webp" alt="仍位于 testing 源的 openjdk21"></p><p>不禁想起一个笑话：<code>Debian stable = Debian stale</code><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://itsfoss.com/debian-vs-ubuntu/">[2]</span></a></sup></p><br><p>为了项目运行，我只能开启 <code>testing</code> 源来安装 <code>OpenJDK 21</code>.<br>输入以下命令，修改 <code>/etc/apt/sources.list</code> 文件，将 <code>testing</code> 加到源中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/apt/sources.list<br></code></pre></td></tr></table></figure><p>我们会看到 <code>bookworm</code>, <code>bookworm-security</code>, <code>bookworm-updates</code> 三个源，但只需要修改 <code>bookworm</code> 源即可，<code>bookworm</code> 是 Debian 12 的开发代号，你可以根据你的系统版本修改。</p><p>找到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">deb http://deb.debian.org/debian bookworm main contrib non-free non-free-firmware<br>deb-src http://deb.debian.org/debian bookworm main contrib non-free non-free-firmware<br></code></pre></td></tr></table></figure><p>在 <code>bookworm</code> 前面加上 <code>testing</code>，变成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">deb http://deb.debian.org/debian testing bookworm main contrib non-free non-free-firmware<br>deb-src http://deb.debian.org/debian testing bookworm main contrib non-free non-free-firmware<br></code></pre></td></tr></table></figure><h3 id="4-2-安装-MariaDB-数据库"><a href="#4-2-安装-MariaDB-数据库" class="headerlink" title="4.2 安装 MariaDB 数据库"></a>4.2 安装 MariaDB 数据库</h3><p>一开始项目启动时我甚至还忘记装 <code>mariadb</code>。一看报错：无法连接数据库数据库，我才想起来。<br>所以切记要先安装数据库再启动项目。</p><p>输入以下命令安装 <code>mariadb</code> 数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install mariadb-server -y<br></code></pre></td></tr></table></figure><h3 id="4-3-配置数据库"><a href="#4-3-配置数据库" class="headerlink" title="4.3 配置数据库"></a>4.3 配置数据库</h3><p>输入以下命令配置数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mariadb-secure-installation<br></code></pre></td></tr></table></figure><p>这里的具体配置参考我往期文章：<a href="https://blog.ovvv.top/posts/53c8336d/#4-%E9%85%8D%E7%BD%AE-MariaDB">在 Archlinux 上安装使用 MariaDB</a>.</p><p>数据库密码注意要修改为 Springboot 项目配置 <code>application.yml</code> 中对应的密码。</p><h3 id="4-3-导入数据库"><a href="#4-3-导入数据库" class="headerlink" title="4.3 导入数据库"></a>4.3 导入数据库</h3><p>输入以下命令连接数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mariadb -u root -p<br></code></pre></td></tr></table></figure><p>创建数据库，这里的 <code>database_name</code> 要和 <code>application.yml</code> 中配置的数据库名一致：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE database_name;<br></code></pre></td></tr></table></figure><p>导入数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mariadb">use database_name;<br>source /path/to/bak.sql;<br></code></pre></td></tr></table></figure><h3 id="4-4-解压图片资源"><a href="#4-4-解压图片资源" class="headerlink" title="4.4 解压图片资源"></a>4.4 解压图片资源</h3><p>解压我们上传的图片资源到 <code>application.yml</code> 配置的路径下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -xf images.tar.zst -C /path/to/images<br></code></pre></td></tr></table></figure><ul><li><code>-xf</code> 解压文件</li><li><code>images.tar.zst</code> 压缩包</li><li><code>-C</code> 指定解压路径</li></ul><h2 id="5-启动项目"><a href="#5-启动项目" class="headerlink" title="5. 启动项目"></a>5. 启动项目</h2><p>Springboot 打包好后可以通过 <code>java -jar xxx.jar</code> 命令启动项目。但是这样启动的项目会随着终端关闭而停止，所以我们可以通过 <code>nohup</code> 命令让项目在后台运行。</p><p>输入以下命令启动项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> java -jar xxx.jar &gt;&gt; nohup.out 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><ul><li><code>nohup</code> 命令可以让程序在后台运行，不占用当前终端，不会因为终端关闭而停止。</li><li><code>&gt;&gt; nohup.out 2&gt;&amp;1</code> 将输出重定向到 <code>nohup.out</code> 文件中，这样我们可以查看项目的输出日志。</li></ul><h2 id="6-反向代理与-SSL-证书申请"><a href="#6-反向代理与-SSL-证书申请" class="headerlink" title="6. 反向代理与 SSL 证书申请"></a>6. 反向代理与 SSL 证书申请</h2><p>我用了 <code>1Panel</code> 比较方便地配置了反向代理和申请了 SSL 证书。这里就不过多赘述了。感兴趣的可以看我往期文章：<a href="/posts/15c02856/" title="1Panel 安装配置教程">1Panel 安装配置教程</a></p><p>反向代理与 SSL 证书申请 配置好后，我们就可以通过域名访问我们的项目了，整个部署流程就结束了。过程虽然不难，但有很多细节需要注意，一不小心就会出错。</p><h2 id="7-测试项目"><a href="#7-测试项目" class="headerlink" title="7. 测试项目"></a>7. 测试项目</h2><p>在项目进行本地开发阶段时，务必进行全面的测试，确保各项功能稳定可靠。当项目部署完成后，亦不可掉以轻心，仍需进行相应的测试，以防因环境配置不当（特别是数据库部分）而引发报错。一切准备就绪后，项目就可以正式上线了。</p><p><br><br></p><p>参考资料：</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://openjdk.org/projects/jdk/21/#Schedule">https://openjdk.org/projects/jdk/21/#Schedule</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://itsfoss.com/debian-vs-ubuntu/">https://itsfoss.com/debian-vs-ubuntu/</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content><tags><tag>运维</tag><tag>部署</tag><tag>Java</tag><tag>SpringBoot</tag><tag>MariaDB</tag></tags></entry><entry><title>Bitwarden (Vaultwarden) 部署使用教程</title><link href="/posts/2d9cb7bd/"/><url>/posts/2d9cb7bd/</url><content type="html"><![CDATA[<p><img src="https://pic1.zhimg.com/80/v2-37027f299fa4cff9f29e0cb223d127ec_1440w.webp" alt="bitwarden"></p><div class="note note-info">            <p>相信大家对 Bitwarden 这款密码管理工具并不陌生，它是一款 <strong><code>开源</code></strong> 的密码管理工具，可以帮助我们管理各种账号密码，支持多种平台，包括 Windows、macOS、Linux、Android、iOS 等，十分方便。</p><p>Bitwarden 官方的部分服务功能是收费的（如 2FA），但它开源了服务端的代码，所以我们可以自己搭建一个 Bitwarden 服务。我们今天要介绍的 <strong><code>Vaultwarden</code></strong> 就是 Bitwarden 服务器的一个轻量级开源实现。Vaultwarden 是用 Rust 编写的 Bitwarden 服务器 API 的替代实现，兼容上游 Bitwarden 客户端，非常适合在运行官方资源繁重的服务并不理想的情况下进行自托管部署<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://github.com/dani-garcia/vaultwarden">[1]</span></a></sup>。</p>          </div><p>本文将介绍如何在 Linux 服务器上通过 docker-compose 部署 Vaultwarden 服务。当然你也可以使用 <code>1Panel</code> 一键安装部署。</p><h2 id="1-创建目录"><a href="#1-创建目录" class="headerlink" title="1. 创建目录"></a>1. 创建目录</h2><p>输入以下命令创建目录，存放 Vaultwarden 的数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> /opt/vaultwarden &amp;&amp; <span class="hljs-built_in">cd</span> /opt/vaultwarden<br></code></pre></td></tr></table></figure><h2 id="2-创建-docker-compose-配置文件"><a href="#2-创建-docker-compose-配置文件" class="headerlink" title="2. 创建 docker-compose 配置文件"></a>2. 创建 docker-compose 配置文件</h2><p>输入以下命令创建 docker-compose 配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /opt/vaultwarden/docker-compose.yml<br></code></pre></td></tr></table></figure><br><p>复制以下内容到文件中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">vaultwarden:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">vaultwarden/server:latest-alpine</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">vaultwarden</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;6666:80&#x27;</span> <span class="hljs-comment">#主机:容器</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./vw-data:/data</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">DOMAIN:</span> <span class="hljs-string">&quot;https://example.com&quot;</span><br></code></pre></td></tr></table></figure><p>保存并退出编辑器。</p><h2 id="3-启动服务"><a href="#3-启动服务" class="headerlink" title="3. 启动服务"></a>3. 启动服务</h2><p>输入以下命令启动 Vaultwarden 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker-compose up -d<br></code></pre></td></tr></table></figure><p>现在 Vaultwarden 服务已经启动了，默认地址为 <code>http://localhost:6666</code></p><p><strong>在使用之前，你最好使用反向代理隐藏端口并配置 HTTPS，确保 Vaultwarden 服务的安全。</strong>配置完毕之后你就可以访问 Vaultwarden 网页端了。</p><p><img src="https://pic3.zhimg.com/80/v2-64812e3da6683431d0ecf696e102afc2_1440w.webp" alt="登陆"></p><p>创建一个账号，就可以使用 Bitwarden 的官方客户端了。电脑上推荐使用<strong>浏览器插件</strong>，手机上推荐使用 <strong>APP 客户端</strong>。<br>注意在登陆的时候要选择 <code>自托管</code>，输入你的 <code>服务器 URL</code> 即可。</p><p><img src="https://pic4.zhimg.com/80/v2-196b3cc79509562d5cec5426076a14b3_1440w.webp" alt="登陆选择"></p><h2 id="4-docker-compose-配置详解"><a href="#4-docker-compose-配置详解" class="headerlink" title="4. docker-compose 配置详解"></a>4. docker-compose 配置详解</h2><h3 id="4-1-image"><a href="#4-1-image" class="headerlink" title="4.1 image"></a>4.1 image</h3><p><code>vaultwarden/server:latest</code> 是 Vaultwarden 服务器的 Docker 镜像，latest 是最新版本。</p><p>而本文使用的是 <code>vaultwarden/server:latest-alpine</code>，是基于 Alpine Linux 的最新版本。镜像功能与 latest 相同，但基于 Alpine 而非 Debian，镜像更小，基础应用程序更新。</p><p>当然你也可以给镜像指定一个特定的版本，如 <code>vaultwarden/server:1.22.0</code> 或 <code>vaultwarden/server:1.22.0-alpine</code>。</p><h3 id="4-2-ports"><a href="#4-2-ports" class="headerlink" title="4.2 ports"></a>4.2 ports</h3><p><code>6666:80</code> 表示将容器的 80 端口映射到主机的 6666 端口。可以根据自己的需求修改。</p><h3 id="4-3-volumes"><a href="#4-3-volumes" class="headerlink" title="4.3 volumes"></a>4.3 volumes</h3><p><code>./vw-data:/data</code> 表示将主机的 <code>./vw-data</code> 目录挂载到容器的 <code>/data</code> 目录。但是不建议更改，与官方文档保持一致。</p><h3 id="4-4-environment"><a href="#4-4-environment" class="headerlink" title="4.4 environment"></a>4.4 environment</h3><p>Vaultwarden 推荐使用环境变量来配置服务</p><ul><li><code>DOMAIN</code>：你的域名。</li></ul><p>下面是一些其他的环境变量<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://github.com/dani-garcia/vaultwarden/wiki">[2]</span></a></sup>，你可以根据自己的需求添加：</p><ul><li><code>SIGNUPS_ALLOWED</code>：是否允许注册新用户，默认为 <code>true</code>。你可以在自己注册完毕后，将其设置为 <code>false</code> 来关闭注册功能。但即使禁用了，管理员还是可以继续邀请新用户。</li><li><code>ADMIN_TOKEN</code>：开启管理员功能，需要设置一个 token，推荐使用命令 <code>openssl rand -base64 48</code> 生成一个随机 token。设置以后，访问 <code>https://example.com/admin</code>，输入 token 即可进入管理员界面。管理员可以查看并删除所有已注册的用户。它也允许邀请新用户，即使禁用了注册功能。</li><li><code>INVITATIONS_ALLOWED</code>：是否允许管理员邀请新用户，默认为 <code>true</code>。关闭后，管理员将无法邀请新用户。</li><li><code>WEB_VAULT_ENABLED</code>：是否启用 Web 界面，默认为 <code>true</code>。关闭后，用户将无法使用 Web 界面，但仍然可以使用客户端。注册之后也可以禁用 Web 界面。</li></ul><p>建议前端注册用户成功后，进行如下配置，禁止注册和 Web 界面：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">environment:</span><br>  <span class="hljs-attr">SIGNUPS_ALLOWED:</span> <span class="hljs-string">&quot;false&quot;</span><br>  <span class="hljs-attr">WEB_VAULT_ENABLED:</span> <span class="hljs-string">&quot;false&quot;</span><br></code></pre></td></tr></table></figure><h2 id="5-维护-Vaultwarden"><a href="#5-维护-Vaultwarden" class="headerlink" title="5. 维护 Vaultwarden"></a>5. 维护 Vaultwarden</h2><h3 id="5-1-更新"><a href="#5-1-更新" class="headerlink" title="5.1 更新"></a>5.1 更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker-compose pull<br>sudo docker-compose up -d<br></code></pre></td></tr></table></figure><h3 id="5-2-停止并移除容器"><a href="#5-2-停止并移除容器" class="headerlink" title="5.2 停止并移除容器"></a>5.2 停止并移除容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker-compose down<br></code></pre></td></tr></table></figure><h3 id="5-3-数据备份"><a href="#5-3-数据备份" class="headerlink" title="5.3 数据备份"></a>5.3 数据备份</h3><p>Vaultwarden 的数据存储在 <code>./vw-data</code> 目录中，你可以直接备份这个目录。</p><p><br><br></p><p>参考资料：</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/dani-garcia/vaultwarden">https://github.com/dani-garcia/vaultwarden</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/dani-garcia/vaultwarden/wiki">https://github.com/dani-garcia/vaultwarden/wiki</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content><tags><tag>部署</tag><tag>安全</tag><tag>Bitwarden</tag><tag>Vaultwarden</tag></tags></entry><entry><title>Windows 安装 Java — Microsoft OpenJDK</title><link href="/posts/7e833387/"/><url>/posts/7e833387/</url><content type="html"><![CDATA[<blockquote><p>本文介绍如何在 Windows 系统上安装 Microsoft OpenJDK。也就是微软提供的 OpenJDK 版本。</p><p>(1) 为什么不使用 Oracle JDK 呢？因为 Oracle JDK 是商用协议，收费商用政策朝令夕改。而 OpenJDK 是开源免费的，是 Linux 发行版仓库中的默认 JDK。</p><p>(2) 有很多开源组织都提供 OpenJDK。为什么使用 Microsoft OpenJDK 呢？因为我们在 Windows 系统上安装 JDK，<del>微软提供的 OpenJDK 与 Windows 系统更加兼容。</del>没有人比巨硬更懂 Windows（bushi。</p></blockquote><h2 id="1-下载-Microsoft-OpenJDK"><a href="#1-下载-Microsoft-OpenJDK" class="headerlink" title="1. 下载 Microsoft OpenJDK"></a>1. 下载 Microsoft OpenJDK</h2><p>浏览器访问 <a href="https://learn.microsoft.com/zh-cn/java/openjdk/download">Microsoft OpenJDK</a> 下载页面。</p><p><img src="https://pic2.zhimg.com/80/v2-448eebb5cf154774a0e13ec84f0d728d_1440w.webp" alt="下载 JDK"></p><p>选择 <code>Windows x64</code> 版本的 <code>msi</code> 安装包下载。</p><h2 id="2-安装-Microsoft-OpenJDK"><a href="#2-安装-Microsoft-OpenJDK" class="headerlink" title="2. 安装 Microsoft OpenJDK"></a>2. 安装 Microsoft OpenJDK</h2><p>打开下载的 <code>msi</code> 安装包，点击 <code>下一步</code>。</p><p><img src="https://pic4.zhimg.com/80/v2-023c05365fc09a59c2d380bcfc7f3843_1440w.webp" alt="打开安装包"></p><p>选择配置 <code>JAVA_HOME</code> 环境变量，相较于 Oracle JDK 的安装包多了这个选项，不用再去手动配置 <code>JAVA_HOME</code> 了。</p><p><img src="https://pic3.zhimg.com/80/v2-6e72e861b8c74fe567f9253db08eb526_1440w.webp" alt="JAVA_HOME"></p><p>功能调整完毕以后可以选择安装路径。</p><p><img src="https://pic1.zhimg.com/80/v2-0fcf57f849c74b0df0996924e500d794_1440w.webp" alt="配置路径"></p><h2 id="3-验证安装"><a href="#3-验证安装" class="headerlink" title="3. 验证安装"></a>3. 验证安装</h2><p>打开命令行工具，输入 <code>java -version</code> 查看版本信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -version<br></code></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-30b70bcac8f5c9166a7ce8bebe1fd696_1440w.webp" alt="验证安装"></p><p>总体来说，Microsoft OpenJDK 安装过程比 Oracle JDK 简单很多，并且不用再去手动配置系统环境变量和 <code>JAVA_HOME</code> 了，方便用户上手使用。</p>]]></content><tags><tag>Java</tag><tag>JDK</tag></tags></entry><entry><title>久违的放松与电影观后感 — 记录美好生活（一）</title><link href="/posts/b92ae1fe/"/><url>/posts/b92ae1fe/</url><content type="html"><![CDATA[<p>多图预警！！！</p><p>3 月是个忙碌且紧张焦虑的月份，备考、写论文、参加招聘会、投简历，很多事情堆压让我感到异常疲惫、精神紧绷，整个人也不太好。<br>但是，3 月份终于结束了，4 月已至，我也在昨天好好放松了一下，开始新的篇章。</p><h3 id="一曲高歌一樽酒，一人独钓一江秋。"><a href="#一曲高歌一樽酒，一人独钓一江秋。" class="headerlink" title="一曲高歌一樽酒，一人独钓一江秋。"></a>一曲高歌一樽酒，一人独钓一江秋。</h3><p>考完试的那天下午，我走出考场，感到阳光很明媚，我的心情也很好，考点学校的装修风格别有一番老式职工楼的风味。走出学校，漫步在街道上，看着周围的景色，感觉一切都是那么美好，天气有些闷热，风也不急不躁。吃完午饭回到住处，打开空调，终于可以随心所欲地休息了，刷着 B 站，敲着代码，感觉很好。</p><p>也许，远在四年前高考结束时的我，可能也有类似的感悟和微妙的心绪，对当时的我来说，高中的一切都还是那么熟悉，没有来得及好好感悟和说再见就已然结束了。</p><p><img src="https://pic4.zhimg.com/80/v2-29b4762ef455ea245348ec968bbcea87_1440w.webp" alt="考完试的天空"></p><p><img src="https://pic3.zhimg.com/80/v2-aa1df539f7ad5ee595428d1678176e2a_1440w.webp" alt="隆江猪脚饭"></p><p><img src="https://pic4.zhimg.com/80/v2-8e7619cf857065958c66010006e7f56f_1440w.webp" alt="炫火锅"></p><hr><h3 id="去留无意，望天上云卷云舒。"><a href="#去留无意，望天上云卷云舒。" class="headerlink" title="去留无意，望天上云卷云舒。"></a>去留无意，望天上云卷云舒。</h3><p>坐飞机所见的白雪皑皑的云层，大自然的瑰丽，是人的言语无法形容的。云层很美，我心情也很好。</p><p>有时候不禁在想，李白要是坐了飞机，看到这样的云层，会不会写出更加气势磅礴的诗句呢？</p><p>这是玉皇大帝的宫殿吗？这是神仙的仙界吗？如果他们真的存在，那他们现在在哪？</p><p><img src="https://pic4.zhimg.com/80/v2-4cc817639180e4d7a020f246f5c3d71f_1440w.webp" alt="云层"><br><img src="https://pic1.zhimg.com/80/v2-3cc63d236179fc4007b96e4ebebce540_1440w.jpg" alt="云层"><br><img src="https://pic1.zhimg.com/80/v2-25feed5440c14c4837966f64c11d8bc8_1440w.webp" alt="云层"><br><img src="https://pic3.zhimg.com/80/v2-3503722b032fcfa22902830a9132da76_1440w.webp" alt="云层"><br><img src="https://pic3.zhimg.com/80/v2-8d21c167c3635cf41c9f2f7a4913779e_1440w.webp" alt="云层"></p><p>下面是我拍摄的一段飞机云中穿行的视频，感觉略有意境。</p><p><video width="100%" height="100%"  src="https://alist.ovvv.top/d/videos/output.webm" controls></video></p><p><video width="100%" height="100%"  src="https://alist.ovvv.top/d/videos/output2.webm" controls></video></p><hr><h3 id="山随平野尽，江入大荒流。"><a href="#山随平野尽，江入大荒流。" class="headerlink" title="山随平野尽，江入大荒流。"></a>山随平野尽，江入大荒流。</h3><p>江边的风景也很美，分不清是嘉陵江还是长江。</p><p>一边是现代化建筑，一边是郁郁葱葱，现代与自然风景的结合。江上散落着许多货船，一片繁忙景象。</p><p><img src="https://pic1.zhimg.com/80/v2-cfa3d85082dcccc74fb94e8826bcdb1c_1440w.webp" alt="江景"><br><img src="https://pic4.zhimg.com/80/v2-e65afb7f7ff4b3ffd02011c70415deaf_1440w.webp" alt="江景"></p><p>欲穷千里目，更上一层楼。果然是有道理的。</p><hr><h3 id="金樽清酒斗十千，玉盘珍羞直万钱。"><a href="#金樽清酒斗十千，玉盘珍羞直万钱。" class="headerlink" title="金樽清酒斗十千，玉盘珍羞直万钱。"></a>金樽清酒斗十千，玉盘珍羞直万钱。</h3><p>和同学炫烧烤，吃得很爽。很久没有这样胃口好放开吃过了。战斗，爽！</p><p>这家自助烧烤 食材好，分量足，种类多，肉非常鲜美，吃起来嘎嘎香，我们去的时候没什么人，服务员还一直在旁边帮忙烤烧烤，真是非常顶级的体验。</p><p><img src="https://pic4.zhimg.com/80/v2-21bdec7110edeaeb9fab8f5d1b82981b_1440w.webp" alt="烧烤"><br><img src="https://pic2.zhimg.com/80/v2-42c853445d5250d6bce410b68abf00a5_1440w.webp" alt="烧烤"><br><img src="https://pic4.zhimg.com/80/v2-390ebdbb19a1cf56a3eba5d8ae04020b_1440w.webp" alt="烧烤"><br><img src="https://pic4.zhimg.com/80/v2-208f004b2b846632f9be2e0995da93d3_1440w.webp" alt="烧烤"></p><p>值得一提的是居然还有海鲜，味道不错。</p><p><img src="https://pic2.zhimg.com/80/v2-20377146b08b082404975baa6aa6a2d5_1440w.webp" alt="烧烤"><br><img src="https://pic3.zhimg.com/80/v2-f848bd04486b05376a40d9bf5547cde6_1440w.webp" alt="烧烤"></p><hr><h3 id="君子以遏恶扬善，顺天休命。"><a href="#君子以遏恶扬善，顺天休命。" class="headerlink" title="君子以遏恶扬善，顺天休命。"></a>君子以遏恶扬善，顺天休命。</h3><p>周处除三害，很有意思，难得在内地看到这种类型的片子，电影引用古文典故，结合黑帮复仇、犯罪动作、暴力美学。</p><p><img src="https://pic4.zhimg.com/80/v2-e50e8780de15fa096f3512c5554b767f_1440w.jpg" alt="周处除三害"></p><p><strong><code>周处除三害</code></strong> 是典故，出自《晋书·周处传》和《世说新语》。</p><blockquote><p>周处年轻时凶暴任性，被同乡的人认为是一大祸害。加上，河中有蛟龙，山上有猛虎，一起侵害百姓。义兴的百姓称他们是三害，而三害中周处最为厉害。有人劝说周处去杀死猛虎和蛟龙，实际上是希望三个祸害拼杀后只剩下一个。</p><p>周处上山除猛虎斩蛟龙，三天三夜未归。乡亲们都认为他已经死了，遂互相庆祝。周处终于杀死了蛟龙归来，听说乡里人以为自己已死而互相庆贺，才知道自己实际上被当作一大祸害，因此有了悔改的心意，从此改过自新，最终成为历史上有名的忠臣孝子。</p></blockquote><p>影片里的陈桂林的定位也和周处类似。</p><div class="note note-primary">            <p>故事围绕黑道人物陈桂林展开。他在黑道大哥洪爷的葬礼上，在众目睽睽的情况下枪杀铁头哥，和警察搏斗后逃脱。</p><p>四年后，他得知自己身患重病，决定自首，却发现自己在警方的通缉榜上仅排第三，因此决意要成为除三害的周处，以自己的方式留名。</p><p>他通过绑架假象逼问出另一名黑道人物香港仔的线索，并在一场紧张的对决中成功击败并杀死香港仔。随后，他前往寻找另一名黑帮成员牛头林禄和，但在澎湖的新心灵舍宗教团体中，他发现自己身患的肺癌竟然好转，于是决定加入宗教以了结罪孽。</p><p>然而，他逐渐发现这个宗教团体其实是个骗局，尊者就是他要找的牛头林禄和。在一场激烈的冲突中，他揭露了尊者的真实身份并枪杀了他。尽管他成功揭露了宗教骗局，但教派并未因此解散，他只好大开杀戒，屠戮了留在现场继续唱歌的教徒和尊者的情妇。</p><p>在返回台湾的船上，他劫持了一名女子，用她的手机打电话给一直追捕他的刑警陈灰，并笑着向他自首。在监狱里，他得知真正患肺癌的是一直劝他自首的张医生，而她这么做是为了弥补过去的罪孽。最终，陈桂林在受枪决前平静地伏法，结束了自己的黑道生涯。</p>          </div><p>影片其实自始至终都包含着 <code>周处除三害</code> 的暗喻：<br>男主黑道犯罪 扰乱治安 是为周处<br>男主除代表“<strong>嗔</strong>”的香港仔 是为周处除猛虎<br>男主除代表“<strong>贪</strong>”的尊者 是为周处除蛟龙</p><p>但这如果就结束了，它就不是一部好电影。<br>医生告诉他其实没有患癌，一切的一切都是医生为了让他去自首，让他去面对自己的罪孽，没想到最后他了解了猛虎和蛟龙；小美来找男主，替男主刮胡子，男主终于留下了悔恨的泪水。<br>最后，男主被枪决，他的生命结束了，他的罪孽也结束了，是为除心魔（“<strong>痴</strong>”）。<br>构成了完整意义上的 <code>周处除三害</code>。</p><p><code>周处除三害</code> 这个故事的核心，不是 <code>除</code>，而是 <code>悔悟</code>，只有悔悟了，历史上那个曾经的祸害才能成为忠臣孝子，陈桂林也要认识到自己的罪孽，“痴”才算是真正的被除掉。</p><p>如果没有最后的流泪悔悟，那这个故事就不是周处除三害，而是 <code>贪嗔痴</code> 三毒互噬，真正改变周处的，是他的内心的潘然悔悟。</p><p>影片里其实还有很多细节值得回味，比如给了新心灵舍很多镜头，它的蛊惑 它的卑劣害人手段 它的洗脑 和医生勾结，影片不置一句邪教好坏，但是观众却可以感觉到它处处都是危害。最后男主发现了尊者的真面目，取枪除害 也是个名场面。</p><p>这里贴一个 B 站很好的解说视频，虽然有些小细节没有提到，但是寓意和故事的解读都很到位。</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?bvid=BV1mx4y1D75N&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0; border-radius: 5px"> </iframe></div><br><p><img src="https://pic4.zhimg.com/80/v2-eb393b512ffc4a76e1bf68110a6f576b_1440w.webp" alt="周处除三害"><br><img src="https://pic1.zhimg.com/80/v2-c0ca7c815acfa56b4bd82e1a73442838_1440w.webp" alt="周处除三害"><br><img src="https://pic3.zhimg.com/80/v2-d23d8f56bb8673ffd536400c771b2e42_1440w.webp" alt="周处除三害"><br><img src="https://pic2.zhimg.com/80/v2-649df7aa00cc09bdc85bf50e581941a9_1440w.webp" alt="周处除三害"><br><img src="https://pic3.zhimg.com/80/v2-271fae28bdf1779fd7317f8bd8c86b5a_1440w.webp" alt="周处除三害"></p><p>希望以后影片引进的尺度可以更大一些，类型更加多样化，不要再只有主旋律和爱情片了。</p><p>总之，今天是个好日子，一扫颓势，换个好心情，重新整装再出发。希望我考编上岸，希望我论文顺利，希望我找到好工作，一切顺利！！！</p>]]></content><tags><tag>生活</tag></tags></entry><entry><title>漠北残月的笔记</title><link href="/posts/fcd36967/"/><url>/posts/fcd36967/</url><content type="html"><![CDATA[<p>这篇文章主要通过 Discussion 记录一些琐碎的笔记，如：博客搭建过程、技术问题解决过程、生活琐事等。因为这些内容可能并不适合放在博客正文中，所以单独开辟一个 Discussion 专栏。</p>]]></content><tags><tag>笔记</tag></tags></entry><entry><title>在 Archlinux 上安装使用 MariaDB</title><link href="/posts/53c8336d/"/><url>/posts/53c8336d/</url><content type="html"><![CDATA[<div class="note note-secondary">            <p><code>MariaDB</code> 是一个可靠、高性能的数据库，旨在为用户提供长期免费的、向下兼容的、能直接替代 <code>MySQL</code> 的数据库服务。</p><p>许多 Linux 发行版和 BSD 操作系统都包含 <code>MariaDB</code>，并将其作为 <code>MySQL</code> 的默认实现。例如 Archlinux、Debian（从 Debian 9 开始）、Fedora（从 Fedora 19 开始）、Red Hat Enterprise Linux（从 RHEL 7 开始）、CentOS（从 CentOS 7 开始）、OpenBSD（从 5.7 开始）和 FreeBSD 等<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://en.wikipedia.org/wiki/MariaDB#Prominent_users">[1]</span></a></sup>。</p><p>可见开源社区对 <code>MySQL</code> 未来发展和开放性的担忧，并且 <code>MariaDB</code> 几乎完全兼容 <code>MySQL</code>，使用上没有太大区别，可以放心使用。</p>          </div><h2 id="0-btrfs-文件系统禁用-COW"><a href="#0-btrfs-文件系统禁用-COW" class="headerlink" title="0. btrfs 文件系统禁用 COW"></a>0. <code>btrfs</code> 文件系统禁用 <code>COW</code></h2><p>此小节为 <code>btrfs</code> 文件系统禁用 <code>COW</code>，如果你的系统分区为 <code>ext4</code>，可以跳过这一小节。</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-f5652f68" role="button" aria-expanded="false" aria-controls="collapse-f5652f68">        <div class="fold-arrow">▶</div>在 btrfs 上禁用 COW      </div>      <div class="fold-collapse collapse" id="collapse-f5652f68">        <div class="fold-content">          <p>Btrfs（B-tree 文件系统），一种支持写入时复制（COW）的文件系统。<br><code>COW</code> 简单说就是 写入 <code>不会就地覆盖数据</code>；相反，数据块在被复制和修改后会 <code>写入到新的位置</code>，元数据也会更新以指向新的位置。</p><p>如果你的 <code>MariaDB</code> 数据库运行在 <code>btrfs</code> 系统分区之上，你应当在创建数据库之前禁用 <code>Copy-on-Write</code> 特性<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://wiki.archlinux.org/title/MariaDB">[2]</span></a></sup>，否则可能会导致数据库性能问题。<br>不应创建数据库之后再禁用，因为这一更改只会影响新创建的文件，而不会影响现有文件。</p><hr><p>我们创建一个空目录 <code>/var/lib/mysql</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> /var/lib/mysql<br></code></pre></td></tr></table></figure><p>这个目录就是 <code>MariaDB</code> 数据库的数据目录。</p><p>展示目录属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo lsattr -d /var/lib/mysql<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">---------------------- /var/lib/mysql<br></code></pre></td></tr></table></figure><p>表示 <strong>目录没有设置任何属性</strong></p><hr><p>现在设置禁用目录 <code>Copy-on-Write</code> 特性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo chattr +C /var/lib/mysql/<br></code></pre></td></tr></table></figure><br><p>展示目录属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo lsattr -d /var/lib/mysql<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">---------------C------ /var/lib/mysql<br></code></pre></td></tr></table></figure><p><code>C</code> 表示 <code>关闭 Copy-on-Write</code> 特性<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://man.archlinux.org/man/chattr.1">[3]</span></a></sup>。<br>至此，我们已经在 <code>/var/lib/mysql</code> 目录下禁用了 <code>Copy-on-Write</code> 特性。</p>        </div>      </div>    </div><h2 id="1-安装-MariaDB"><a href="#1-安装-MariaDB" class="headerlink" title="1. 安装 MariaDB"></a>1. 安装 MariaDB</h2><p>输入以下命令来安装 <code>MariaDB</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S mariadb<br></code></pre></td></tr></table></figure><h2 id="2-初始化数据库"><a href="#2-初始化数据库" class="headerlink" title="2. 初始化数据库"></a>2. 初始化数据库</h2><p>根据安装提示，我们在使用前还需初始化数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql<br></code></pre></td></tr></table></figure><p><code>--user=mysql</code> 表示使用 <code>mysql</code> 用户来初始化数据库，<code>--basedir=/usr</code> 表示 <code>MariaDB</code> 的安装目录，<code>--datadir=/var/lib/mysql</code> 表示数据库的数据目录。</p><p>我们可以在输出中看到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">Two all-privilege accounts were created.<br>One is root@localhost, it has no password, but you need to<br>be system <span class="hljs-string">&#x27;root&#x27;</span> user to connect. Use, <span class="hljs-keyword">for</span> example, sudo mysql<br>The second is mysql@localhost, it has no password either, but<br>you need to be the system <span class="hljs-string">&#x27;mysql&#x27;</span> user to connect.<br>After connecting you can <span class="hljs-built_in">set</span> the password, <span class="hljs-keyword">if</span> you would need to be<br>able to connect as any of these <span class="hljs-built_in">users</span> with a password and without sudo<br></code></pre></td></tr></table></figure><p>翻译：</p><blockquote><p>创建了两个全权限账户。<br>  一个是 <code>root@localhost</code>，它没有密码，但需要系统 “root” 用户才能连接。例如，使用 sudo mysql。<br>  第二个是 <code>mysql@localhost</code>，它也没有密码，但你必须是系统 “mysql” 用户才能连接。<br>连接后，如果您需要能够 以任何这些用户身份使用密码 且无需 sudo 进行连接，则可以设置密码。</p></blockquote><h2 id="3-启动-MariaDB-服务"><a href="#3-启动-MariaDB-服务" class="headerlink" title="3. 启动 MariaDB 服务"></a>3. 启动 MariaDB 服务</h2><p>输入以下命令来启动 <code>MariaDB</code> 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl start mariadb<br></code></pre></td></tr></table></figure><p>确认服务是否启动成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl status mariadb<br></code></pre></td></tr></table></figure><p>如果输出中显示 <code>Active: active (running)</code> 就表示服务启动成功了。</p><h2 id="4-配置-MariaDB"><a href="#4-配置-MariaDB" class="headerlink" title="4. 配置 MariaDB"></a>4. 配置 MariaDB</h2><p>根据 Archwiki 的建议：</p><blockquote><p>The <code>mariadb-secure-installation</code> command will interactively guide you through a number of recommended security measures, such as removing anonymous accounts and removing the test database:</p></blockquote><p>所以我们可以运行 <code>mariadb-secure-installation</code> 来进行安全配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mariadb-secure-installation<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">In order to <span class="hljs-built_in">log</span> into MariaDB to secure it, we<span class="hljs-string">&#x27;ll need the current</span><br><span class="hljs-string">password for the root user. If you&#x27;</span>ve just installed MariaDB, and<br>haven<span class="hljs-string">&#x27;t set the root password yet, you should just press enter here.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Enter current password for root (enter for none):</span><br></code></pre></td></tr></table></figure><p>这里我们直接回车，因为我们还没有设置密码。<br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">Setting the root password or using the unix_socket ensures that nobody<br>can <span class="hljs-built_in">log</span> into the MariaDB root user without the proper authorisation.<br><br>You already have your root account protected, so you can safely answer <span class="hljs-string">&#x27;n&#x27;</span>.<br><br>Switch to unix_socket authentication [Y/n]<br></code></pre></td></tr></table></figure><p>这里我们选择 <code>n</code>，因为它说 <code>You already have your root account protected, so you can safely answer &#39;n&#39;</code>，我们已经保护了 root 账户，所以可以安全地选择 <code>n</code>。<br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">You already have your root account protected, so you can safely answer <span class="hljs-string">&#x27;n&#x27;</span>.<br><br>Change the root password? [Y/n]<br></code></pre></td></tr></table></figure><p><code>Change the root password? [Y/n]</code> 这一步询问你是否要更改 MariaDB 的 root 用户的密码。如果你想更改密码，就输入 “Y”，然后按回车键，系统会提示你输入新的密码。如果你不想更改密码，就输入 “n”，然后按回车键，系统会跳过更改密码的步骤。</p><p><strong>我建议你设置密码</strong>，因为后面会使用到 <code>mariadb -u root -p</code> 来登录数据库，如果不设置会报错，只能用 <code>sudo mariadb</code> 来登录。<br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">By default, a MariaDB installation has an anonymous user, allowing anyone<br>to <span class="hljs-built_in">log</span> into MariaDB without having to have a user account created <span class="hljs-keyword">for</span><br>them.  This is intended only <span class="hljs-keyword">for</span> testing, and to make the installation<br>go a bit smoother.  You should remove them before moving into a<br>production environment.<br><br>Remove anonymous <span class="hljs-built_in">users</span>? [Y/n]<br></code></pre></td></tr></table></figure><p>这里我们选择 <code>Y</code>，因为这是一个安全措施，我们应该删除匿名用户。<br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">Normally, root should only be allowed to connect from <span class="hljs-string">&#x27;localhost&#x27;</span>.  This<br>ensures that someone cannot guess at the root password from the network.<br><br>Disallow root login remotely? [Y/n]<br></code></pre></td></tr></table></figure><p>选择 <code>Y</code>，因为我们不希望 root 用户远程登录。可以配置反向代理或者 SSH 隧道来访问数据库。<br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">By default, MariaDB comes with a database named <span class="hljs-string">&#x27;test&#x27;</span> that anyone can<br>access.  This is also intended only <span class="hljs-keyword">for</span> testing, and should be removed<br>before moving into a production environment.<br><br>Remove <span class="hljs-built_in">test</span> database and access to it? [Y/n]<br></code></pre></td></tr></table></figure><p>这里我选择 <code>Y</code>，不需要 <code>test</code> 数据库。<br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"> - Dropping <span class="hljs-built_in">test</span> database...<br> ... Success!<br> - Removing privileges on <span class="hljs-built_in">test</span> database...<br> ... Success!<br><br>Reloading the privilege tables will ensure that all changes made so far<br>will take effect immediately.<br><br>Reload privilege tables now? [Y/n]<br></code></pre></td></tr></table></figure><p>这里我们选择 <code>Y</code>，重新加载权限表。<br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">All <span class="hljs-keyword">done</span>!  If you<span class="hljs-string">&#x27;ve completed all of the above steps, your MariaDB</span><br><span class="hljs-string">installation should now be secure.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Thanks for using MariaDB!</span><br></code></pre></td></tr></table></figure><p>至此，我们已经完成了 MariaDB 的安全配置。</p><h2 id="5-使用-MariaDB"><a href="#5-使用-MariaDB" class="headerlink" title="5. 使用 MariaDB"></a>5. 使用 MariaDB</h2><h3 id="5-1-常用命令"><a href="#5-1-常用命令" class="headerlink" title="5.1 常用命令"></a>5.1 常用命令</h3><p>启动 MariaDB 服务并设置服务开机自启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> --now mariadb<br></code></pre></td></tr></table></figure><p>查看 MariaDB 服务状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl status mariadb<br></code></pre></td></tr></table></figure><p>更新 MariaDB：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -Syu mariadb<br></code></pre></td></tr></table></figure><br><p>启动 MariaDB 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl start mariadb<br></code></pre></td></tr></table></figure><p>停止 MariaDB 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl stop mariadb<br></code></pre></td></tr></table></figure><p>重启 MariaDB 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart mariadb<br></code></pre></td></tr></table></figure><br><p>开机启动 MariaDB 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> mariadb<br></code></pre></td></tr></table></figure><p>禁用 MariaDB 服务开机自启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">disable</span> mariadb<br></code></pre></td></tr></table></figure><h3 id="5-2-登录-MariaDB"><a href="#5-2-登录-MariaDB" class="headerlink" title="5.2 登录 MariaDB"></a>5.2 登录 MariaDB</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mariadb<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mariadb -u root -p<br></code></pre></td></tr></table></figure><p>如果这里报错：<code>ERROR 1698 (28000): Access denied for user &#39;root&#39;@&#39;localhost&#39;</code>，那么你需要使用 <code>sudo mariadb</code> 来登录，或者重新运行 <code>sudo mariadb-secure-installation</code> 来设置密码。</p><h3 id="5-3-查看数据库"><a href="#5-3-查看数据库" class="headerlink" title="5.3 查看数据库"></a>5.3 查看数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> DATABASES;<br></code></pre></td></tr></table></figure><p>命令行会输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">MariaDB [(none)]&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+--------------------+<br>4 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.001 sec)<br></code></pre></td></tr></table></figure><p>现在，你可以开始使用 <code>MariaDB</code> 了。<code>MariaDB</code> 默认只提供命令行工具，你也可以使用 <code>beekeeper-studio</code> 或者 <code>navicat</code> 等图形化工具来管理数据库，增删改查非常方便。</p><h3 id="5-4-数据库升级"><a href="#5-4-数据库升级" class="headerlink" title="5.4 数据库升级"></a>5.4 数据库升级</h3><p>Arch 是一个更新比较激进的发行版，我们有时候更新后会看见 <code>MariaDB</code> 的提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">:: MariaDB was updated to a new feature release. To update the data run:<br>     <span class="hljs-comment"># systemctl restart mariadb.service &amp;&amp; mariadb-upgrade -u root -p</span><br></code></pre></td></tr></table></figure><p>这时候我们就需要运行如下命令来升级数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart mariadb &amp;&amp; sudo mariadb-upgrade -u root -p<br></code></pre></td></tr></table></figure><p>比如我在写这篇文章的时候，<code>MariaDB</code> 从 <code>11.3.2-MariaDB</code> 升级到了 <code>11.4.2-MariaDB</code>，就运行了这个命令来升级数据库。<code>Major version upgrade detected from 11.3.2-MariaDB to 11.4.2-MariaDB. Check required!</code></p><p>参考文章：</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://en.wikipedia.org/wiki/MariaDB#Prominent_users">https://en.wikipedia.org/wiki/MariaDB#Prominent_users</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://wiki.archlinux.org/title/MariaDB">https://wiki.archlinux.org/title/MariaDB</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://man.archlinux.org/man/chattr.1">https://man.archlinux.org/man/chattr.1</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content><tags><tag>MariaDB</tag><tag>数据库</tag><tag>btrfs</tag></tags></entry><entry><title>初来乍到 Archlinux</title><link href="/posts/22b3d1e2/"/><url>/posts/22b3d1e2/</url><content type="html"><![CDATA[<p><img src="https://pic1.zhimg.com/80/v2-ef995f2caaae0845f20544de906553cc_1440w.webp" alt="Archlinux"></p><div class="note note-info">            <p><code>Archlinux</code> 是一个以简洁、轻量、灵活、可自定义为设计理念的 <code>Linux</code> 发行版，致力于通过 <strong>滚动更新</strong> 来更新系统和软件包。默认安装只有最小的基本系统，由用户自行添加需要的软件，它的安装过程相对于其他发行版来说要复杂一些。</p><p>它有社区维护的 <a href="https://aur.archlinux.org/"><code>AUR</code>（Arch User Repository）</a>软件仓库，用户可以在这里找到大量的软件包，通过简单的命令即可编译安装。<br>除此以外，<code>Archlinux</code> 还有丰富的<a href="https://wiki.archlinux.org/">官方文档</a>和<a href="https://bbs.archlinux.org/">庞大的社区</a>，这些资源详细地描述了安装、配置和维护系统的过程，对新手或者有一定 Linux 基础的用户来说都是非常有帮助的。</p><p>当然，如果你没有足够的耐心和时间，或者你只是想要一个稳定的系统，并且你没有足够的 <code>Linux 基础</code>，那么 <code>Archlinux</code> 可能不适合你。</p>          </div><p>本文主要记录了我安装 <code>Archlinux</code> 的过程。</p><p>众所周知，<a href="https://manjaro.org/">Manjaro</a> 是一个基于 <a href="https://archlinux.org/">Archlinux</a> 的发行版。</p><p>我之前久闻 AUR 的大名，决定尝试一下 <code>Manjaro</code> 。经过我半年的使用，发现确实很不错，可堪大用，<code>Manjaro</code> 开箱即用，内置了很多好用的开源软件，很多系统设置也有对应缺省。开发写代码、日用看视频、写文章等都有不错的体验，除了玩游戏（其实我现在也很少玩游戏了）。</p><p><code>Manjaro</code> 对 <code>Archlinux</code> 进行了很多魔改。<br>尽管 Manjaro 使用 pacman 软件包管理器，但它有自己的软件库，如果看镜像源就会发现 Manjaro 的镜像源为 <a href="https://mirrors.ustc.edu.cn/manjaro/">https://mirrors.ustc.edu.cn/manjaro/</a> 而 Arch 的镜像源为 <a href="https://mirrors.ustc.edu.cn/archlinux/">https://mirrors.ustc.edu.cn/archlinux/</a> 二者并不完全等价<br>且 Manjaro 使用 <code>archlinuxcn</code> 的软件源经常出现问题，导致我无法安装一些软件，经过询问相关人员得出结论，Manjaro 可以使用大部分 AUR，但是不要使用 <code>archlinuxcn</code>。加之 <code>Manjaro</code> 的软件源更新太慢了，用户需要等待几周，才可以安装上游的新版本软件。</p><p>如此种种致使我想尝试一下原汁原味的 <code>Archlinux</code>。</p><p>下面简单记录一下我的安装过程，以及一些配置，以备日后查阅。<br>如果想查看更详细的安装过程，可以参考 <a href="https://wiki.archlinux.org/title/Installation_guide">Archlinux 官方文档</a>，和这篇教程 <a href="https://arch.icekylin.online/">Archlinux 安装教程</a>。建议两篇文章都看一遍，然后再开始安装。</p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><h3 id="1-1-确保网络连接"><a href="#1-1-确保网络连接" class="headerlink" title="1.1 确保网络连接"></a>1.1 确保网络连接</h3><p>确保你有 <code>网线</code> 或者 <code>非中文名的 wifi</code> 连接，在安装过程中需要连接网络来下载软件包。</p><h3 id="1-2-下载-Archlinux-镜像"><a href="#1-2-下载-Archlinux-镜像" class="headerlink" title="1.2 下载 Archlinux 镜像"></a>1.2 下载 Archlinux 镜像</h3><p><a href="https://archlinux.org/download/">官方下载地址</a></p><p>如果下载太慢考虑使用上面连接的镜像站下载。</p><p>如<br><code>阿里云</code> 的镜像站：<a href="https://mirrors.aliyun.com/archlinux/iso/latest/">https://mirrors.aliyun.com/archlinux/iso/latest/</a><br><code>中科大</code> 的镜像站：<a href="https://mirrors.ustc.edu.cn/archlinux/iso/latest/">https://mirrors.ustc.edu.cn/archlinux/iso/latest/</a><br><code>清华大学</code> 的镜像站：<a href="https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/latest/">https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/latest/</a></p><p>可选操作：<br>下载完成后，可以选择校验哈希值来确保镜像文件的完整性，在 <a href="https://archlinux.org/download/#checksums">Checksums and signatures</a> 有最新镜像的 <code>SHA256</code> 哈希值。</p><p>如果你在使用 Linux，可以使用 <code>sha256sum</code> 命令来校验哈希值，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sha256sum</span> archlinux-2024.03.01-x86_64.iso<br></code></pre></td></tr></table></figure><p>将后面的参数替换成你的镜像文件名。</p><p>如果你在使用 Windows，可以使用 <code>certutil</code> 命令来校验哈希值，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">certutil -hashfile archlinux-2024.03.01-x86_64.iso SHA256<br></code></pre></td></tr></table></figure><h3 id="1-3-给你的硬盘分区"><a href="#1-3-给你的硬盘分区" class="headerlink" title="1.3 给你的硬盘分区"></a>1.3 给你的硬盘分区</h3><p>给你的硬盘腾出至少 128G 的空间，我分了 300G，看个人需求 尽量分大些免得后期扩容。<br>如果你使用 Windows 可以直接 右键开始菜单，点 <code>磁盘管理</code> 进行分区（压缩卷），或者使用 <code>DiskGenius</code> 等工具进行分区。</p><p><strong>还请注意，数据无价！操作需谨慎！</strong><br><strong>在明白你的操作是什么意思之前，不要轻易操作！</strong></p><h3 id="1-4-制作启动盘"><a href="#1-4-制作启动盘" class="headerlink" title="1.4 制作启动盘"></a>1.4 制作启动盘</h3><p>我建议使用 <code>Ventoy</code> 制作启动盘。<code>Ventoy</code> 是一个开源的多功能启动盘制作工具，支持直接将 <code>ISO</code> 文件拷贝到 <code>U 盘</code> 上，然后通过 <code>UEFI</code> 或者 <code>BIOS</code> 启动。你可以在里面放置多个 <code>ISO</code> 文件，然后选择想要的镜像启动。</p><p><a href="https://www.ventoy.net/">Ventoy 官网</a></p><h3 id="1-5-重启进入-BIOS，启动-Ventoy"><a href="#1-5-重启进入-BIOS，启动-Ventoy" class="headerlink" title="1.5 重启进入 BIOS，启动 Ventoy"></a>1.5 重启进入 BIOS，启动 Ventoy</h3><p>重启电脑，关闭 <code>Secure Boot</code>，调整 <code>Boot Order</code>，将 <code>U 盘</code> 放在第一位，然后保存退出。</p><p>这个时候时候你的电脑应该会出现 <code>Ventoy</code> 的启动界面。如果没有，请检查你的 <code>BIOS</code> 设置是否正确，或者查询 <code>Ventoy</code> 的文档：<a href="https://www.ventoy.net/cn/doc_news.html">https://www.ventoy.net/cn/doc_news.html</a></p><p><img src="https://pic4.zhimg.com/80/v2-3fb1906b0609633716b0d08f0e572183_1440w.webp" alt="Ventoy"></p><p>Ventoy 启动后，选择你下载的 Archlinux 镜像文件，然后启动。</p><h2 id="2-安装-Archlinux"><a href="#2-安装-Archlinux" class="headerlink" title="2. 安装 Archlinux"></a>2. 安装 Archlinux</h2><p>安装过程其实没什么好说的了，我是参考教程的 <a href="https://arch.icekylin.online/guide/rookie/basic-install.html">archlinux 基础安装</a> 进行安装的。</p><p>注意，安装的时候千万不要跳过、忽略、修改任何步骤（除非你知道你在干什么），否则可能会导致安装失败。如果有不懂的地方要善用搜索引擎。</p><p>在操作 <code>7. 分区和格式化</code> 的时候切记，如果你是 <code>Windows + Linux 双系统</code>，安装的时候 <strong>不要格式化 EFI 分区！</strong> <strong>不要格式化 EFI 分区！</strong> <strong>不要格式化 EFI 分区！</strong></p><p>其他的应该没什么问题，按照教程一步步来，直到安装完成。<br>至此，你已经安装好了 Archlinux。</p><p>输入 <code>neofetch</code> 命令，你会看到类似的输出：</p><p><img src="https://pic2.zhimg.com/80/v2-d88f23c9033a83a9bb5c1b5459290f81_1440w.webp" alt="Arch Neofetch"></p><blockquote><p>图片来自：<a href="https://en.m.wikipedia.org/wiki/File:Arch_Linux_Base_Neofetch_output.png">wikipedia</a></p></blockquote><h2 id="3-安装桌面环境-KDE"><a href="#3-安装桌面环境-KDE" class="headerlink" title="3. 安装桌面环境 KDE"></a>3. 安装桌面环境 KDE</h2><p>参照上文教程的 <code>桌面环境与常用应用安装</code> 一节继续安装。</p><p>我做出的修改：</p><ul><li><del>不开启 <code>multilib</code> 仓库，因为我不想要 32 位的软件。</del>如果你要装 <code>steam</code>，记得开启 <code>multilib</code> 仓库，安装 32 位 OpenGL 图形驱动。</li><li>输入法安装：只安装 <code>fcitx5-im</code>, <code>fcitx5-chinese-addons</code>, 还有 <code>fcitx5-rime</code> 输入法引擎 和 <code>fcitx-configtool</code>。没有安装 <code>fcitx5-anthy</code>, <code>fcitx5-pinyin-moegirl</code>, <code>fcitx5-material-color</code> 等，因为我不需要。</li><li><code>timeshift</code> 配置的时候记得不要勾选 <code>@home</code>，因为 home 目录包含视频、音乐等大文件，且回滚时不需要回滚这些文件。</li></ul><h2 id="4-安装-AMD-显卡驱动"><a href="#4-安装-AMD-显卡驱动" class="headerlink" title="4. 安装 AMD 显卡驱动"></a>4. 安装 AMD 显卡驱动</h2><p>我使用的是 AMD 显卡，所以需要安装对应的驱动。我安装的是 AMD 官方的开源驱动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S mesa lib32-mesa xf86-video-amdgpu vulkan-radeon lib32-vulkan-radeon<br></code></pre></td></tr></table></figure><p>对于硬件视频加速，可以安装如下的驱动来开启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S libva-mesa-driver lib32-libva-mesa-driver mesa-vdpau lib32-mesa-vdpau<br></code></pre></td></tr></table></figure><p>其中 <code>mesa</code> 是开源的 <code>OpenGL</code> 驱动，<code>xf86-video-amdgpu</code> 是 <code>Xorg</code> 的 <code>AMDGPU</code> 视频驱动，<code>vulkan-radeon</code> 是适用于 AMDGPU 的开源 <code>Vulkan</code> 驱动。</p><p>我还安装了 <code>libva-mesa-driver</code> 和 <code>mesa-vdpau</code> 来开启硬件视频加速。</p><h2 id="5-可选配置"><a href="#5-可选配置" class="headerlink" title="5. 可选配置"></a>5. 可选配置</h2><p>我做出的改动：</p><ul><li><p>我的命令行美化采用 <a href="https://gitee.com/mo2/zsh">https://gitee.com/mo2/zsh</a> 的 <code>powerlevel10k</code> 主题，非常好看。</p></li><li><p>小组件只安装了 <code>Netspeed Widget</code>，其他的都不需要。<br><img src="https://pic2.zhimg.com/80/v2-47bacfb3127beeac28faef5e9afdb7b5_1440w.webp" alt="网速组件"></p></li><li><p>grub 引导界面主题采用了 <code>darkmatter-grub2-theme</code>，非常好看。<br><img src="https://pic2.zhimg.com/80/v2-f02c4381153538b1aed9b9f61367ea7d_1440w.webp" alt="Grub"></p></li></ul><h2 id="6-我安装的软件包"><a href="#6-我安装的软件包" class="headerlink" title="6. 我安装的软件包"></a>6. 我安装的软件包</h2><h3 id="AUR-helper"><a href="#AUR-helper" class="headerlink" title="AUR helper"></a>AUR helper</h3><ul><li><code>yay</code>：AUR 包管理工具，使用 <code>go</code> 语言编写。<code>archlinuxcn</code></li><li><code>paru</code>：AUR 包管理工具，使用 <code>rust</code> 语言编写。用法与 <code>yay</code> 类似。<code>archlinuxcn</code></li></ul><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul><li><code>gcc</code>(C&#x2F;C++), <code>python</code>：是 Archlinux 默认内置的，不需要额外安装。<code>core</code></li><li><code>jdk21-openjdk</code>：openjdk 21，Java 开发环境，LTS 版本。<code>extra</code></li><li><code>go</code>：Go 语言编译工具。<code>extra</code></li><li><code>nodejs-lts-iron</code>：Node.js 20，LTS 版本。<code>extra</code></li><li><code>npm</code>, <code>yarn</code>, <code>pnpm</code>: Node.js 包管理工具。<code>extra</code></li></ul><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><ul><li><code>visual-studio-code-bin</code>：伟大，无需多言。<code>aur</code></li><li><code>intellij-idea-ultimate-edition</code>：强大，无需多言。<code>aur</code></li><li><code>beekeeper-studio-bin</code>：数据库管理工具。<code>aur</code></li><li><code>hoppscotch-bin</code>：API 接口调试工具。<code>aur</code></li></ul><h3 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h3><ul><li><code>gvim</code>：是 <code>vim</code> 的增强版，支持剪贴板功能。<code>extra</code></li><li><code>flameshot</code>：Linux 著名的截图工具，非常好用。<code>extra</code></li><li><code>wireshark-qt</code>：网络抓包工具。<code>extra</code></li><li><code>kdeconnect</code>：用于连接手机，可以在电脑上接收手机的通知，发送文件等，神器。<code>extra</code></li><li><code>spectacle</code>：KDE 的截图工具，可以截取当前窗口，全屏，矩形等。但是总体没有 <code>flameshot</code> 好用。<code>extra</code></li><li><code>kfind</code>：文件搜索工具，搜索文件很方便。<code>extra</code></li><li><code>obs-studio</code>：开源的录屏软件，非常好用，听说大主播都用这个。<code>extra</code></li><li><code>filelight</code>：图形化界面直观查看磁盘占用情况。<code>extra</code></li><li><code>timeshift</code>：系统备份工具，可以备份系统快照，方便回滚。<code>extra</code></li><li><code>rar</code>：解压 rar 文件，万恶的 rar 格式。<code>archlinuxcn</code></li><li><code>p7zip-natspec</code>：解压 7z 文件，解决 Ark 中文乱码。<code>archlinuxcn</code></li></ul><h3 id="系统组件"><a href="#系统组件" class="headerlink" title="系统组件"></a>系统组件</h3><ul><li><code>openssh</code>：SSH 客户端和服务端。<code>core</code></li><li><code>man-db</code>：man 帮助文档。<code>core</code></li><li><code>typos</code>：拼写检查工具。<code>extra</code></li></ul><h3 id="休闲娱乐办公"><a href="#休闲娱乐办公" class="headerlink" title="休闲娱乐办公"></a>休闲娱乐办公</h3><ul><li><code>linuxqq-nt-bwrap</code>：Linux 上的 QQ 客户端，现在是用 electron 写的，好看。<code>aur</code></li><li><code>wechat-universal-bwrap</code>：微信终于有了 Linux 非 wine 的好用版本，但功能还是有点少，等它慢慢加功能吧。<code>aur</code></li><li><code>google-chrome</code>：谷歌浏览器，<code>aur</code>。你也可以选择开源的 <code>chromium</code>，<code>extra</code></li><li><code>onlyoffice-bin</code>：开源的办公软件，支持云协作。<code>aur</code></li><li><code>wps-office-cn</code>, <code>wps-office-mui-zh-cn</code>, <code>ttf-wps-fonts</code>, <code>freetype2-wps</code>：WPS Office，国产办公软件。<code>aur</code></li><li><code>okular</code>：KDE 的 PDF 阅读器。<code>extra</code></li></ul><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><ul><li><code>misans</code>：小米 misans，很好看 适合日用。<code>aur</code></li><li><code>ttf-jetbrains-mono-nerd</code>：JetBrains Mono 字体，适用于终端、代码字体。<code>extra</code></li><li><code>wqy-zenhei</code>：安装以支持亚洲地区语言，Steam 可能用到。<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://wiki.archlinuxcn.org/wiki/Steam">[3]</span></a></sup><code>extra</code> </li><li><code>ttf-liberation</code>：Steam 图形界面大量使用 Arial 字体。你可以通过安装 ttf-liberation 来解决。<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://wiki.archlinuxcn.org/wiki/Steam">[3]</span></a></sup><code>extra</code></li></ul><h2 id="7-我的配置"><a href="#7-我的配置" class="headerlink" title="7. 我的配置"></a>7. 我的配置</h2><ul><li>开机自动启动数字键盘：KDE 系统设置 -&gt; 键盘 -&gt; Plasma 启动时 NumLock 状态 -&gt; 开启</li><li>命令行安装软件包 软件包显示颜色：<code>sudo vim /etc/pacman.conf</code>, 取消 <code>Color</code> 的注释。</li><li>paru 包序号从最下面开始显示，和 <code>yay</code> 一样：<code>sudo vim /etc/paru.conf</code>, 取消 <code>BottomUp</code> 的注释。</li><li>下载软件包的时候不附带 debug 包：<code>sudo vim /etc/makepkg.conf</code>, 在 <code>OPTIONS</code> 的 <code>debug</code> 前面加上 <code>!</code>。是最近出现的新问题，以前没遇到过。参考：<a href="https://bbs.archlinux.org/viewtopic.php?id=293055">https://bbs.archlinux.org/viewtopic.php?id=293055</a></li><li>让 Windows 和 Linux 的时间一致：<code>timedatectl set-local-rtc 1 --adjust-system-clock</code>. 原理：Windows 会假设硬件时钟就是本地时间（Local Time），即硬件时钟存储的时间是与所在时区相同的时间，如东八区。而 Linux 会假设硬件时钟是协调世界时（UTC）时间。所以在 Linux 下设置硬件时钟为本地时间，Windows 和 Linux 的时间就会一致了。如果有更好的解决方案，欢迎在评论区告诉我。</li><li>GRUB 内核配置 <code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet loglevel=3 nowatchdog&quot;</code>：quiet, 禁用绝大多数日志消息<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://docs.kernel.org/admin-guide/kernel-parameters.html">[1]</span></a></sup>。loglevel&#x3D;3, 只显示错误日志消息<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://docs.kernel.org/admin-guide/kernel-parameters.html">[1]</span></a></sup>。nowatchdog, 关闭 watchdog<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://wiki.archlinux.org/title/Improving_performance#Watchdogs">[2]</span></a></sup>。修改后执行 <code>sudo grub-mkconfig -o /boot/grub/grub.cfg</code> 使 grub 配置生效。</li><li><code>vim ~/.ssh/config</code>, 创建 ssh 配置文件，配置 github ssh 推送走 443 端口，避免被坤场阻止 22 端口：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs config">Host github.com<br>  Hostname ssh.github.com<br>  Port 443<br>  User git<br></code></pre></td></tr></table></figure></li></ul><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h2><p>吐槽一下，Arch 确实用得很清爽，没什么多余的东西。就是安装折磨人，花了一天多才搞明白。我使用 <code>archinstall</code> 脚本安装还失败了（因为 kde 依赖更新了，镜像自带的 archinstall 脚本不是最新的），我只能手动安装。不过好在手动安装的教程很详细，一步步就能搞定。</p><p>这篇文章可能还不太完善，在日后的使用中我会不断完善它。埋个坑</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://docs.kernel.org/admin-guide/kernel-parameters.html">https://docs.kernel.org/admin-guide/kernel-parameters.html</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://wiki.archlinux.org/title/Improving_performance#Watchdogs">https://wiki.archlinux.org/title/Improving_performance#Watchdogs</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://wiki.archlinuxcn.org/wiki/Steam">https://wiki.archlinuxcn.org/wiki/Steam</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content><tags><tag>Linux</tag><tag>Archlinux</tag></tags></entry><entry><title>百度收录 Cloudflare Page 显示 308 报错</title><link href="/posts/e7163e6b/"/><url>/posts/e7163e6b/</url><content type="html"><![CDATA[<div class="note note-success">            <p>前阵子我决定将博客迁移到 Cloudflare Page 上，但百度收录使用 <code>.html 验证网站所有权</code> 会显示网页 308 跳转报错。我一开始还以为是百度的问题，千方百计地设法解决但是都徒劳无功，后来才发现是 Cloudflare Page 的问题。</p><p>Google 和 百度都没有发现这个解决办法，所以自己写一篇文章来记录一下。</p>          </div><h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h2><p>百度验证所有权有两种方式：</p><ol><li>文件验证：下载百度提供的 <code>.html</code> 验证文件，放置在网站根目录下。</li><li>HTML 标签验证：在网站首页的 <code>&lt;head&gt;</code> 标签中添加一个特定的 meta 标签，内容由百度提供。</li></ol><p>问题出在 <code>文件验证</code> 上：<br><strong>Cloudflare Page 会将 <code>.html 文件请求</code> 重定向到 <code>去掉 .html 后缀的地址</code> 。导致百度收录网站时显示网页 308 跳转。</strong></p><p><img src="https://pic4.zhimg.com/80/v2-9b2591438a5d35d8ee4ca6e0da4d4f8f_1440w.webp" alt="百度报错 308"></p><p>如 <code>https://www.ovvv.top/baidu_verify_codeva-GwRsL4VPtx.html</code> 会自动重定向到 <code>https://www.ovvv.top/baidu_verify_codeva-GwRsL4VPtx</code>。</p><p><img src="https://pic1.zhimg.com/80/v2-d1aad73842196ad68566de57ef0b75e8_1440w.webp" alt="重定向，没有 .html 后缀"></p><p>直接点击浏览器访问 <code>https://www.ovvv.top/xxx.html</code> 是看不出问题的，因为浏览器会自动重定向到 <code>https://www.ovvv.top/xxx</code>。但是百度收录使用 .html 验证网站所有权时，会显示网页 308 跳转。</p><h2 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2. 解决办法"></a>2. 解决办法</h2><p>在 <code>Cloudflare Community</code> 暂时没有找到<code>完美的解决办法</code>，工作人员表示这是 Cloudflare Page 的特性，<code>暂时还不会提供开关</code>。</p><p>文档描述：<a href="https://developers.cloudflare.com/pages/configuration/serving-pages/#route-matching">https://developers.cloudflare.com/pages/configuration/serving-pages/#route-matching</a></p><p>解决办法（workaround）：</p><ol><li>在文件后面加上 <code>.html</code> 后缀，两层 <code>.html</code> 嵌套，Cloudflare Page 重定向后就会显示 一层 <code>.html</code>。<br>如 Cloudflare Page 文件链接为 <code>https://www.ovvv.top/xxx.html.html</code>。这样访问后重定向后就会显示 <code>https://www.ovvv.top/xxx.html</code>。符合百度验证的要求。</li></ol><p>  <img src="https://pic3.zhimg.com/80/v2-1ca3f5b3bec86e96558b00e51c8aed12_1440w.webp" alt="加后缀显示"></p><ol start="2"><li>使用 <code>HTML标签验证</code> 网站所有权。（但是不够优雅，因为每个网页都要加上）</li></ol><p>  <img src="https://pic4.zhimg.com/80/v2-6f78f82328de1e68d8537e00143b3b63_1440w.webp" alt="标签验证"></p><p>验证成功<br><img src="https://pic3.zhimg.com/80/v2-a39791cb2b2b2858e403801fb71af9b6_1440w.webp" alt="成功"></p>]]></content><tags><tag>Cloudflare-Page</tag><tag>Baidu</tag><tag>SEO</tag></tags></entry><entry><title>Caddy 安装与使用教程</title><link href="/posts/f3ac7ef6/"/><url>/posts/f3ac7ef6/</url><content type="html"><![CDATA[<p><img src="https://pic4.zhimg.com/80/v2-e7c9fd51cac240e4494d7739909aadb3_1440w.webp" alt="caddy"></p><div class="note note-secondary">            <p>Caddy 是一个现代化的 Web 服务器，具有自动 HTTPS、HTTP&#x2F;3、反向代理、负载均衡、静态文件服务等功能。Caddy 的设计理念是简单易用，它的配置文件采用 Caddyfile 格式，非常直观和易懂。Caddy 采用 Go 语言编写，性能优异，占用资源少，适合用于各种 Web 服务的搭建。</p>          </div><p>Nginx 是一个被广泛使用的 Web 服务器，但是它的配置相对 Caddy 更复杂，自动申请和更新 HTTPS 证书也是痛点，需要借助 Certbot 等工具来实现。而 Caddy 则内置了自动 HTTPS 功能，只需要简单的三行配置就可以实现 HTTPS 访问。</p><p>本文将介绍 Caddy 的安装和基本配置，以及一些常用的功能和技巧。以 Debian12 为例，其他 Linux 发行版的安装方法类似。假设你已经拥有一个域名和一台能联网的服务器。</p><h2 id="1-安装-Caddy"><a href="#1-安装-Caddy" class="headerlink" title="1. 安装 Caddy"></a>1. 安装 Caddy</h2><p>输入以下命令安装 Caddy：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update<br>sudo apt install caddy -y<br></code></pre></td></tr></table></figure><p>安装完成后，可以使用以下命令检查 Caddy 的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">caddy version<br></code></pre></td></tr></table></figure><p>当前教程演示的 Caddy 版本是 <code>2.6.2</code>.</p><h2 id="2-启动-Caddy"><a href="#2-启动-Caddy" class="headerlink" title="2. 启动 Caddy"></a>2. 启动 Caddy</h2><p>安装完成后，Caddy 会自动启动。可以使用以下命令检查 Caddy 服务的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl status caddy<br></code></pre></td></tr></table></figure><p>如果输出中显示 <code>Active: active (running)</code>，则表示 Caddy 已成功启动。</p><p>如果 Caddy 未启动，可以根据报错信息排查问题，解决后尝试手动启动 Caddy：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl start caddy<br></code></pre></td></tr></table></figure><p>现在，可以在浏览器中输入服务器的 IP 地址或域名，就会看到 Caddy 的默认欢迎页面。<br><img src="https://pic4.zhimg.com/80/v2-dc5e989ddde90bfd11122d6f74f2ccaf_1440w.webp" alt="Caddy 欢迎页"></p><h2 id="3-了解-Caddy"><a href="#3-了解-Caddy" class="headerlink" title="3. 了解 Caddy"></a>3. 了解 Caddy</h2><h3 id="3-1-Caddy-的配置文件"><a href="#3-1-Caddy-的配置文件" class="headerlink" title="3.1 Caddy 的配置文件"></a>3.1 Caddy 的配置文件</h3><p>Caddy 有两种配置方式，一种是使用 <code>Caddyfile</code>，另一种是使用 JSON 配置文件。Caddyfile 是为 Caddy 设计的配置文件，它的语法简单易懂，适合快速上手。JSON 配置文件则更加灵活，适合复杂的配置需求。</p><p><img src="https://pic3.zhimg.com/80/v2-13bdf74fced58067242e3c776eb5dcfe_1440w.webp" alt="Caddyfile vs json"></p><p>Caddyfile 默认位置是 <code>/etc/caddy/Caddyfile</code>。但也可以使用 <code>-conf</code> 参数指定配置文件的位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">caddy run -conf /path/to/Caddyfile<br></code></pre></td></tr></table></figure><h3 id="3-2-Caddy-常用命令"><a href="#3-2-Caddy-常用命令" class="headerlink" title="3.2 Caddy 常用命令"></a>3.2 Caddy 常用命令</h3><p>Caddy 提供了一些常用的命令，可以用来管理 Caddy 服务。以下是一些常用的命令：</p><ul><li><code>caddy start</code>：在后台启动 Caddy 进程，然后返回</li><li><code>caddy stop</code>：优雅地停止已启动的 Caddy 进程</li><li><code>caddy run</code>：在前台启动 Caddy 进程，然后阻塞</li><li><code>caddy reload</code>：更改运行中的 Caddy 实例的配置</li><li><code>caddy validate</code>：测试配置文件是否有效</li><li><code>caddy version</code>：显示 Caddy 的版本信息</li><li><code>caddy reverse-proxy</code>：反向代理</li><li><code>caddy file-server</code>：启动一个生产就绪的文件服务器</li><li><code>caddy respond</code>：用于开发和测试的简单、硬编码 HTTP 响应</li></ul><h2 id="4-配置网站"><a href="#4-配置网站" class="headerlink" title="4. 配置网站"></a>4. 配置网站</h2><p>我们现在演示如何配置 <code>example.com</code>，使得访问 <code>example.com</code> 就会显示 <code>Hello World !</code> 页面。</p><p>假设你的域名为 <code>example.com</code>，且在域名供应商域名解析处已经将 <code>example.com</code> 解析到服务器的 IP 地址。</p><h3 id="4-1-创建网站根目录"><a href="#4-1-创建网站根目录" class="headerlink" title="4.1 创建网站根目录"></a>4.1 创建网站根目录</h3><p><code>/var/www</code> 目录通常用于存放网站文件，我们可以在这个目录下创建一个目录，用于存放 <code>example.com</code> 的网站文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p /var/www/example.com<br></code></pre></td></tr></table></figure><p>并在其中创建一个 <code>index.html</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /var/www/example.com/index.html<br></code></pre></td></tr></table></figure><p>将以下内容粘贴到 <code>index.html</code> 文件中：</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-dfb167e8" role="button" aria-expanded="false" aria-controls="collapse-dfb167e8">        <div class="fold-arrow">▶</div>html 代码      </div>      <div class="fold-collapse collapse" id="collapse-dfb167e8">        <div class="fold-content">          <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>漠北残月<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span>Hello World !<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div><p>保存并退出编辑器。</p><h3 id="4-2-编辑-Caddyfile"><a href="#4-2-编辑-Caddyfile" class="headerlink" title="4.2 编辑 Caddyfile"></a>4.2 编辑 Caddyfile</h3><p>Caddyfile 默认位置是 <code>/etc/caddy/Caddyfile</code>，可以使用以下命令编辑 Caddyfile：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/caddy/Caddyfile<br></code></pre></td></tr></table></figure><p>将以下内容粘贴到文件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Caddyfile">example.com &#123;<br>    root * /var/www/example.com<br>    file_server<br>&#125;<br></code></pre></td></tr></table></figure><p>保存并退出编辑器。</p><ul><li><code>example.com</code>：域名</li><li><code>root * /var/www/example.com</code>：文档根目录</li><li><code>file_server</code>：文件服务器</li></ul><p>这样，Caddy 就会监听 <code>example.com</code> 的请求，并返回 <code>/var/www/example.com</code> 目录下的文件。</p><p>注意：如果你的地址包含主机名或 IP 地址，则 Caddy 会启用自动 HTTPS。不过，这种行为是隐式的，因此不会覆盖任何显式配置。<br>例如，如果网站地址是 <a href="http://example.com/">http://example.com</a>，自动 HTTPS 将不会激活，因为该方案是明确的 http:&#x2F;&#x2F;。</p><h3 id="4-3-重新加载-Caddy-配置"><a href="#4-3-重新加载-Caddy-配置" class="headerlink" title="4.3 重新加载 Caddy 配置"></a>4.3 重新加载 Caddy 配置</h3><p>编辑完成 Caddyfile 后，需要重新加载 Caddy 配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl reload caddy<br></code></pre></td></tr></table></figure><p>现在，可以在浏览器中输入 <code>example.com</code>，就会看到 <code>Hello World !</code> 页面。<br><img src="https://pic1.zhimg.com/80/v2-9f1df44eb736c0f0f0e852a6f8aeac98_1440w.webp" alt="Hello World"></p><p>我们可以注意到，浏览器访问了 <code>https://example.com</code>，Caddy <strong>自动为网站申请了 HTTPS 证书！</strong>，并且<strong>自动重定向到了 HTTPS</strong>。这是 Caddy 的自动 HTTPS 功能，非常简单方便！！！</p><h2 id="5-配置反向代理"><a href="#5-配置反向代理" class="headerlink" title="5. 配置反向代理"></a>5. 配置反向代理</h2><p><img src="https://pic4.zhimg.com/80/v2-23767a77ae76b8280a695bb3ff45f3eb_1440w.webp" alt="反向代理"></p><p>Caddy 的反向代理是我们常用到的功能，它可以隐藏真实服务器地址，提高安全性，还可以实现负载均衡和缓存等功能。</p><p>假设你的域名为 <code>website.com</code>，并且你的服务器上有一个运行在 8080 端口的应用程序，你希望用户通过 <code>website.com</code> 访问这个应用程序，而不是通过 <code>website.com:8080</code> 直接访问。<br><img src="https://pic2.zhimg.com/80/v2-8daac8f8ba3b016f1eeb570f4c092af1_1440w.webp" alt="没反向代理的网站"><br><img src="https://pic4.zhimg.com/80/v2-336d8da792bb9f774abb3c42a18fd2a3_1440w.webp" alt="反向代理过的网站"></p><p>那么，可以在 Caddyfile 中添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Caddyfile">website.com &#123;<br>    reverse_proxy localhost:8080<br>&#125;<br></code></pre></td></tr></table></figure><p>保存并退出编辑器。</p><ul><li><code>website.com</code>：域名</li><li><code>reverse_proxy localhost:8080</code>：将请求转发给 127.0.0.1:8080 端口来处理</li></ul><p>重新加载 Caddy 配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl reload caddy<br></code></pre></td></tr></table></figure><p>现在，可以在浏览器中输入 <code>website.com</code>，就会访问到运行在 8080 端口的应用程序。</p><p><img src="https://pic4.zhimg.com/80/v2-336d8da792bb9f774abb3c42a18fd2a3_1440w.webp" alt="反向代理"></p><p>由此可见，Caddy 的配置非常简单，而且功能强大，适合用于各种 Web 服务的搭建。比 Nginx 简单了太多。</p><p>比如这是两个 Nginx 的反向代理配置文件：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> app1.website.com;<br><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8081;<br>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> app2.website.com;<br><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8082;<br>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个是 Caddy 的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Caddyfile">app1.website.com &#123;<br>    reverse_proxy http://127.0.0.1:8081 &#123;<br>        header_up Host &#123;host&#125;<br>        header_up X-Real-IP &#123;remote&#125;<br>        header_up X-Forwarded-For &#123;remote&#125;<br>        header_up X-Forwarded-Proto &#123;scheme&#125;<br>    &#125;<br>&#125;<br><br>app2.website.com &#123;<br>    reverse_proxy http://127.0.0.1:8082 &#123;<br>        header_up Host &#123;host&#125;<br>        header_up X-Real-IP &#123;remote&#125;<br>        header_up X-Forwarded-For &#123;remote&#125;<br>        header_up X-Forwarded-Proto &#123;scheme&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>更多 Caddy 的配置和功能，可以参考官方文档：<a href="https://caddyserver.com/docs">Caddy Documentation</a></p>]]></content><tags><tag>运维</tag><tag>部署</tag><tag>Caddy</tag></tags></entry><entry><title>Nginx 安装与使用教程</title><link href="/posts/6645bed3/"/><url>/posts/6645bed3/</url><content type="html"><![CDATA[<p><img src="https://pic3.zhimg.com/80/v2-118cd0af64df927a447a02272e1022de_1440w.webp" alt="Nginx"></p><div class="note note-secondary">            <p>Nginx 是一个高性能的开源 Web 服务器，也可以作为反向代理服务器、负载均衡器和 HTTP 缓存。其轻量级且高效的设计使其在处理高并发请求时表现优异。Nginx 采用事件驱动的异步架构，能够有效地处理大量连接而不会消耗过多系统资源。它支持多种功能模块和扩展，可以满足各种 Web 服务的需求。由于其稳定性、性能和可靠性，Nginx 已成为许多网站和应用程序的首选服务器。</p>          </div><p>其中 <code>Nginx</code> 是市场占有量最高的 Web 服务器，没有之一。如果你是运维或者开发人员，那么我相信你多多少少一定会接触到 Nginx 的相关操作。</p><p>本文将介绍 Nginx 的安装和基本配置，以及一些常用的功能和技巧。以 Debian12 为例，其他 Linux 发行版的安装方法类似。假设你已经拥有一个域名和一台能联网的服务器。</p><h2 id="1-安装-Nginx"><a href="#1-安装-Nginx" class="headerlink" title="1. 安装 Nginx"></a>1. 安装 Nginx</h2><p>输入以下命令安装 Nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update<br>sudo apt install nginx -y<br></code></pre></td></tr></table></figure><p>安装完成后，可以使用以下命令检查 Nginx 的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nginx -v<br></code></pre></td></tr></table></figure><p>当前教程演示的 Nginx 版本是 <code>1.22.1</code>。</p><h2 id="2-启动-Nginx"><a href="#2-启动-Nginx" class="headerlink" title="2. 启动 Nginx"></a>2. 启动 Nginx</h2><p>安装完成后，Nginx 会自动启动。可以使用以下命令检查 Nginx 服务的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl status nginx<br></code></pre></td></tr></table></figure><p>如果输出中显示 <code>Active: active (running)</code>，则表示 Nginx 已成功启动。</p><p>如果 Nginx 未启动，可以根据报错信息排查问题，解决后尝试手动启动 Nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl start nginx<br></code></pre></td></tr></table></figure><p>现在，可以在浏览器中输入服务器的 IP 地址或域名，就会看到 Nginx 的默认欢迎页面。<br><img src="https://pic1.zhimg.com/80/v2-6beedcc888ee88363467453a3a40d38c_1440w.webp" alt="Nginx 欢迎页"></p><h2 id="3-了解-Nginx"><a href="#3-了解-Nginx" class="headerlink" title="3. 了解 Nginx"></a>3. 了解 Nginx</h2><h3 id="3-1-Nginx-配置文件"><a href="#3-1-Nginx-配置文件" class="headerlink" title="3.1 Nginx 配置文件"></a>3.1 Nginx 配置文件</h3><p>Nginx 的默认配置文件位于 <code>/etc/nginx</code> 目录下</p><p>我们可以输出目录下的文件列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> /etc/nginx<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">conf.d          koi-utf     modules-available  proxy_params     sites-enabled  win-utf<br>fastcgi.conf    koi-win     modules-enabled    scgi_params      snippets<br>fastcgi_params  mime.types  nginx.conf         sites-available  uwsgi_params<br></code></pre></td></tr></table></figure><p>其中，</p><ul><li><code>nginx.conf</code> 是 Nginx 的<code>主配置文件</code></li><li><code>sites-available</code> 目录下存放着<code>所有可用的网站配置文件</code></li><li><code>sites-enabled</code> 目录下存放着<code>启用的网站配置文件</code></li><li><code>conf.d</code> 目录下存放着<code>其他配置文件</code></li></ul><h3 id="3-2-Nginx-常用命令"><a href="#3-2-Nginx-常用命令" class="headerlink" title="3.2 Nginx 常用命令"></a>3.2 Nginx 常用命令</h3><p>Nginx 的常用命令如下：</p><ul><li><code>sudo nginx -t</code>：检查 nginx 配置文件是否正确：</li><li><code>sudo nginx -s reload</code>：重新加载配置文件，优雅地重新启动</li><li><code>sudo nginx -s quit</code>：优雅地关闭</li><li><code>sudo nginx -s stop</code>：快速关闭</li><li><code>sudo systemctl status nginx</code>：查看 Nginx 服务的状态</li></ul><h2 id="4-配置网站"><a href="#4-配置网站" class="headerlink" title="4. 配置网站"></a>4. 配置网站</h2><p><img src="https://pic2.zhimg.com/80/v2-4e0fb528e7ecf15e79a9133986eae349_1440w.webp" alt="Nginx 虚拟主机"></p><p>我们现在演示如何配置 <code>example.com</code>，使得访问 <code>example.com</code> 就会显示 <code>Hello World !</code> 页面。</p><p>假设你的域名为 <code>example.com</code>，且在域名供应商域名解析处已经将 <code>example.com</code> 解析到服务器的 IP 地址。</p><h3 id="4-1-创建网站根目录"><a href="#4-1-创建网站根目录" class="headerlink" title="4.1 创建网站根目录"></a>4.1 创建网站根目录</h3><p><code>/var/www</code> 目录通常用于存放网站文件，我们可以在这个目录下创建一个目录，用于存放 <code>example.com</code> 的网站文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p /var/www/example.com<br></code></pre></td></tr></table></figure><p>并在其中创建一个 <code>index.html</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /var/www/example.com/index.html<br></code></pre></td></tr></table></figure><p>将以下内容粘贴到 <code>index.html</code> 文件中：</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-5d5d193e" role="button" aria-expanded="false" aria-controls="collapse-5d5d193e">        <div class="fold-arrow">▶</div>html 代码      </div>      <div class="fold-collapse collapse" id="collapse-5d5d193e">        <div class="fold-content">          <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>漠北残月<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span>Hello World !<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div><p>保存并退出编辑器。</p><h3 id="4-2-创建网站配置文件"><a href="#4-2-创建网站配置文件" class="headerlink" title="4.2 创建网站配置文件"></a>4.2 创建网站配置文件</h3><p>那么，现在可以在 <code>sites-available</code> 目录下创建一个 Nginx 配置文件 <code>example.com.conf</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/nginx/sites-available/example.com.conf<br></code></pre></td></tr></table></figure><p>将以下内容粘贴到文件中：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>; 监听 80 端口（HTTP）<br>    <span class="hljs-attribute">server_name</span> example.com; 域名<br><br>    <span class="hljs-attribute">root</span> /var/www/example.com; 文档根目录<br>    <span class="hljs-attribute">index</span> index.html; 默认文件<br><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ =<span class="hljs-number">404</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>保存并退出编辑器。</p><ul><li><code>server&#123; &#125;</code> 定义一个虚拟主机</li><li><code>listen 80;</code> 监听 80 端口（HTTP）</li><li><code>server_name example.com;</code> 域名</li><li><code>root /var/www/example.com;</code> 文档根目录</li><li><code>index index.html;</code> 默认文件</li><li><code>location /</code>  <code>/</code> 表示所有以<code>/</code>开头的请求（也就是所有请求）</li><li><code>try_files $uri $uri/ =404;</code> 检查请求的文件是否存在，如果不存在则返回 404 错误</li></ul><p>这样，Nginx 就会监听 <code>example.com</code> 的请求，并返回 <code>/var/www/example.com</code> 目录下的文件。</p><p>测试配置文件是否编写正确：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nginx -t<br></code></pre></td></tr></table></figure><p>如果没有错误，将输出以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok<br>nginx: configuration file /etc/nginx/nginx.conf <span class="hljs-built_in">test</span> is successful<br></code></pre></td></tr></table></figure><h3 id="4-3-启用网站配置"><a href="#4-3-启用网站配置" class="headerlink" title="4.3 启用网站配置"></a>4.3 启用网站配置</h3><p>接下来，需要在 <code>sites-enabled</code> 目录下创建一个符号链接，指向 <code>sites-available</code> 目录下的配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">ln</span> -s /etc/nginx/sites-available/example.com.conf /etc/nginx/sites-enabled/<br></code></pre></td></tr></table></figure><p>然后，重新加载 Nginx 配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl reload nginx<br></code></pre></td></tr></table></figure><p>现在，可以在浏览器中输入 <code>example.com</code>，就会看到 <code>Hello World !</code> 页面。<br><img src="https://pic3.zhimg.com/80/v2-1c2cfed9b0363a87826ee47d8781f43a_1440w.webp" alt="Hello World"></p><h3 id="4-4-执行流程"><a href="#4-4-执行流程" class="headerlink" title="4.4 执行流程"></a>4.4 执行流程</h3><p>整个执行流程如下：</p><ol><li>浏览器发送请求到服务器</li><li>Nginx 接收到请求，根据请求的域名和端口，选择对应的网站配置文件</li><li>Nginx 根据配置文件中的 <code>root</code> 指令，找到对应的文档根目录</li><li>Nginx 根据配置文件中的 <code>index</code> 指令，找到默认文件</li><li>Nginx 返回默认文件的内容给浏览器</li><li>浏览器显示页面</li></ol><h2 id="5-配置反向代理"><a href="#5-配置反向代理" class="headerlink" title="5. 配置反向代理"></a>5. 配置反向代理</h2><p><img src="https://pic4.zhimg.com/80/v2-23767a77ae76b8280a695bb3ff45f3eb_1440w.webp" alt="反向代理"></p><p>Nginx 的反向代理是我们常用到的功能，它可以隐藏真实服务器地址，提高安全性，还可以实现负载均衡和缓存等功能。</p><p>假设你的域名为 <code>website.com</code>，并且你的服务器上有一个运行在 8080 端口的应用程序，你希望用户通过 <code>website.com</code> 访问这个应用程序，而不是通过 <code>website.com:8080</code> 直接访问。<br><img src="https://pic2.zhimg.com/80/v2-8daac8f8ba3b016f1eeb570f4c092af1_1440w.webp" alt="没反向代理的网站"><br><img src="https://pic4.zhimg.com/80/v2-336d8da792bb9f774abb3c42a18fd2a3_1440w.webp" alt="反向代理过的网站"></p><h3 id="5-1-创建反向代理配置文件"><a href="#5-1-创建反向代理配置文件" class="headerlink" title="5.1 创建反向代理配置文件"></a>5.1 创建反向代理配置文件</h3><p>在 <code>sites-available</code> 目录下创建一个 Nginx 配置文件 <code>website.com.conf</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/nginx/sites-available/website.com.conf<br></code></pre></td></tr></table></figure><p>将以下内容粘贴到文件中：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> website.com;<br><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8080;<br>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>保存并退出编辑器。</p><p>这个配置文件定义了一个简单的反向代理。</p><ul><li><code>proxy_pass http://127.0.0.1:8080;</code> 将请求转发给 127.0.0.1:8080 端口来处理</li><li><code>proxy_set_header</code> 设置请求头，这些请求头会被传递给后端服务器</li></ul><p>测试配置文件是否编写正确：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nginx -t<br></code></pre></td></tr></table></figure><h3 id="5-2-启用反向代理"><a href="#5-2-启用反向代理" class="headerlink" title="5.2 启用反向代理"></a>5.2 启用反向代理</h3><p>接下来，需要在 <code>sites-enabled</code> 目录下创建一个符号链接，指向 <code>sites-available</code> 目录下的配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">ln</span> -s /etc/nginx/sites-available/website.com.conf /etc/nginx/sites-enabled/<br></code></pre></td></tr></table></figure><p>然后，重新加载 Nginx 配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl reload nginx<br></code></pre></td></tr></table></figure><p>现在再启动 Python Web 服务器，然后在浏览器中输入 <code>website.com</code>，就会看到 <code>Reverse Proxy</code> 页面。这时，<code>website.com</code> 就会显示 <code>website.com:8080</code> 的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /var/www/website.com<br>python3 -m http.server 8080<br></code></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-336d8da792bb9f774abb3c42a18fd2a3_1440w.webp" alt="反向代理"></p><h3 id="5-3-执行流程"><a href="#5-3-执行流程" class="headerlink" title="5.3 执行流程"></a>5.3 执行流程</h3><p>整个执行流程如下：</p><ol><li>浏览器发送请求到服务器</li><li>Nginx 接收到请求，根据请求的域名和端口，选择对应的网站配置文件</li><li>Nginx 根据配置文件中的 <code>location /</code> 指令，将请求转发给 <code>http://127.0.0.1:8080</code> 端口处理</li><li>Python Web 服务器处理请求，返回 <code>Reverse Proxy</code> 页面</li><li>Nginx 返回 <code>Reverse Proxy</code> 页面给浏览器</li><li>浏览器显示页面</li></ol><h3 id="5-5-反向代理常见实践"><a href="#5-5-反向代理常见实践" class="headerlink" title="5.5 反向代理常见实践"></a>5.5 反向代理常见实践</h3><p>反向代理由于隐藏了实际后端服务的端口号，可以直接通过域名来访问。为了隐藏多个应用程序的端口号，我们通常会配置多个三级域名（如 <code>status.example.com</code> 和 <code>chat.example.com</code>）来对应不同的应用程序，实现一个主域名下（<code>example.com</code>）多个应用程序的访问。</p><p>例如，我们可以配置 <code>app1.website.com</code> 和 <code>app2.website.com</code>，分别代理到不同的应用程序。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> app1.website.com;<br><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8081;<br>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> app2.website.com;<br><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8082;<br>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>更多 Nginx 的配置和功能，可以参考官方文档： <a href="https://nginx.org/en/docs/">Nginx Documentation</a>。</p>]]></content><tags><tag>运维</tag><tag>部署</tag><tag>Nginx</tag></tags></entry><entry><title>从零开始部署服务器和网站</title><link href="/posts/4cde56ee/"/><url>/posts/4cde56ee/</url><content type="html"><![CDATA[<div class="note note-secondary">            <p>本文将会介绍如何部署一台新的云服务器。如果你只是想要部署一个简单的网站，阅读前 3 节即可，4～7 节内容是关于服务器的安全配置。<strong>第 8 节有一键脚本，可以帮助你快速部署服务器。</strong></p><p>我自己部署了不少服务器，现在有了一定的经验，写下本文来记录一下自己在部署服务器时的一些操作及注意事项来备忘。我曾经也是一个新手，在部署服务器的时候遇到很多问题，不管屏幕前的你是出于何种目的：比如有业务搭建的需要；还是初入运维的小白；或者只是单纯的想折腾。我希望这篇文章大部分人看完后都能有所收获。</p>          </div><h2 id="0-基础的-Web-知识"><a href="#0-基础的-Web-知识" class="headerlink" title="0. 基础的 Web 知识"></a>0. 基础的 Web 知识</h2><p>在开始之前，我们得先了解一些基础的 Web 知识。有了这些知识，我们才能更好地理解服务器的操作及其使用。如果你已经了解了这些知识，可以直接跳到下一节。</p><h3 id="0-1-什么是服务器？"><a href="#0-1-什么是服务器？" class="headerlink" title="0.1 什么是服务器？"></a>0.1 什么是服务器？</h3><p>在开始使用之前，我们得先搞懂什么是服务器。</p><p><strong>服务器是一种专门为网络服务而设计的专用计算机，其主要功能是为用户提供计算或应用服务。</strong>如网站、数据库、电子邮件、文件存储等等。</p><p>而服务器分为 <code>独立服务器</code> 和 <code>虚拟服务器</code>，它们是有区别的。</p><ul><li><p><code>独立服务器</code> 是指一台物理服务器只提供给一个用户使用，核数多、性能高、稳定性好。但是 <code>价格往往相当昂贵</code>，适合大企业使用，如果我们只是搭建一个小型网站就相当不划算。</p></li><li><p><code>虚拟服务器</code> 是指一台物理服务器上划分出多个虚拟服务器，每个虚拟服务器都有自己的操作系统、磁盘、内存、CPU 等资源，但是它们共享物理服务器的资源。但是 <code>价格也相对便宜</code>，适合个人或小型企业使用。</p></li></ul><p>本文所说的服务器就是指 <code>虚拟服务器</code>，也就是我们常说的云服务器、云主机，属于 IaaS（基础设施即服务）。我们如果要部署一个网站，就需要一个云服务器。</p><p>而云服务器提供商有很多，比如阿里云、腾讯云、华为云、亚马逊云等等。</p><p><img src="https://pic4.zhimg.com/80/v2-7c0b3970795ca4710d6ed4c50a3e5383_1440w.webp" alt="阿里云的 ECS 简介"></p><p>而其价格根据配置、地区、带宽等也有所不同，我们可以根据自己的需求来选择。</p><p><img src="https://pic1.zhimg.com/80/v2-451ed34fbe3762fc35d33d51a5bef524_1440w.webp" alt="腾讯轻量云活动"></p><p>需要特别注意的是，如果你购买的服务器在中国内地（大陆），必须完成 ICP 备案才可对外提供服务。备案是什么以及如何备案，就不在本文讨论范围内了。</p><h3 id="0-2-如何选择服务器系统？"><a href="#0-2-如何选择服务器系统？" class="headerlink" title="0.2 如何选择服务器系统？"></a>0.2 如何选择服务器系统？</h3><p>可选的服务器系统，主要有 <code>Windows</code> 和 <code>Linux</code> 两种。</p><p>我们一般选择 Linux 作为服务器系统，因为 Linux 有很多优点，比如稳定、安全、开源、免费等等，最重要的是高度可自定义，不会给你塞一些不想要的牛皮癣功能。</p><p>而在 Linux 中，又有很多发行版，比如 Ubuntu、CentOS（近几年争议较多 不建议选择）、Debian、Fedora 等等。本文选择 <strong><code>Debian</code></strong> 作为演示，它是是最受欢迎的 Linux 发行版之一 Ubuntu 的上游，是一个非常稳定和可靠的操作系统，也通常被认为比 Ubuntu 更轻量级，因为它不包含太多附加的软件。</p><p>一般服务器提供商都会提供多种系统，你可以根据自己的需求来选择。</p><h3 id="0-3-什么是域名及-DNS？"><a href="#0-3-什么是域名及-DNS？" class="headerlink" title="0.3 什么是域名及 DNS？"></a>0.3 什么是域名及 DNS？</h3><p>购买了一台服务器之后，服务器供应商 会提供给我们服务器的 IP 地址如 <code>8.8.8.8</code>，我们可以通过这个 IP 地址来访问我们的服务器。</p><p>但是 IP 地址是一串数字，不方便记忆，并且后期如果更换服务器，IP 地址也会随之变化，这就会导致我们的网站无法访问。所以我们需要一个域名替代 IP 地址来访问我们的服务器，让用户更方便地访问我们的网站。</p><p>域名就是我们常说的网址，比如 <code>qq.com</code>、<code>baidu.com</code>、<code>google.com</code> 等等。</p><blockquote><p>域名是由一串用点分隔的字符组成的互联网上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位。域名可以说是一个 IP 地址的代称，目的是为了便于记忆后者。—— wikipedia</p></blockquote><p>而 DNS（Domain Name System）是一个分布式数据库，用于存储域名和 IP 地址之间的映射关系。当我们在浏览器中输入一个域名时，浏览器会向 DNS 服务器查询域名对应的 IP 地址，然后再通过这个 IP 地址来访问服务器。</p><p><img src="https://pic2.zhimg.com/80/v2-361795da46a8bea1a7a279ec2bcd2729_1440w.webp" alt="DNS 查询过程"></p><p><strong>将我们的域名解析到服务器的 IP 地址，就可以通过域名来访问我们的服务器了。</strong>域名注册商一般都会提供 DNS 服务，我们可以在域名注册商的控制台中进行域名解析。</p><p><img src="https://pic2.zhimg.com/80/v2-bbecd6cb7f4141ad2a583dc2430843dd_1440w.webp" alt="域名解析"></p><p>你可以选择国内外的知名域名注册商，比如阿里云、腾讯云、GoDaddy、Namecheap、Dynadot 等等。不推荐使用白嫖的域名 —— 因为你的域名所有权得不到保障。</p><h2 id="1-连接服务器"><a href="#1-连接服务器" class="headerlink" title="1. 连接服务器"></a>1. 连接服务器</h2><p>现在假设你已经在服务器提供商那里购买了一台服务器，那么它会给你提供服务器的 <code>IP 地址</code> 以及 <code>root 用户密码</code>。接下来我们开始连接服务器。</p><h3 id="1-1-使用-SSH-连接服务器"><a href="#1-1-使用-SSH-连接服务器" class="headerlink" title="1.1 使用 SSH 连接服务器"></a>1.1 使用 SSH 连接服务器</h3><blockquote><p>SSH（Secure Shell）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。Win10&#x2F;11 和 Linux 发行版，应该都有预装 openssh，如果没有可以搜一下安装教程</p></blockquote><p>我们可以使用 SSH 客户端连接服务器，然后在服务器上执行命令。打开系统的命令行终端，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh root@&lt;服务器 IP 地址&gt;<br></code></pre></td></tr></table></figure><p>如果能连接到服务器，会输出以下信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh root@x.x.x.x<br>The authenticity of host <span class="hljs-string">&#x27;x.x.x.x (x.x.x.x)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><br><span class="hljs-string">ED25519 key fingerprint is SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxx.</span><br><span class="hljs-string">This key is not known by any other names.</span><br><span class="hljs-string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br><span class="hljs-string">Warning: Permanently added &#x27;</span>x.x.x.x<span class="hljs-string">&#x27; (ED25519) to the list of known hosts.</span><br><span class="hljs-string">root@x.x.x.x&#x27;</span>s password:<br></code></pre></td></tr></table></figure><p>这段输出的意思是，无法验证服务器的真实性，是否继续连接。<br>输入 <code>yes</code> 然后 <code>输入服务器的密码</code> 即可连接到服务器。<strong>这段真实性验证只会出现一次，以后再连接服务器就不会再出现了。</strong></p><p>需要注意的是，<strong>输入 SSH 密码时，屏幕上不会显示密码</strong>，不用担心，将服务器的密码正确粘贴后回车即可。</p><p>现在你已经连接到服务器了，可以在服务器上执行命令了。如果连接过程出现报错，请按照报错信息进行排查。</p><h2 id="2-设置服务器时区"><a href="#2-设置服务器时区" class="headerlink" title="2. 设置服务器时区"></a>2. 设置服务器时区</h2><p>设置服务器的时区是非常重要的，因为服务器的时间会影响到很多服务的正常运行。比如日志记录、定时任务、证书有效期、数据库时间等等。</p><h3 id="2-1-查看当前时区"><a href="#2-1-查看当前时区" class="headerlink" title="2.1 查看当前时区"></a>2.1 查看当前时区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">timedatectl<br></code></pre></td></tr></table></figure><p>你的输出有可能为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">               Local time: Tue 2024-03-05 05:39:46 UTC<br>           Universal time: Tue 2024-03-05 05:39:46 UTC<br>                 RTC time: Tue 2024-03-05 05:39:50<br>                Time zone: UTC (UTC, +0000)<br>System clock synchronized: no<br>              NTP service: active<br>          RTC <span class="hljs-keyword">in</span> <span class="hljs-built_in">local</span> TZ: no<br></code></pre></td></tr></table></figure><p>这代表你的服务器的时区是 UTC 时间，而 UTC 时间是世界标准时间，也就是 0 时区。而 <code>System clock synchronized: no</code> 代表你的系统时钟同步没有开启。</p><h3 id="2-2-设置服务器时区"><a href="#2-2-设置服务器时区" class="headerlink" title="2.2 设置服务器时区"></a>2.2 设置服务器时区</h3><p>根据你的服务器所在地区设置时区，输入以下命令来查看可用的时区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo timedatectl list-timezones<br></code></pre></td></tr></table></figure><p>比如我的服务器在香港，那么我就设置为 <code>Asia/Hong_Kong</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo timedatectl set-timezone Asia/Hong_Kong<br></code></pre></td></tr></table></figure><p>然后再次查看时区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">timedatectl<br></code></pre></td></tr></table></figure><p>如果显示为 <code>Time zone: Asia/Hong_Kong</code>，那么就说明时区设置成功了。</p><h3 id="2-3-系统时钟同步"><a href="#2-3-系统时钟同步" class="headerlink" title="2.3 系统时钟同步"></a>2.3 系统时钟同步</h3><p>网络时间协议 NTP（Network Time Protocol）是一种用于同步系统时钟的协议，提供高精准度的时间校正，保证服务器的时间准确。</p><blockquote><p>根据操作系统版本的不同，Debian 提供了多种安装 NTP 客户端的软件包。自 Debian 12 起，默认的 NTP 客户端是 systemd 的 systemd-timesyncd<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://wiki.debian.org/DateTime">[2]</span></a></sup>。timesyncd 是轻量级 ntpd 的替代品，配置更简单、更高效、更安全。此外，Timesyncd 还能更好地与 systemd 集成。这一特性使得使用 systemd 命令进行管理变得更容易<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://phoenixnap.com/kb/debian-time-sync">[3]</span></a></sup>。</p></blockquote>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-7d63aed6" role="button" aria-expanded="false" aria-controls="collapse-7d63aed6">        <div class="fold-arrow">▶</div>Debian 12      </div>      <div class="fold-collapse collapse" id="collapse-7d63aed6">        <div class="fold-content">          <p>如果你是 Debian 12，那么你可以使用 <code>systemd-timesyncd</code> 来同步服务器时间。<br>输入以下命令来安装 <code>systemd-timesyncd</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install systemd-timesyncd -y<br></code></pre></td></tr></table></figure><p>查看 <code>systemd-timesyncd</code> 的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl status systemd-timesyncd<br></code></pre></td></tr></table></figure><p>如果 <code>systemd-timesyncd</code> 是 <code>active (running)</code> 状态，那么就说明 <code>systemd-timesyncd</code> 已经在运行了。否则，你需要手动启动 <code>systemd-timesyncd</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl start systemd-timesyncd<br></code></pre></td></tr></table></figure><p>这时你的服务器的时间就会自动同步了。</p>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-dd575e1a" role="button" aria-expanded="false" aria-controls="collapse-dd575e1a">        <div class="fold-arrow">▶</div>Debian 11 及更早版本      </div>      <div class="fold-collapse collapse" id="collapse-dd575e1a">        <div class="fold-content">          <p>如果你是 Debian 11 或更早的版本，那么你可以使用 <code>ntp</code> 来同步服务器时间。</p><p>输入以下命令来安装 <code>ntp</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install ntp -y<br></code></pre></td></tr></table></figure><p>查看 <code>ntp</code> 的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl status ntp<br></code></pre></td></tr></table></figure><p>如果 <code>ntp</code> 是 <code>active (running)</code> 状态，那么就说明 <code>ntp</code> 已经在运行了。否则，你需要手动启动 <code>ntp</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl start ntp<br></code></pre></td></tr></table></figure><p>这时你的服务器的时间就会自动同步了。</p>        </div>      </div>    </div><p>再次查看时区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">timedatectl<br></code></pre></td></tr></table></figure><p>如果显示为 <code>System clock synchronized: yes</code>，那么就说明系统时钟同步成功了。</p><h2 id="3-安装-Web-服务器"><a href="#3-安装-Web-服务器" class="headerlink" title="3. 安装 Web 服务器"></a>3. 安装 Web 服务器</h2><p><code>Nginx</code> 与 <code>Caddy</code> 是两个优秀的 Web 服务器，它们都是开源的免费的，功能强大，而且易于配置。我们可以选择其中一个来作为我们的 Web 服务器。</p><p>其中 <code>Nginx</code> 是市场占有量最高的 Web 服务器，没有之一。如果你是运维或者开发人员，那么我相信你多多少少一定会接触到 Nginx 的相关操作，建议还是学习一下相关的知识。</p><p>但如果你是小白或者想寻找<code>Nginx</code>的替代品，那么可以尝试一下 <code>Caddy</code>。<code>Caddy</code> 提供了简单易用的配置和自动提供 HTTPS 等功能，使得搭建和管理网站变得更加轻松。</p><h3 id="3-1-Nginx-安装与使用"><a href="#3-1-Nginx-安装与使用" class="headerlink" title="3.1 Nginx 安装与使用"></a>3.1 Nginx 安装与使用</h3><p>可以参考我的文章：<a href="/posts/6645bed3/" title="Nginx 安装与使用教程">Nginx 安装与使用教程</a><br>里面涉及 Nginx 的安装、配置、虚拟主机配置、反向代理配置等等。建议花时间阅读一下，对你的服务器操作和理解会有帮助。</p><h3 id="3-2-Caddy-安装与使用"><a href="#3-2-Caddy-安装与使用" class="headerlink" title="3.2 Caddy 安装与使用"></a>3.2 Caddy 安装与使用</h3><p>可以参考我的文章：<a href="/posts/f3ac7ef6/" title="Caddy 安装与使用教程">Caddy 安装与使用教程</a><br>现代化的 Web 服务器，具有自动 HTTPS、HTTP&#x2F;3、反向代理、负载均衡、静态文件服务等功能。如果你想寻找 Nginx 的替代品或者是小白，那么可以尝试一下 Caddy。</p><h2 id="4-SSH-安全配置"><a href="#4-SSH-安全配置" class="headerlink" title="4. SSH 安全配置"></a>4. SSH 安全配置</h2><h3 id="4-1-修改-SSH-端口"><a href="#4-1-修改-SSH-端口" class="headerlink" title="4.1 修改 SSH 端口"></a>4.1 修改 SSH 端口</h3><blockquote><p>SSH 端口默认是 22，如果看过 SSH 登陆日志 你应该会发现，你的 SSH 每天都会被 <strong>来自全球各地的大量的暴力破解</strong> 密码尝试。这些攻击者会尝试使用常见的用户名和密码来登录你的服务器，如果你的密码不够复杂，那么你的服务器很有可能会被攻破。改变 SSH 端口理论上可以减少九成九以上的暴力破解尝试。</p></blockquote><p>所以，修改服务器的 SSH 端口是非常有必要的。<br>我们可以将 SSH 端口修改为一个不常用的端口来避免被直接爆破，比如 2222。</p><p>在服务器上编辑 SSH 配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure><p>找到 <code>Port 22</code> 这一行，将 22 改为 2222。<br>如果有注释符号 <code>#</code>，将其删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Port 2222<br></code></pre></td></tr></table></figure><p>保存并退出配置文件。</p><p>然后重启 SSH 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart sshd<br></code></pre></td></tr></table></figure><p>现在你就可以使用新的端口来连接服务器了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh root@&lt;服务器 IP 地址&gt; -p 2222<br></code></pre></td></tr></table></figure><h3 id="4-2-改用-SSH-密钥登录"><a href="#4-2-改用-SSH-密钥登录" class="headerlink" title="4.2 改用 SSH 密钥登录"></a>4.2 改用 SSH 密钥登录</h3><p>SSH 密钥登录是一种更加安全的登录方式，它不需要输入密码，而是通过密钥对来进行验证。这样就可以避免密码被暴力破解。</p><p>SSH 密钥加密原理是使用非对称加密算法，原理如下<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://help.aliyun.com/zh/ecs/ssh-service-introduction">[1]</span></a></sup>：<br><img src="https://pic2.zhimg.com/80/v2-8e97a3e00c822f160241ba31cc8f8579_1440w.webp" alt="非对称加密算法"></p><p>密钥对分为公钥和私钥，公钥存放在服务器上，私钥存放在本地。当我们使用 SSH 密钥登录时，本地的私钥会与服务器上的公钥进行匹配，如果匹配成功，就可以登录到服务器。</p><h4 id="4-2-1-生成-SSH-密钥对"><a href="#4-2-1-生成-SSH-密钥对" class="headerlink" title="4.2.1 生成 SSH 密钥对"></a>4.2.1 生成 SSH 密钥对</h4><p>在本地终端输入以下命令，粘贴以下文本，将示例中使用的电子邮件替换为你的电子邮件地址。：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>系统会提示你输入一个文件名，这个文件名是用来保存你的密钥对的，可以按 Enter 键接受默认文件位置。如果你已经有了 SSH 密钥对，可以选择覆盖或者使用新的文件名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Generating public/private ed25519 key pair.<br>Enter file <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> to save the key (/home/user/.ssh/id_ed25519):<br></code></pre></td></tr></table></figure><p>然后系统会提示你输入一个密码，这个密码是用来保护你的私钥的，如果你不想输入密码，可以直接按 Enter 键跳过。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Enter passphrase (empty <span class="hljs-keyword">for</span> no passphrase): <br>Enter same passphrase again:<br></code></pre></td></tr></table></figure><p>现在你已经生成了 SSH 密钥对，你可以在 <code>~/.ssh</code> 目录或者你指定的目录下找到你的密钥对。</p><h4 id="4-2-2-将公钥添加到服务器"><a href="#4-2-2-将公钥添加到服务器" class="headerlink" title="4.2.2 将公钥添加到服务器"></a>4.2.2 将公钥添加到服务器</h4><p>现在你需要将你的公钥添加到服务器上，这样你就可以使用私钥登录服务器了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-copy-id -i ~/.ssh/id_ed25519.pub -p 2222 root@&lt;服务器 IP 地址&gt;<br></code></pre></td></tr></table></figure><p>注意，这里的<br><code>-i</code> 参数是用来指定你的公钥文件的，如果你的公钥文件名不是 <code>id_ed25519.pub</code>，那么你需要将其替换为你的公钥文件名。<br><code>-p 2222</code> 是用来指定 SSH 端口的，如果你的 SSH 端口不是 2222，那么你需要将其替换为你的 SSH 端口。</p><p>如果没有报错，那么你的公钥已经成功添加到服务器上了。</p><h4 id="4-2-3-修改服务器-SSH-配置文件"><a href="#4-2-3-修改服务器-SSH-配置文件" class="headerlink" title="4.2.3 修改服务器 SSH 配置文件"></a>4.2.3 修改服务器 SSH 配置文件</h4><p>现在你需要修改服务器的 SSH 配置文件，使得服务器可以使用密钥对登录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure><p>找到 <code>PubkeyAuthentication</code> 这一行，将 <code>no</code> 改为 <code>yes</code> 或取消注释。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">PubkeyAuthentication <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><p>保存并退出配置文件。</p><p>然后测试一下是否可以使用密钥对登录服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh root@&lt;服务器 IP 地址&gt; -p 2222 -i ~/.ssh/id_ed25519<br></code></pre></td></tr></table></figure><p>如果你成功登录到服务器，那么你的密钥对已经登录成功了。</p><p>现在你可以禁用密码登录，使得服务器更加安全：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure><p>找到 <code>PasswordAuthentication</code> 这一行，将 <code>yes</code> 改为 <code>no</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">PasswordAuthentication no<br></code></pre></td></tr></table></figure><p>保存并退出配置文件。</p><p>测试一下是否可以使用密码登录服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh root@&lt;服务器 IP 地址&gt; -p 2222<br></code></pre></td></tr></table></figure><p>如果你不能登录到服务器，那么你的密码登录已经被禁用了。<br>如果还是可以登录到服务器，那么你需要检查一下你的配置文件是否正确。或者 <code>/etc/ssh/sshd_config.d/*.conf</code> 中是否有其他配置文件覆盖了你的配置。</p><h2 id="5-配置防火墙"><a href="#5-配置防火墙" class="headerlink" title="5. 配置防火墙"></a>5. 配置防火墙</h2><h3 id="5-1-防火墙简介"><a href="#5-1-防火墙简介" class="headerlink" title="5.1 防火墙简介"></a>5.1 防火墙简介</h3><p>防火墙是一种网络安全程序，用于监控和控制网络流量。它可以根据预定义的安全规则来阻止或允许流量通过。防火墙可以保护你的服务器免受来自互联网的恶意攻击。</p><h3 id="5-2-防火墙的选择"><a href="#5-2-防火墙的选择" class="headerlink" title="5.2 防火墙的选择"></a>5.2 防火墙的选择</h3><p>RedHat&#x2F;CentOS 系统可以选择 <code>firewalld</code> 防火墙，而 Debian&#x2F;Ubuntu 系统可以选择 <code>ufw</code> 防火墙。</p><p>本文使用的是 Debian 系统，所以我们可以选择 <code>ufw</code> 防火墙。</p><h3 id="5-3-安装-ufw"><a href="#5-3-安装-ufw" class="headerlink" title="5.3 安装 ufw"></a>5.3 安装 ufw</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update<br>sudo apt install ufw -y<br></code></pre></td></tr></table></figure><h3 id="5-4-启用-ufw"><a href="#5-4-启用-ufw" class="headerlink" title="5.4 启用 ufw"></a>5.4 启用 ufw</h3><p>注意，在启用 UFW 防火墙之前，你必须显式允许进来的 SSH 连接。SSH 可能是你操作机器的唯一渠道，如果被防火墙拦住，将永远都无法连接到机器上，可能就得重置服务器了。</p><p>输入以下命令放开 SSH 端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ufw allow 2222/tcp<br></code></pre></td></tr></table></figure><p>SSH 默认为 22 端口，如果 SSH 运行在非标准端口，你需要将上述命令中的 2222 端口替换为对应的 SSH 端口。本文为 2222 端口</p><p>你还可以放开其他端口，比如 HTTP 端口 80、HTTPS 端口 443：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ufw allow 80/tcp<br>sudo ufw allow 443/tcp<br></code></pre></td></tr></table></figure><p>输入以下命令启用 ufw：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ufw <span class="hljs-built_in">enable</span><br></code></pre></td></tr></table></figure><h2 id="6-服务器禁用-ping"><a href="#6-服务器禁用-ping" class="headerlink" title="6. 服务器禁用 ping"></a>6. 服务器禁用 ping</h2><p>如果你不希望别人通过 ping 来探测你的服务器，可以禁用 ping。实测禁用 ping 以后，服务器就基本没有遭受 SSH 暴力破解的尝试了。</p><p>在 <code>/etc/sysctl.conf</code> 文件中添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">net/ipv4/icmp_echo_ignore_all=1<br></code></pre></td></tr></table></figure><p>然后重新加载配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo sysctl -p<br></code></pre></td></tr></table></figure><h2 id="7-配置-Fail2ban"><a href="#7-配置-Fail2ban" class="headerlink" title="7. 配置 Fail2ban"></a>7. 配置 Fail2ban</h2><p>可以参考我的文章：<a href="/posts/1acd162e/" title="Fail2ban 安装使用教程">Fail2ban 安装使用教程</a></p><p>Fail2Ban 是一个入侵检测系统框架，它可以监控服务器的日志文件，当发现有暴力破解行为时，会自动封禁攻击者的 IP 地址。可以保护电脑服务器免受暴力破解。它用 Python 编写。能够在具有本地安装的数据包控制系统或防火墙（如 iptables）接口的 POSIX 系统上运行。</p><h2 id="8-一键脚本"><a href="#8-一键脚本" class="headerlink" title="8. 一键脚本"></a>8. 一键脚本</h2><p>本文所讲述的内容我整理成了一键脚本，可以帮助你快速部署服务器，包括设置时区、安装 Web 服务器、SSH 安全配置、防火墙配置、禁用 ping、配置 Fail2ban 等等。 <strong><code>在使用前请最好先阅读脚本内容，以免造成不必要的损失</code></strong> 你可以根据自己的需求修改脚本内容。目前支持 Debian 12, Ubuntu 22.04</p><p>脚本开源地址：<a href="https://github.com/mobeicanyue/init-server">https://github.com/mobeicanyue/init-server</a></p><p>使用方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://raw.githubusercontent.com/mobeicanyue/init-server/main/init-server.sh<br>sudo bash init-server.sh<br></code></pre></td></tr></table></figure><p>如果你的服务器无法访问 GitHub，可以使用 jsDelivr 加速访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://cdn.jsdelivr.net/gh/mobeicanyue/init-server/init-server.sh<br>sudo bash init-server.sh<br></code></pre></td></tr></table></figure><p><br><br></p><p>本文如有错误或者不足之处，欢迎指正。</p><p><br><br></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://help.aliyun.com/zh/ecs/ssh-service-introduction">https://help.aliyun.com/zh/ecs/ssh-service-introduction</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://wiki.debian.org/DateTime">https://wiki.debian.org/DateTime</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://phoenixnap.com/kb/debian-time-sync">https://phoenixnap.com/kb/debian-time-sync</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content><tags><tag>运维</tag><tag>服务器</tag><tag>部署</tag><tag>Fail2ban</tag><tag>安全</tag><tag>Linux</tag><tag>SSH</tag><tag>ufw</tag></tags></entry><entry><title>在 ArchLinux 上安装使用 PostgreSQL</title><link href="/posts/d2adab3b/"/><url>/posts/d2adab3b/</url><content type="html"><![CDATA[<div class="note note-secondary">            <p>我之前一直使用 <code>MySQL</code>，最近才接触 <code>PostgreSQL</code>。如果你也是 <code>PostgreSQL</code> 的新手，想必也会和我一样在安装使用的时候遇到一些问题（如安装完没有初始化数据库 想启动服务却启动失败等），所以我在这里记录一下我遇到的问题和解决方法。</p><p>本文主要介绍如何在 ArchLinux 上安装和使用 <code>PostgreSQL</code>。</p>          </div><h2 id="0-btrfs-文件系统禁用-COW"><a href="#0-btrfs-文件系统禁用-COW" class="headerlink" title="0. btrfs 文件系统禁用 COW"></a>0. <code>btrfs</code> 文件系统禁用 <code>COW</code></h2><p>此小节为 <code>btrfs</code> 文件系统禁用 <code>COW</code>，如果你的系统分区为 <code>ext4</code>，可以跳过这一小节。</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-ce593d6c" role="button" aria-expanded="false" aria-controls="collapse-ce593d6c">        <div class="fold-arrow">▶</div>在 btrfs 上禁用 COW      </div>      <div class="fold-collapse collapse" id="collapse-ce593d6c">        <div class="fold-content">          <p>Btrfs（B-tree 文件系统），一种支持写入时复制（COW）的文件系统。<br><code>COW</code> 简单说就是 写入 <code>不会就地覆盖数据</code>；相反，数据块在被复制和修改后会 <code>写入到新的位置</code>，元数据也会更新以指向新的位置。</p><p>如果你的 <code>PostgreSQL</code> 数据库运行在 <code>btrfs</code> 系统分区之上，你应当在创建数据库之前禁用 <code>Copy-on-Write</code> 特性<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://wiki.archlinux.org/title/PostgreSQL">[1]</span></a></sup>，否则可能会导致数据库性能问题。<br>不应创建数据库之后再禁用，因为这一更改只会影响新创建的文件，而不会影响现有文件。</p><hr><p>我们创建一个空目录 <code>/var/lib/postgres/data</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> /var/lib/postgres/data<br></code></pre></td></tr></table></figure><p>这个目录就是 <code>PostgreSQL</code> 数据库的数据目录。</p><p>展示目录属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo lsattr -d /var/lib/postgres/data<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">---------------------- /var/lib/postgres/data<br></code></pre></td></tr></table></figure><p>表示 <strong>目录没有设置任何属性</strong></p><hr><p>现在设置禁用目录 <code>Copy-on-Write</code> 特性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo chattr +C /var/lib/postgres/data/<br></code></pre></td></tr></table></figure><br><p>展示目录属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo lsattr -d /var/lib/postgres/data<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">---------------C------ /var/lib/postgres/data<br></code></pre></td></tr></table></figure><p><code>C</code> 表示 <code>关闭 Copy-on-Write</code> 特性。<br>至此，我们已经在 <code>/var/lib/postgres/data</code> 目录下禁用了 <code>Copy-on-Write</code> 特性。</p>        </div>      </div>    </div><h2 id="1-安装-PostgreSQL"><a href="#1-安装-PostgreSQL" class="headerlink" title="1. 安装 PostgreSQL"></a>1. 安装 <code>PostgreSQL</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S postgresql<br></code></pre></td></tr></table></figure><p>检查 <code>Postgresql</code> 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">psql -V<br></code></pre></td></tr></table></figure><h2 id="2-初始化数据库"><a href="#2-初始化数据库" class="headerlink" title="2. 初始化数据库"></a>2. 初始化数据库</h2><p><code>PostgreSQL</code> 与 <code>MySQL</code> 不同，它需要初始化数据库。<br><br><br>输入以下命令，来进入 <code>postgres</code> 用户的 shell <code>[postgres]$</code> 中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo -iu postgres<br></code></pre></td></tr></table></figure><p>执行下面的命令来初始化数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">initdb -D /var/lib/postgres/data<br></code></pre></td></tr></table></figure><p>如果没有报错，可以退出 <code>postgres</code> shell。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h2 id="3-启动-PostgreSQL-服务"><a href="#3-启动-PostgreSQL-服务" class="headerlink" title="3. 启动 PostgreSQL 服务"></a>3. 启动 PostgreSQL 服务</h2><p>输入以下命令来启动 <code>PostgreSQL</code> 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl start postgresql<br></code></pre></td></tr></table></figure><p>确认服务是否启动成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl status postgresql<br></code></pre></td></tr></table></figure><p>如果输出中显示 <code>Active: active (running)</code> 就表示服务启动成功了。</p><h2 id="4-创建用户和数据库"><a href="#4-创建用户和数据库" class="headerlink" title="4. 创建用户和数据库"></a>4. 创建用户和数据库</h2><p>PostgreSQL 还需要添加一个新的数据库用户。进入 <code>postgres</code> shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo -iu postgres<br></code></pre></td></tr></table></figure><p>输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">createuser --interactive<br></code></pre></td></tr></table></figure><p>输入要增加的角色名称，新的角色是否是超级用户。</p><p>提示：如果创建一个与 Linux 用户名相同的 PostgreSQL 角色&#x2F;用户，就可以访问 PostgreSQL 数据库 shell，而无需指定用户登录（非常方便）。</p><h2 id="5-创建数据库"><a href="#5-创建数据库" class="headerlink" title="5. 创建数据库"></a>5. 创建数据库</h2><p>使用 createdb 命令，创建一个上述用户可以读写的新数据库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">createdb myDatabaseName<br></code></pre></td></tr></table></figure><h2 id="6-登录数据库"><a href="#6-登录数据库" class="headerlink" title="6. 登录数据库"></a>6. 登录数据库</h2><p>在 <code>postgres</code> shell 中，输入以下命令来登录数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">psql<br></code></pre></td></tr></table></figure><p><code>postgres</code> shell 中，一些常用的命令：</p><ul><li><code>\help</code>：列出所有命令</li><li><code>\l</code>：列出所有数据库</li><li><code>\c database</code>：连接到指定数据库</li><li><code>\du</code>：列出所有用户</li><li><code>\dt</code>：列出当前数据库的所有表</li><li><code>\q</code>：退出数据库</li></ul><br><p>参考文章：</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://wiki.archlinux.org/title/PostgreSQL">https://wiki.archlinux.org/title/PostgreSQL</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://gist.github.com/NickMcSweeney/3444ce99209ee9bd9393ae6ab48599d8">https://gist.github.com/NickMcSweeney/3444ce99209ee9bd9393ae6ab48599d8</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content><tags><tag>数据库</tag><tag>btrfs</tag><tag>PostgreSQL</tag></tags></entry><entry><title>Umami UV / PV 统计显示</title><link href="/posts/4259ee82/"/><url>/posts/4259ee82/</url><content type="html"><![CDATA[<blockquote><p>Umami 官方文档并没有提供 UV 和 PV 展示的 API，但是我们可以通过 Umami 的访客 API 获取到网站的访问量和访问人数。</p><p>本文将介绍如何通过 Umami 的 API 获取网站的 UV 和 PV 数据，并在页面上展示。</p></blockquote><br><p>这是本站的 Umami 访问统计页面，显示了每日的访问量和访问人数，链接：<a href="https://umami.ovvv.top/share/SYu8qUKmty52PW9w/blog">https://umami.ovvv.top/share/SYu8qUKmty52PW9w/blog</a></p><p><img src="https://pic4.zhimg.com/80/v2-a96d771513470a3a394727e04bb3afcb_1440w.webp" alt="浏览量展示"></p><p>我们在前文介绍过如何安装 Umami：<a href="/posts/f7a090e6/" title="Umami 安装使用教程">Umami 安装使用教程</a></p><p>下面我们将新建用户，通过 Umami 的 API 调用，编写一个简单的页面来显示 Umami 的 UV, PV 访问情况。本文使用类似于 <code>postman</code> 的 API 测试工具来发送 <code>GET</code>, <code>POST</code> 请求。你也可以使用 <code>hoppscotch</code>、<code>curl</code> 等工具。</p><h2 id="1-新建-View-only-权限的用户"><a href="#1-新建-View-only-权限的用户" class="headerlink" title="1. 新建 View only 权限的用户"></a>1. 新建 <code>View only</code> 权限的用户</h2><p>点击 <code>Settings</code> -&gt; 点击 <code>Users</code> -&gt; 点击 <code>Create user</code> -&gt; 填写账号密码，<code>Role</code> 选择 <code>View only</code> -&gt; 点击 <code>Save</code></p><p><img src="https://pic1.zhimg.com/80/v2-3947dd0fa291aa3db02b5bb251ea2d30_1440w.webp" alt="新建用户"></p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-560caf17" role="button" aria-expanded="false" aria-controls="collapse-560caf17">        <div class="fold-arrow">▶</div>一点碎碎念      </div>      <div class="fold-collapse collapse" id="collapse-560caf17">        <div class="fold-content">          <p>肯定有读者很疑惑，为什么不直接调用 Umami 的 API 获取数据，而是要额外创建一个账户。</p><p>因为我的博客是 <strong>静态开源无服务器</strong> 的，所有代码都展示在前端，包括 API 调用。而 Umami 的 <code>admin</code> API 权限太大了<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://umami.is/docs/websites-api">[1]</span></a></sup>，如果使用 <code>admin</code> 权限的 API Token，那么这个 token 可以获取、修改、删除所有网站的数据，会有严重的安全隐患。</p><p>所以我们需要创建一个 <code>View only</code> 权限的用户，使用这个 <code>低权限的用户</code>的 API Token 来访问我们的浏览量等数据。</p>        </div>      </div>    </div><h2 id="2-新建-Team-并添加用户和网站"><a href="#2-新建-Team-并添加用户和网站" class="headerlink" title="2. 新建 Team 并添加用户和网站"></a>2. 新建 <code>Team</code> 并添加用户和网站</h2><p>点击 <code>Settings</code> -&gt; 点击 <code>Teams</code> -&gt; 点击 <code>Create team</code> -&gt; 填写名称 -&gt; 点击 <code>Save</code></p><p><code>Teams</code> 中选择你刚创建的 Team 点击 <code>view</code> -&gt; 复制 <code>Access code</code>，点击 <code>Websites</code>，点击 <code>Add website</code> 添加你想共享的网站。</p><p><img src="https://pic4.zhimg.com/80/v2-6bec3db22890310bfba2a0875981caa7_1440w.webp" alt="添加网站"></p><p>如果你的网站之前属于个人账户，那么你可以将其转移到团队账户上。<br><img src="https://pic4.zhimg.com/80/v2-d1d4ab90948235cadafd0b64c43ce2e7_1440w.webp" alt="转移团队"></p><p>换一个浏览器登录 Umami（使用 <code>View only</code> 权限的用户） -&gt; <code>Settings</code> -&gt; <code>Teams</code> -&gt; <code>Join team</code> -&gt; 输入 <code>Access code</code> -&gt; <code>Join</code> -&gt; 如果没有出错的话，点击 <code>Dashboard</code> 就可以看到你刚刚添加的网站了。</p><h2 id="3-获取-View-only-用户的-API-Token"><a href="#3-获取-View-only-用户的-API-Token" class="headerlink" title="3. 获取 View only 用户的 API Token"></a>3. 获取 <code>View only</code> 用户的 API Token</h2><p>根据 Umami 的文档<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://umami.is/docs/authentication">[2]</span></a></sup>，我们可以通过以下方式获取 API Token：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST <span class="hljs-regexp">/api/</span>auth/login<br></code></pre></td></tr></table></figure><p>例如 你的网站地址为 <code>example.com</code>，那么你需要使用 <code>View only</code> 的账户密码向 <code>https://example.com/api/auth/login</code> 发送一个 <code>POST</code> 请求，请求体为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;your-username&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;your-password&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>如果成功，你应该会得到以下的结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eyTMjU2IiwiY...4Q0JDLUhWxnIjoiUE_A&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;user&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd33a605-d785-42a1-9365-d6cad3b7befd&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;your-username&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;createdAt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2020-04-20 01:00:00&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>保存 token 值，并在所有请求中发送带 <code>Bearer &lt;token&gt;</code> 值的 <code>Authorization</code> 标头。请求标头应该如下所示：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Authorization</span>: Bearer eyTMjU2IiwiY...<span class="hljs-number">4</span>Q0JDLUhWxnIjoiUE_A<br></code></pre></td></tr></table></figure><h2 id="4-发送请求获取数据"><a href="#4-发送请求获取数据" class="headerlink" title="4. 发送请求获取数据"></a>4. 发送请求获取数据</h2><p>先分析一下官方文档的 API 接口<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://umami.is/docs/website-stats">[3]</span></a></sup>：<br><code>GET /api/websites/&#123;websiteId&#125;/stats</code><br><img src="https://pic2.zhimg.com/80/v2-3c570a96d2d263c81415fea5a97a94fd_1440w.webp" alt="API"></p><p>有两个必填的 查询参数：<code>startAt</code> 和 <code>endAt</code>，都是 Unix 毫秒时间戳，表示开始时间和结束时间</p><p><code>websiteId</code> 和 <code>startAt</code> 需要我们自己获取</p><p><code>websiteId</code> 可以在 <code>Dashboard</code> -&gt; 点击你网站的 <code>View details</code> -&gt; 浏览器栏的地址 <code>https://example.com/websites/&#123;websiteId&#125;</code> 中找到 {websiteId}</p><p><code>startAt</code> 可发送 <code>GET</code> 请求到 <code>https://example.com/api/websites/&#123;websiteId&#125;</code>，带上上文获取的请求头</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Authorization</span>: Bearer eyTMjU2IiwiY...<span class="hljs-number">4</span>Q0JDLUhWxnIjoiUE_A<br></code></pre></td></tr></table></figure><p>在返回结果中找到 <code>createdAt</code> 字段，这个字段就是 <code>startAt</code> 的值，也就是你的网站创建时间，数据的开始时间<br><img src="https://pic3.zhimg.com/80/v2-0f39fd39907c3d7bd911395ba890d82e_1440w.webp" alt="createdAt"></p><h2 id="5-编写页面"><a href="#5-编写页面" class="headerlink" title="5. 编写页面"></a>5. 编写页面</h2><p><img src="https://pic1.zhimg.com/80/v2-c07238914da7b6773ee1d26f03ace7f0_1440w.webp" alt="页面展示"></p><p>代码是看到木木的博客<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://immmmm.com/hi-umami-api/">[4]</span></a></sup>而有灵感，而评论区下面的 Nick<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://github.com/nick-cjyx9/ilesBlog/blob/main/src/composables/useUmami.ts">[5]</span></a></sup> 提供了相对正确的思路，我在他代码的基础上进行了改进，如删除无用的参数和优化步骤等。代码如下，修改你对应的参数即可运行：</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-90469042" role="button" aria-expanded="false" aria-controls="collapse-90469042">        <div class="fold-arrow">▶</div>html 代码      </div>      <div class="fold-collapse collapse" id="collapse-90469042">        <div class="fold-content">          <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Umami 网站统计<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>总访问量 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;umami-site-pv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> 次<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>总访客数 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;umami-site-uv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> 人<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// umami 的 website id</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> website_id = <span class="hljs-string">&#x27;xxx&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 拼接请求地址</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> request_url = <span class="hljs-string">&#x27;https://xxx.com&#x27;</span> + <span class="hljs-string">&#x27;/api/websites/&#x27;</span> + website_id + <span class="hljs-string">&#x27;/stats&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> start_time = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;2024-01-01&#x27;</span>).<span class="hljs-title function_">getTime</span>(); <span class="hljs-comment">// 你的网站创建时间</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> end_time = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> token = <span class="hljs-string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 检查配置是否为空</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!website_id) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Umami website_id is empty&quot;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!request_url) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Umami request_url is empty&quot;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!start_time) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Umami start_time is empty&quot;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!token) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Umami token is empty&quot;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">startAt</span>: start_time,</span><br><span class="language-javascript">            <span class="hljs-attr">endAt</span>: end_time,</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> request_header = &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">headers</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;Bearer &quot;</span> + token,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">allStats</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">try</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;request_url&#125;</span>?<span class="hljs-subst">$&#123;params&#125;</span>`</span>, request_header);</span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();</span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> uniqueVisitors = data.<span class="hljs-property">uniques</span>.<span class="hljs-property">value</span>; <span class="hljs-comment">// 获取独立访客数</span></span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> pageViews = data.<span class="hljs-property">pageviews</span>.<span class="hljs-property">value</span>; <span class="hljs-comment">// 获取页面浏览量</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> ele1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#umami-site-pv&quot;</span>)</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (ele1) &#123;</span><br><span class="language-javascript">                    ele1.<span class="hljs-property">textContent</span> = pageViews; <span class="hljs-comment">// 设置页面浏览量</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> ele2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#umami-site-uv&quot;</span>)</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (ele2) &#123;</span><br><span class="language-javascript">                    ele2.<span class="hljs-property">textContent</span> = uniqueVisitors;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(uniqueVisitors, pageViews);</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);</span><br><span class="language-javascript">            &#125; <span class="hljs-keyword">catch</span> (error) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;-1&quot;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-title function_">allStats</span>();</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://umami.is/docs/websites-api">https://umami.is/docs/websites-api</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://umami.is/docs/authentication">https://umami.is/docs/authentication</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://umami.is/docs/website-stats">https://umami.is/docs/website-stats</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://immmmm.com/hi-umami-api/">https://immmmm.com/hi-umami-api/</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://github.com/nick-cjyx9/ilesBlog/blob/main/src/composables/useUmami.ts">https://github.com/nick-cjyx9/ilesBlog/blob/main/src/composables/useUmami.ts</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content><tags><tag>Umami</tag></tags></entry><entry><title>Fail2ban 安装使用教程</title><link href="/posts/1acd162e/"/><url>/posts/1acd162e/</url><content type="html"><![CDATA[<p><img src="https://pic4.zhimg.com/80/v2-3e60fbb2f9b8a948d82344a200fee833_1440w.webp" alt="Fail2ban"></p><blockquote><p>Fail2Ban 是一个入侵检测系统框架，它可以监控服务器的日志文件，当发现有暴力破解行为时，会自动封禁攻击者的 IP 地址，保护电脑服务器免受暴力破解。它用 Python 编写。能够在具有本地安装的数据包控制系统或防火墙（如 iptables）接口的 POSIX 系统上运行。</p></blockquote><h2 id="1-安装-Fail2ban"><a href="#1-安装-Fail2ban" class="headerlink" title="1. 安装 Fail2ban"></a>1. 安装 Fail2ban</h2><p>以 Debian&#x2F;Ubuntu 为例，使用以下命令安装 Fail2ban：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update<br>sudo apt install fail2ban -y<br></code></pre></td></tr></table></figure><p>需要特别注意的是，Debian 12 及以上的版本需要手动安装 <code>rsyslog</code> 来保证其正常运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install rsyslog -y<br></code></pre></td></tr></table></figure><p>原因见：<a href="https://github.com/fail2ban/fail2ban/issues/3292">Github Issue</a></p><h2 id="2-启动并设置-Fail2ban-开机自启"><a href="#2-启动并设置-Fail2ban-开机自启" class="headerlink" title="2. 启动并设置 Fail2ban 开机自启"></a>2. 启动并设置 Fail2ban 开机自启</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> --now fail2ban<br></code></pre></td></tr></table></figure><h2 id="4-查看-Fail2ban-状态"><a href="#4-查看-Fail2ban-状态" class="headerlink" title="4. 查看 Fail2ban 状态"></a>4. 查看 Fail2ban 状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl status fail2ban<br></code></pre></td></tr></table></figure><h2 id="5-配置-Fail2ban"><a href="#5-配置-Fail2ban" class="headerlink" title="5. 配置 Fail2ban"></a>5. 配置 Fail2ban</h2><p>编辑 &#x2F;etc&#x2F;fail2ban&#x2F;jail.local 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/fail2ban/jail.local<br></code></pre></td></tr></table></figure><p>在文件中输入以下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[DEFAULT]</span><br><span class="hljs-attr">bantime</span> = <span class="hljs-number">600</span><br><span class="hljs-attr">findtime</span> = <span class="hljs-number">300</span><br><span class="hljs-attr">maxretry</span> = <span class="hljs-number">3</span><br><br><span class="hljs-section">[sshd]</span><br><span class="hljs-attr">ignoreip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/<span class="hljs-number">8</span><br><span class="hljs-attr">enabled</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">filter</span> = sshd<br><span class="hljs-attr">bantime</span> = <span class="hljs-number">600</span><br><span class="hljs-attr">findtime</span> = <span class="hljs-number">300</span><br><span class="hljs-attr">maxretry</span> = <span class="hljs-number">2</span><br><span class="hljs-attr">port</span> = <span class="hljs-number">22</span><br><span class="hljs-attr">logpath</span> = /var/log/auth.log<br></code></pre></td></tr></table></figure><p>[DEFAULT] 部分是全局配置，[sshd] 部分是针对 SSH 服务的配置，可以根据自己的需求进行修改。<br>其中：</p><ul><li><code>bantime</code>：封禁时间，单位为秒。-1 表示永久封禁。</li><li><code>findtime</code>：检测时间，单位为秒。如果在这个时间内有超过 <code>maxretry</code> 次的尝试，就会被封禁，如 300 秒内有 5 次尝试失败就会被封禁。</li><li><code>maxretry</code>：最大尝试次数。</li><li><code>ignoreip</code>：不会被封禁的 IP 地址列表。</li><li><code>filter</code>：指定用于匹配日志的过滤器，这里使用了 sshd 过滤器，用于匹配 SSH 登录日志。</li></ul><p>修改完成后 保存并退出编辑器，重启 Fail2ban 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart fail2ban<br></code></pre></td></tr></table></figure><h2 id="6-常用命令"><a href="#6-常用命令" class="headerlink" title="6. 常用命令"></a>6. 常用命令</h2><ul><li><p>查看 sshd 所有被封禁的 IP 地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo fail2ban-client status sshd<br></code></pre></td></tr></table></figure></li><li><p>手动封禁 IP 地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo fail2ban-client <span class="hljs-built_in">set</span> sshd banip 6.6.6.6<br></code></pre></td></tr></table></figure></li><li><p>手动解封 IP 地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo fail2ban-client <span class="hljs-built_in">set</span> sshd unbanip 6.6.6.6<br></code></pre></td></tr></table></figure></li></ul><p><br><br></p><p>参考文章：</p><ul><li><a href="https://1panel.cn/docs/user_manual/toolbox/fail2ban/">https://1panel.cn/docs/user_manual/toolbox/fail2ban/</a></li><li><a href="https://its.pku.edu.cn/faq_fail2ban.jsp">https://its.pku.edu.cn/faq_fail2ban.jsp</a></li><li><a href="https://aws.amazon.com/cn/blogs/china/open-source-tool-to-protect-ec2-instances-fail2ban/">https://aws.amazon.com/cn/blogs/china/open-source-tool-to-protect-ec2-instances-fail2ban/</a></li><li><a href="https://www.myfreax.com/install-configure-fail2ban-on-ubuntu-20-04/">https://www.myfreax.com/install-configure-fail2ban-on-ubuntu-20-04/</a></li></ul>]]></content><tags><tag>运维</tag><tag>服务器</tag><tag>部署</tag><tag>Fail2ban</tag><tag>安全</tag></tags></entry><entry><title>纪事与感悟 — 我的 2023</title><link href="/posts/af028bbd/"/><url>/posts/af028bbd/</url><content type="html"><![CDATA[<p>2024 农历甲辰龙年，在这一年一度的新春佳节，祝大家龙年行大运！</p><p><img src="https://pic1.zhimg.com/80/v2-95bbec13eb9e00e9310fcc23f3225dc4_1440w.webp" alt="龙行大运"></p><blockquote><p>2023 已经过去了，迈入 2024。我总迫切着想记录点什么，记录这一年的点点滴滴或者写点感悟，以后回忆起来应该会感叹，“啊，原来我这一年干了这些事啊，现在看来真有意思”。一边摩挲着手机，一边回忆起青春岁月。</p><p>本想要在元旦左右写下这一年的感悟与记事，但一来当时考完试打算歇一歇，二来元旦要去中学实习，拖来拖去 一拉一扯就拖到了现在。</p></blockquote><br/><p>兜兜转转又是一年春节，春节是我一年中最无拘无束、感到自由的一段时间，没有繁重的学业负担（中学会有假期作业，但起码过年那会不用考虑）、不用太规律的作息、不用考虑上学的事情、拜访亲戚有红包拿，想怎么玩就怎么玩，所有的烦恼似乎都可以在这段时间里甩开、忘掉。今余得闲，徐而思忆此岁之琐碎细事，如泉之流，如叶之落。</p><h2 id="技术折腾经历"><a href="#技术折腾经历" class="headerlink" title="技术折腾经历"></a>技术折腾经历</h2><p>过去这一年，仿佛什么都折腾了，又仿佛什么都没折腾。一开始看见别的同学搭服务器玩，想着我也弄一个。白嫖了阿里云的半年学生机，在阿里云买了个域名，开始了我的折腾之路。</p><p>一开始折腾服务器一窍不通，踩了很多坑，但好在也是学到了很多东西。</p><p>看到别人都用宝塔面板，我也装了一个，了解了很多运维的知识。别人搭建了自托管的 Bitwarden 服务，我也装了一个，付费的 2FA 免费用，数据全在自己服务器上，直到现在我都还用着，跨平台确实挺方便的。</p><p>后面看别人用 halo 搭建的博客，我也折腾了一下，安装过程需要 docker-compose，由于没了解过相关 docker 的知识一开始是一窍不通。就初步学习了 docker 的知识和使用，自己折腾了一下午搞成了，过程中我还搞明白了 nginx 的反向代理。</p><p>halo 博客用了 hao 的主题，是一个非常好看的主题（张洪 Heo 的主题移植），博客内容就复制了一些 kpop 美女展示，没有正儿八经地写博客。但是 halo 有很多诟病的地方，比如写文章体验很差（那个文章编辑器很混乱），springboot 后台内存占用过高等等。后面服务器到期了我就不用 halo 了，转成了 hexo 静态博客，博客全静态生成，清爽无比。</p><p>宝塔面板也不用了，换成了更牛逼的 1Panel 面板，不仅开源、UI 好看，而且它的应用商店有很多开源的软件、项目可以一键安装部署，反向代理、防火墙、SSH 管理、Swap 分配等功能管理起来都是相当方便。<br>服务器也不在阿里云买，换成了 Ucloud 的香港机，因为境内的服务器备案太麻烦了，香港的机器随便折腾。域名同理，转到了 dynadot，可用支付宝支付。</p><p>域名 DNS 用的是 Cloudflare 的服务，Cloudflare 是真牛逼，提供了很多免费的服务和集成了很多便捷的功能，域名经过它代理的话，还可以隐藏服务器的真实地址，积极跟进很多新的技术协议如 brotli http3  等等。</p><p>我还学习了几门型新的语言，Rust、Go、Dart，其中前两门都没有达到精通的程度，只是自己写个小程序玩玩。</p><ul><li>Rust 我一开始被他的宣传吸引，系统级的语言，极致的安全与速度，代价是学习难度特别高，我学了大概三分之一就开摆了。</li><li>Go 语言是个好东西，有很大的潜力，语法简单，功能强大，我觉得是替代 Java 的不错的选择，但是国内生态好像一般。</li><li>Flutter 是一个由谷歌开发的开源跨平台应用软件开发工具包，用于为 Android、iOS、Windows、macOS、Linux Desktop 开发应用，编程语言是 Dart。国内有个社区专门负责 Flutter 和 Dart 的汉化，我给他们仓库提过翻译 PR，有幸被合并了。Dart 语言中规中矩。</li></ul><p>之前用 Github 一直都是直接使用别人的成品 release，再后来 遇到问题会去定位报错、看源码、提 ISSUE。<br>23 年学会了给别人的项目提 PR，给一些自己常用的开源项目提过 PR，看到别人 merge 了你的代码，还是挺有成就感的。我也开始写一些小的开源项目，比如一个简单的爬虫、简单的网络连接程序等等。</p><h2 id="实习经历"><a href="#实习经历" class="headerlink" title="实习经历"></a>实习经历</h2><p>去年也是颇为特殊的一年 —— 我备战考研 今年即将毕业，如果一切顺利，那我就成为一名硕士生，否则就将迈入社会。现在准备着毕设和找工作，希望一切顺利。比较气的是上个月考公没报上（最后那天才想起来要报名），教资则是报上了但是没缴费，被取消资格。😅</p><p>元旦的时候在市级中学实习。市里的重点中学有两所，一所是附中，一所是市级中学。</p><p>我实习的内容是上信息技术课，课程比较轻松，压力也小很多，心情也逐渐由忐忑变为从容。<br>众所周知，信息课是水课，百分之 95 的学生去机房都是玩电脑的，很少有人听课。不知道你们是不是这样，至少我的中学时代是这么过来的。</p><p>第一天去的时候是看自习。和同学们说老师有事来不了就让他们自习了（老师是真有事了让我看自习）<br>从带我实习的老师那里了解到，学校的信息课课程数并不多，他是信息中心的老师，除了上课之外，还负责修理学校老师的电脑，对接公司产品等（如收银机等）</p><p>第二天，听他们信息课课题组备课 讲了很多准备上课的要点和设计理念、思路，我才发现想上好一门课是真的不容易。其中还有老师提到了应试小技巧，比如说课题设计的时候有意引导检查老师往那个思路去想，然后准备好那里的课程，抽查的时候果然问了那里，等等。还有一些逸闻趣事，挺有意思的。</p><p>带我的老师让我去备课，讲授 python 的循环体结构，我一看这内容这么简单，相信自己一定能够讲好。结果隔天讲下来发现我轻敌了，没上课之前自信心满满，但是上了讲台开始讲课的时候才发现是非常紧张且束手无策，脑子里只有照着 ppt 念下去这个念头。老师给我提了许多意见和改进措施，我回去把教案写了，并且听了一天的课以后才再次走上讲台，这次我有所进步，心情也不再忐忑。</p><p>其实上课最重要的就是备好课，对要讲授的内容胸有成竹，再就是语速不要太快了，不然学生不仅听不懂，课还容易太早结束。</p><p>这次实习对我还是有帮助的，作为一名理工男，最缺乏的就是语言的表达能力。虽然计信学院每个学期的课程都会有好几门课程设计，而且都要上讲台亲自演讲，但那种感觉还是不一样的，课设只有老师在认真听，而且老师肯定比你懂，就算讲的很差老师也能理解，并且时间也不到五分钟。但是讲授给学生听就不一样了，他们对于编程一片空白，你需要将知识完整的、以简单易懂的方式传授给他们，需要精心设计与思考，以及自己对于课堂节奏的把握。熟能生巧吧，多做多会。这份技能相信对我的面试也会有所帮助。</p><p>说到饮食住宿，我在附近租了一个月的房子，且由于是在学校附近，吃饭也不愁，沙县 正新鸡排 炒粉 粉汤 炸鸡等应有具有。房子不大，但是住起来也算舒服，没有热水，热水壶煮水洗。</p><h2 id="重游附中-朝花夕拾"><a href="#重游附中-朝花夕拾" class="headerlink" title="重游附中 朝花夕拾"></a>重游附中 朝花夕拾</h2><p>年年岁岁花相似，岁岁年年人不同。<br><img src="https://pic4.zhimg.com/80/v2-4afcdf8dd414df34af9aafa2836087f3_1440w.webp" alt="年年岁岁花相似，岁岁年年人不同"></p><p>2023 这一年充满了未知与迷茫，不似中学时期那样方向明确 只有一个：好好读书，考个好大学。中学时代 6 年在附中，是我人生中最美好的一段时光。前段时间回了一趟母校，发现好像很多东西变了，但是很多东西又没变。</p><p>那天天气很阴，但我还是很高兴，沿着记忆中的路走了一遍。多年未见，学校里仍然是郁郁葱葱，一片生机盎然，校门附近那些树居然还是没长高，不知道是移植了还是干嘛了。往左走是通往报告厅的路，还记得这条路的大草坪是我们九年级的卫生区，恍惚中仿佛还能回忆起当时扫地和除草的人影。<br><img src="https://pic3.zhimg.com/80/v2-f066d0e58fe4a40b76e32f2496a064f2_1440w.webp" alt="校门口草坪"></p><p>沿路走下去，就是一条木质长廊，我印象中是高二高三修的，木质长廊在教学楼中间也有，不过不长。但是有很多植物和爬山虎围绕，郁郁葱葱。<br><img src="https://pic3.zhimg.com/80/v2-470e42f32ed0a32f5806c4ef699d2a3a_1440w.webp" alt="教学楼旁"><br><img src="https://pic2.zhimg.com/80/v2-50d05aa0c217c99a2ed2080c2c887ba5_1440w.webp" alt="教学楼中间"><br>路过了 3，4 号教学楼，就来到了体育馆，附中的体育馆很大，在里面我们参加 观看了很多篮球比赛和学校组织的活动。但是很遗憾的是我印象深刻的不多了，印象里大都是来放松缓解学习压力的🤣</p><p>接着走会穿过体育馆，路过园丁超市，这个超市零食种类很多，有水果蔬菜，还有些食堂的超市买不到的玩意。</p><p>园丁超市对面是新华书店，印象中是初三左右开的？里面有很多书，中学时我是不折不扣的书迷，体育课摸鱼常常来这里看书，当然更多时候是在寝室看。当时看了很多刘慈欣的科幻长短篇小说，明朝那些事，缥缈录，还有一些名著 但是不多。那个时候看小说看得起劲都是挑灯夜读或者中午有空就看🤣，高三专心投入学习就没这么干了。<br>穿过体育馆走廊就是三食堂和操场。</p><p>三食堂当时是高三学生的专属食堂，不知道现在还是不是。虽然没有进去看，但我现在还记得很清楚，里面是一条长长的通道。要么在门口打饭，要么就在走廊的尽头打饭。走廊的中间摆着若干台电视机，我们在吃饭的时候经常会抬头看。但在附中，吃饭的速度要相当快的，往往没看几眼饭就都吃完了。</p><p>往右走就是操场，每天都会跑操，高三除外。现在想想真是辛苦，冬天的时候往往天没亮就摸着黑起床了。在 6:30 之前赶到操场来跑步。🤣但是当时我居然都可以很早起床且不迟到<br><img src="https://pic3.zhimg.com/80/v2-48746a5a3ba4caf01df597f2ca82f7be_1440w.webp" alt="操场"><br><img src="https://pic3.zhimg.com/80/v2-bb4edbc5b869aa9ad8327af029257262_1440w.webp" alt="操场"><br>学校每年夏季都会举办运动会，太阳相当毒辣，但好消息是有靓妹看😁乐。我记得我参加过好几次。最后一次参加是在高二，当时我想着说，高三就没机会了，给自己的中学留点回忆，就报名了跑步接力，成绩中规中矩，但起码没给自己的高中生涯留遗憾（比如垂垂老矣了懊悔自己年轻时有东西没体验？不知道老了会不会这么想，反正我当时就是抱着这种心态参加了。和同学过程中训练也挺有趣）。这种心态也直接导致了我大学后面参加运动会，虽然知道自己水平，但还是去参加了。不过唯一遗憾的是自己应该多训练再上场的，大型运动会太大了，人太多了，汗😓。</p><p>沿着操场外围小走一段就来到了体育馆前的一大片平地，体育课往往都在这里举行。6 年来，所有体育课的缩影似乎都化为了体育课开始的准备动作。一 二 三 四 五 六 七 八<br><img src="https://pic2.zhimg.com/80/v2-347c6ca656370e68d34875edc1c355dd_1440w.webp" alt="体育馆"><br>穿过体育馆的平地，就来到了 A 栋学生宿舍楼，高三的回忆。这栋宿舍楼地理位置特别好，周末休息，不上课的时候，午休结束直接翻栏杆就能去抢篮球场地。但是现在 1 楼好像都被套防盗网了，难绷。</p><p>沿着宿舍楼和篮球场的小路就能走到一食堂。<br><img src="https://pic1.zhimg.com/80/v2-a071d81c0d0970117328cc62823cc7f0_1440w.webp" alt="篮球场"><br><img src="https://pic3.zhimg.com/80/v2-789fac615facf34553bcb49c27f7b60a_1440w.webp" alt="一食堂"><br>学校一共就 123 三个食堂。一食堂后面就是 E 栋学生宿舍楼。初一初三还有高一都住这里。印象中 A E 栋的宿管阿姨人特别好，受学生欢迎。八年级则是住 E 栋后面的 F 栋。住宿期间真是发生了很多有意思的趣事，说一天也道不尽。<br>比如高一那会儿住在 2 楼宿管阿姨旁边的宿舍，夜里悄悄玩狼人杀，玩到半夜 2 点；和舍友天南海北聊天；放学急急忙忙洗澡。其实细细思索都是很美好的记忆，在那里站许久都能想起不少的事来，只是当时道寻常，现在叹年少不再，下次有空再展开说。</p><p>沿路右转，就是一条长长的路，通往 12 栋教学楼。我待的最久的教学楼。外面似乎还是老样子，教室我没近距离看。</p><p>我刚进入学校时 学校方才创立两年，我离开时，学校已然是能够培养出清北优秀学生的省内名校。虽然我最后高考成绩并没有那么理想，但还是要感谢学校给我的这段美好的回忆，感谢所有老师对我的栽培🙏。苦涩的东西总是在若干年后咀嚼反刍才显得那样清甜，怅然若失。</p><p>就像很多年前我给民哥写过的一封信一样。民哥是我高二的语文老师，我很喜欢上民哥的语文课，因为他相当风趣幽默且教学深入浅出，他经常读我的月考作文。但是我当时成绩不好。从实验班分到下面的班，他在走廊上鼓励我要接着好好学习，语重心长 尊尊教诲。我很感动，也很难过，因为分班就上不了他的课了，后面写了一封信和送了一本毕淑敏的书给他表达不舍。信的内容我记不起了，被读过的作文好像也找不到了。懊悔 难过😔</p><p>现在大学快毕业了，我会不会像怀念中学这样怀念我的大学时光呢？说实话，我不知道，但我知道应该先过好当下。有空了就多到校园里走走，拍照📸留念一下。愿无悔</p><p>朝花夕拾，无非是在若干年后回到曾经留下深刻记忆的地方，回忆往昔种种，皆成云烟，感慨万千。</p><p>用一句我在高三时坐在食堂里，看着学弟学妹们抢饭有感而发的话来结束这篇文章：</p><p>人来人往，熙熙攘攘，不再是我们。</p>]]></content><tags><tag>2023</tag><tag>随笔</tag><tag>生活</tag></tags></entry><entry><title>博客 SEO 优化</title><link href="/posts/d6d74ca/"/><url>/posts/d6d74ca/</url><content type="html"><![CDATA[<blockquote><p>写博客的目的是为了记录自己的学习过程与分享日常。<br>而想要让更多的人看到自己的博客，就需要做一些 SEO 优化，提升自己的博客在搜索引擎上的排名。</p></blockquote><h2 id="0-提升文章内容质量"><a href="#0-提升文章内容质量" class="headerlink" title="0. 提升文章内容质量"></a>0. 提升文章内容质量</h2><p>SEO 优化的第一步就是提升你的文章内容质量。<strong>搜索引擎会根据你的文章内容来判断你的网站的质量，优质的文章内容可以提升你的网站在搜索引擎中的排名</strong>。如果你的文章内容质量不高或者同质化严重，那么你的网站在搜索引擎中的排名就会很低，甚至根本不会被搜索引擎收录。</p><p>所以，<strong>文章优化是 SEO 优化的重中之重!!!</strong></p><h2 id="1-网页关键词和描述"><a href="#1-网页关键词和描述" class="headerlink" title="1. 网页关键词和描述"></a>1. 网页关键词和描述</h2><p>在你的博客中，你需要一些 <code>关键词</code> 和 <code>描述</code> 来帮助搜索引擎索引你的网页，比如你的博客是关于前端的，那么你的<code>关键词</code>可以是 <code>前端</code>、<code>JavaScript</code>、<code>Vue</code>、<code>React</code> 等等。<code>描述</code> 会在搜索引擎中显示，所以你需要一个简洁明了的描述来吸引用户点击。</p><p>在 Hexo 的 <code>_config.yml</code> 文件中，你可以配置你的关键词和描述。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">漠北残月的博客</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;技术与生活&#x27;</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;这是一个前端博客，分享前端开发经验&#x27;</span><br><span class="hljs-attr">keywords:</span> <span class="hljs-string">&#x27;前端, JavaScript, Vue, React&#x27;</span><br></code></pre></td></tr></table></figure><br/><p>如果你的博客不是 Hexo，请参考你所使用的博客框架的文档，找到你的关键词和描述的配置文件。否则，你也可以手动在你的网页的 <code>&lt;head&gt;</code> 标签中添加关键词和描述。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;前端, JavaScript, Vue, React&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;这是一个前端博客，分享前端开发经验&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-生成-sitemap-xml"><a href="#2-生成-sitemap-xml" class="headerlink" title="2. 生成 sitemap.xml"></a>2. 生成 sitemap.xml</h2><p><code>sitemap.xml</code> 是存储网站所有页面链接的文件，搜索引擎可以通过这个文件来爬取你的网站。有助于搜索引擎更好的了解你的网站结构，提高你的网站在搜索引擎中的排名。生成 <code>sitemap.xml</code> 文件也是 SEO 优化的一个重要步骤。</p><p>如果你的博客是 Hexo，那么你可以使用 <code>hexo-generator-sitemap</code> 插件来生成 <code>sitemap.xml</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-generator-sitemap --save<br></code></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo generate<br></code></pre></td></tr></table></figure><p>就可以在 public 目录下看到 sitemap.xml 文件了。</p><h2 id="3-配置-robots-txt"><a href="#3-配置-robots-txt" class="headerlink" title="3. 配置 robots.txt"></a>3. 配置 robots.txt</h2><p><code>robots.txt</code> 是一个文本文件，它告诉搜索引擎爬虫哪些页面可以爬取，哪些页面不可以爬取。</p><p>在 <code>source</code> 目录下新建 <code>robots.txt</code> 文件，内容如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">User-agent: *<br>Disallow:<br><br>Sitemap: https://example.com/sitemap.xml<br></code></pre></td></tr></table></figure><p>User-agent: <code>*</code> 表示允许所有的搜索引擎爬取你的网站。<br>Disallow: 为空 表示 <code>不限制</code> 爬取。如果你想限制搜索引擎爬取某些页面，可以在 Disallow 后面添加你不想让搜索引擎爬取的页面，比如 <code>Disallow: /admin</code> 表示不让搜索引擎爬取你的 admin 页面。<br>Sitemap: 后面的链接是你的 sitemap.xml 文件的链接，这样搜索引擎就可以通过 sitemap.xml 文件来爬取你的网站了。</p><h2 id="4-搜索引擎提交"><a href="#4-搜索引擎提交" class="headerlink" title="4. 搜索引擎提交"></a>4. 搜索引擎提交</h2><p>搜索引擎提交可以帮助你的网站更快的被搜索引擎收录，一般来说，搜索引擎会自己爬取你的网站，但是你可以手动提交你的网站，这样可以更快的被收录。</p><p>进平台验证一下域名所有权即可</p><h3 id="4-1-百度"><a href="#4-1-百度" class="headerlink" title="4.1 百度"></a>4.1 百度</h3><p>百度搜索资源平台：<a href="https://ziyuan.baidu.com/site/index">https://ziyuan.baidu.com/site/index</a><br><img src="https://pic1.zhimg.com/80/v2-be8824f3d8967c9e5ede5f3e99a29c30_1440w.webp" alt="百度搜索资源平台"></p><p>百度收录特别慢，可能需要几天到几个月，不要着急，耐心等待。</p><h3 id="4-2-Google"><a href="#4-2-Google" class="headerlink" title="4.2 Google"></a>4.2 Google</h3><p>不出意外，谷歌是会自己爬取你的网站的，但是你可以通过谷歌搜索控制台来查看你的网站的爬取情况、优化你的网站内容、提交站点地图等等。</p><p>谷歌搜索控制台：<a href="https://search.google.com/search-console?hl=zh-CN">https://search.google.com/search-console?hl=zh-CN</a><br>建议不要添加整个域名，而是添加你的网站的子域名，比如 <code>blog.example.com</code>，这样你可以更好的管理你的网站。如果你添加了整个域名，那么一些你并不想让谷歌爬取的子域名网页也会被收录。<br><img src="https://pic4.zhimg.com/80/v2-8a507fbbea8eaaa4addb820bd8b98d77_1440w.webp" alt="添加域名"><br><img src="https://pic4.zhimg.com/80/v2-ab27f59a037d0b8dd0b90004786cc317_1440w.webp" alt="谷歌搜索控制台"></p><h3 id="4-3-Bing"><a href="#4-3-Bing" class="headerlink" title="4.3 Bing"></a>4.3 Bing</h3><p>不出意外，必应也会自己爬取你的网站。</p><p>必应站长平台：<a href="https://www.bing.com/webmasters">https://www.bing.com/webmasters</a></p><p>必应添加域名可以选择 <code>从谷歌搜索控制台导入</code> 或者 <code>手动添加</code><br><img src="https://pic2.zhimg.com/80/v2-3df1cb8e39277613c8d7cb25ef008911_1440w.webp" alt="添加域名"><br><img src="https://pic2.zhimg.com/80/v2-436a8e937842698429e0ad6a33c5d0b1_1440w.webp" alt="从谷歌控制台导入"><br><img src="https://pic4.zhimg.com/80/v2-7428d71d65c2a7b10547f140353170ef_1440w.webp" alt="必应站长平台"></p><h3 id="4-4-Naver"><a href="#4-4-Naver" class="headerlink" title="4.4 Naver"></a>4.4 Naver</h3><p>Naver 是韩国本土的搜索引擎，类似于国内的百度，不会像 Google, Bing 那样自动收录你的网站。如果有需要，可以注册一个 Naver 账号，然后提交你的网站。</p><p>站长平台：<a href="https://searchadvisor.naver.com/console/board">https://searchadvisor.naver.com/console/board</a><br><img src="https://pic4.zhimg.com/80/v2-bfc7629a38b62d8b3cf20d4246961ea7_1440w.webp" alt="验证所有权"><br>建议使用 <code>在根目录添加 html</code> 来验证所有权</p><p>接下来就是提交站点地图了，点击你添加成功的网站，提交站点地图，步骤和前面的谷歌必应差不多。<br><img src="https://pic1.zhimg.com/80/v2-013f0170ff14a43711fdd8c20bcda004_1440w.webp" alt="提交站点地图"></p><h3 id="4-5-其他搜索引擎"><a href="#4-5-其他搜索引擎" class="headerlink" title="4.5 其他搜索引擎"></a>4.5 其他搜索引擎</h3><p>Yandex、DuckDuckGo、Yahoo 等搜索引擎会自动爬取你的网站，不需要去站长手动提交（不主流，没啥必要）。</p><h2 id="5-优化性能"><a href="#5-优化性能" class="headerlink" title="5. 优化性能"></a>5. 优化性能</h2><p>性能优化是 SEO 优化的重要一环，一个网站的性能好坏直接影响到用户体验，也会影响到搜索引擎对你网站的评价。</p><p>访问 <a href="https://pagespeed.web.dev/">https://pagespeed.web.dev/</a> 输入你的网站地址，就可以看到你的网站的性能了。根据提示来优化你的网站。当然，这只是一个参考，你可以根据自己的需求来优化你的网站。</p><p>比如说你的博客主要针对国内用户，那么你可能会用国内的静态资源 CDN 来加速你的网站，比如七牛、BootCDN、baomitu、字节 等等。这种对于用户体验是有帮助的。但是这些 CDN 往往没有优化国外节点，<code>PageSpeed Insights</code> 是谷歌的检测网页用户体验工具，可能就不会给你很高的分数。所以，分数只是一个参考，你可以根据自己的需求来优化你的网站。</p><h2 id="6-外链与反链"><a href="#6-外链与反链" class="headerlink" title="6. 外链与反链"></a>6. 外链与反链</h2><p>外链（Outbound Links）指的是从你的网站指向其他网站的链接。这些链接可以是指向其他网页、博客、文章或任何在线资源的链接。外链对于提高你的网站在搜索引擎中的排名以及增加网站的可信度和权威性都非常重要。</p><p>反链（Backlinks）则是指其他网站指向你的网站的链接。这些链接也被称为入站链接，它们对于搜索引擎优化（SEO）来说非常重要，因为搜索引擎认为其他网站指向你的网站意味着你的网站有价值和权威性。有更多的反链通常意味着你的网站在搜索引擎结果中的排名会更高。</p><p>在博客和网站的运营中，外链和反链都是重要的考虑因素。通过外链可以引导读者到其他有用的资源，提供更丰富的内容体验；而反链则是其他网站认可你网站内容的一种方式，有助于提高你的网站在搜索引擎中的排名和曝光度。</p>]]></content><tags><tag>SEO</tag></tags></entry><entry><title>Umami 安装使用教程</title><link href="/posts/f7a090e6/"/><url>/posts/f7a090e6/</url><content type="html"><![CDATA[<blockquote><p>Umami is a simple, fast, privacy-focused alternative to Google Analytics.</p><p>Umami 是一个简单、快速、注重隐私的 Google Analytics 替代品。</p></blockquote><p><img src="https://pic3.zhimg.com/80/v2-8a1bb7c3a6401964fbf1cc2ca92f2dc6_1440w.webp" alt="Umami 官网图"></p><h2 id="1-什么是-Umami，为什么要使用它？"><a href="#1-什么是-Umami，为什么要使用它？" class="headerlink" title="1. 什么是 Umami，为什么要使用它？"></a>1. 什么是 Umami，为什么要使用它？</h2><p>Umami 是一个简单、快速、注重隐私的开源分析解决方案，是 Google Analytics 的替代品。可轻松收集、分析和了解您的网络数据，同时维护访客隐私和数据所有权。不收集个人身份信息，不使用 Cookie，所有数据都经过匿名处理，符合 GDPR。</p><p>它是一个网站统计工具，可以帮助你分析网站的访问情况，比如访问量、访问来源、访问时间等等。这对于静态网站来说是非常有用的，因为静态网站无法像动态网站一样通过后端代码来统计访问情况。</p><h2 id="2-安装-Umami"><a href="#2-安装-Umami" class="headerlink" title="2. 安装 Umami"></a>2. 安装 Umami</h2>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-14da5347" role="button" aria-expanded="false" aria-controls="collapse-14da5347">        <div class="fold-arrow">▶</div>1Panel 一键安装      </div>      <div class="fold-collapse collapse" id="collapse-14da5347">        <div class="fold-content">          <p>打开 <code>1Panel</code> 面板，点击 <code>应用商店</code>，搜索 <code>umami</code>，点击 <code>安装</code> 即可。</p><p><a href="/posts/15c02856/" title="1Panel 安装配置教程">1Panel 安装配置教程</a></p>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-6e75b44a" role="button" aria-expanded="false" aria-controls="collapse-6e75b44a">        <div class="fold-arrow">▶</div>从源码安装      </div>      <div class="fold-collapse collapse" id="collapse-6e75b44a">        <div class="fold-content">          <p>要求：<br>Node.js &gt;&#x3D; 16.13<br>MySQL or Postgresql</p><ul><li><p>安装 Yarn</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g yarn<br></code></pre></td></tr></table></figure></li><li><p>获取源码并安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/umami-software/umami.git<br><span class="hljs-built_in">cd</span> umami<br>yarn install<br></code></pre></td></tr></table></figure></li><li><p>配置 Umami<br>创建一个 <code>.env</code> 文件，内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">DATABASE_URL</span>=connection-url<br></code></pre></td></tr></table></figure><p>其中 <code>connection-url</code> 为数据库连接地址，如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">postgresql://username:mypassword@localhost:5432/mydb<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql://username:mypassword@localhost:3306/mydb<br></code></pre></td></tr></table></figure></li><li><p>构建 Umami</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn build<br></code></pre></td></tr></table></figure></li><li><p>启动 Umami</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn start<br></code></pre></td></tr></table></figure></li></ul>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-641e30fa" role="button" aria-expanded="false" aria-controls="collapse-641e30fa">        <div class="fold-arrow">▶</div>docker-compose 安装      </div>      <div class="fold-collapse collapse" id="collapse-641e30fa">        <div class="fold-content">          <p>下载官方的 docker-compose.yml 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://raw.githubusercontent.com/umami-software/umami/master/docker-compose.yml<br></code></pre></td></tr></table></figure><p><code>docker-compose.yml</code> 的默认数据库是 Postgresql 数据库，如果你想使用 MySQL 数据库，可以修改 <code>docker-compose.yml</code>，将 <code>DATABASE_URL</code> 的 <code>postgres</code> 替换为 <code>mysql</code>，并修改 <code>DATABASE_URL</code> 为 MySQL 对应的链接。</p><p>修改完配置参数后运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up -d<br></code></pre></td></tr></table></figure>        </div>      </div>    </div><p>默认情况下，应用程序将在 <a href="http://localhost:3000/">http://localhost:3000</a> 上启动。建议使用反向代理避免直接暴露端口。</p><h2 id="3-修改-Umami-密码"><a href="#3-修改-Umami-密码" class="headerlink" title="3. 修改 Umami 密码"></a>3. 修改 Umami 密码</h2><p>Umami 启动后，默认用户名为 <code>admin</code>，默认密码为 <code>umami</code>。</p><p>我们先修改密码，选择 <code>Setting</code> -&gt; <code>Profile</code>，然后设置你的新密码。<br><img src="https://pic4.zhimg.com/80/v2-8e5d01834b102bd9acedb220fe8cc29f_1440w.webp" alt="修改密码"></p><p>点击右上角的地球图标，修改语言为 <code>中文</code>。</p><h2 id="4-添加网站"><a href="#4-添加网站" class="headerlink" title="4. 添加网站"></a>4. 添加网站</h2><p>点击 <code>设置</code> -&gt; <code>网站</code> -&gt; <code>添加网站</code>，输入你的网站地址，点击 <code>添加</code> 即可。<br><img src="https://pic1.zhimg.com/80/v2-09b94e9c1d79acc10492e9954edd48f8_1440w.webp" alt="添加网站"></p><p>填写信息后，点击 <code>编辑</code><br><img src="https://pic2.zhimg.com/80/v2-8c75210e16bdb9ac1ad31ce04ec6014d_1440w.webp" alt="编辑"></p><p>再点击 <code>跟踪代码</code>，复制代码到你的网站中即可。<br><img src="https://pic3.zhimg.com/80/v2-9da304c3d1550731e064f3d9353b6296_1440w.webp" alt="跟踪代码"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script <span class="hljs-keyword">async</span> src=<span class="hljs-string">&quot;https://example.com/script.js&quot;</span> data-website-id=<span class="hljs-string">&quot;xxxxxxxxxxxxxxxxxxxx&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>如果你在本地写博客，你会发现 <code>localhost</code> 也被统计了，可以添加 <code>data-domains</code> 属性，只统计你的域名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script <span class="hljs-keyword">async</span> src=<span class="hljs-string">&quot;https://example.com/script.js&quot;</span> data-website-id=<span class="hljs-string">&quot;xxxxxxxxxxxxxxxxxxxx&quot;</span> data-domains=<span class="hljs-string">&quot;example.com&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>如果你想遵循访客的 <code>Do Not Track</code> 设置，可以添加 <code>data-do-not-track</code> 属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script <span class="hljs-keyword">async</span> src=<span class="hljs-string">&quot;https://example.com/script.js&quot;</span> data-website-id=<span class="hljs-string">&quot;xxxxxxxxxxxxxxxxxxxx&quot;</span> data-<span class="hljs-keyword">do</span>-not-track=<span class="hljs-string">&quot;true&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>更多使用方法请参考官方文档：<a href="https://umami.is/docs/tracker-configuration">https://umami.is/docs/tracker-configuration</a></p><h2 id="5-Umami-UV-PV-统计显示"><a href="#5-Umami-UV-PV-统计显示" class="headerlink" title="5. Umami UV &#x2F; PV 统计显示"></a>5. Umami UV &#x2F; PV 统计显示</h2><p>Umami 官方文档并没有直接提供 UV 和 PV 展示的 API，但是我们可以通过编写相应的代码来获取 Umami 的访问量和访问人数。具体操作参考我的另一篇文章：<a href="/posts/4259ee82/" title="Umami UV &#x2F; PV 统计显示">Umami UV &#x2F; PV 统计显示</a></p>]]></content><tags><tag>部署</tag><tag>Umami</tag></tags></entry><entry><title>AList 安装配置教程</title><link href="/posts/9c18a796/"/><url>/posts/9c18a796/</url><content type="html"><![CDATA[<div class="note note-secondary">            <p>AList 是一个支持多存储的文件列表 &#x2F; WebDAV 程序，使用 Gin 和 Solidjs。本文为 Alist 部署教程，主要介绍 Alist 的配置及使用。参考官网教程：<a href="https://alist.nn.ci/zh/guide">https://alist.nn.ci/zh/guide</a></p>          </div><h2 id="1-安装-Alist"><a href="#1-安装-Alist" class="headerlink" title="1. 安装 Alist"></a>1. 安装 Alist</h2>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-d05f4252" role="button" aria-expanded="false" aria-controls="collapse-d05f4252">        <div class="fold-arrow">▶</div>1Panel 一键安装      </div>      <div class="fold-collapse collapse" id="collapse-d05f4252">        <div class="fold-content">          <p>打开 <code>1Panel</code> 面板，点击 <code>应用商店</code>，搜索 <code>Alist</code>，点击 <code>安装</code> 即可。配置可以参考下面的 <code>docker-compose</code> 安装。</p><p><a href="/posts/15c02856/" title="1Panel 安装配置教程">1Panel 安装配置教程</a></p>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-a741b557" role="button" aria-expanded="false" aria-controls="collapse-a741b557">        <div class="fold-arrow">▶</div>一键脚本安装      </div>      <div class="fold-collapse collapse" id="collapse-a741b557">        <div class="fold-content">          <p>仅适用于 Linux amd64&#x2F;arm64 平台<br>打开命令行输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL <span class="hljs-string">&quot;https://alist.nn.ci/v3.sh&quot;</span> | bash -s install<br></code></pre></td></tr></table></figure><p>alist 默认安装在 <code>/opt/alist</code> 中</p><p>可以通过以下命令来启动、关闭、重启、查看状态：<br>启动： <code>systemctl start alist</code><br>关闭： <code>systemctl stop alist</code><br>状态： <code>systemctl status alist</code><br>重启： <code>systemctl restart alist</code></p>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-0c6f355e" role="button" aria-expanded="false" aria-controls="collapse-0c6f355e">        <div class="fold-arrow">▶</div>docker-compose 安装      </div>      <div class="fold-collapse collapse" id="collapse-0c6f355e">        <div class="fold-content">          <p>docker-compose 的相关知识就不在这里赘述了，如果不了解可以自行搜索。</p><br><p>创建一个目录用于存放 <code>docker-compose.yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /etc/alist &amp;&amp; <span class="hljs-built_in">cd</span> /etc/alist<br></code></pre></td></tr></table></figure><br><p>下载 <code>docker-compose.yml</code> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://alist.nn.ci/docker-compose.yml<br></code></pre></td></tr></table></figure><br>运行容器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up -d<br></code></pre></td></tr></table></figure><br><p>注意 docker-compose.yml 文件中的 <code>volumes</code> 配置，后面要用到：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;/etc/alist:/opt/alist/data&#x27;</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-default collapsed" data-toggle="collapse" href="#collapse-815af59d" role="button" aria-expanded="false" aria-controls="collapse-815af59d">        <div class="fold-arrow">▶</div>手动安装（适合 Windows）      </div>      <div class="fold-collapse collapse" id="collapse-815af59d">        <div class="fold-content">          <p>打开 AList Release 下载待部署系统对应的文件。下载后解压，赋予文件执行权限后运行即可。Windows 推荐使用该方式安装。</p><p>参考：<a href="https://alist.nn.ci/zh/guide/install/manual.html">https://alist.nn.ci/zh/guide/install/manual.html</a></p>        </div>      </div>    </div><h2 id="2-Alist-初始化登录密码"><a href="#2-Alist-初始化登录密码" class="headerlink" title="2.  Alist 初始化登录密码"></a>2.  Alist 初始化登录密码</h2><p><strong>Alist 在登录之前需要初始化密码。</strong>我们可以 <code>随机生成</code> 或者 <code>手动设置</code> 一个密码。</p><h3 id="2-1-随机生成密码"><a href="#2-1-随机生成密码" class="headerlink" title="2.1 随机生成密码"></a>2.1 随机生成密码</h3><ul><li><p>通过 <strong>一键脚本安装</strong> 的，可以在安装路径下执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./alist admin random<br></code></pre></td></tr></table></figure></li><li><p>通过 <strong>doekcer-compose</strong> 安装的，可执行如下命令。注意，如果你的容器名称不是 <code>alist</code>，需要将 <code>-it</code> 后面的 <code>alist</code> 替换为你的容器名称：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it alist ./alist admin random<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-2-手动设置密码"><a href="#2-2-手动设置密码" class="headerlink" title="2.2 手动设置密码"></a>2.2 手动设置密码</h3><p><code>set </code> 后面的 <code>NEW_PASSWORD</code> 即你要设置的密码。</p><ul><li><p>通过 <strong>一键脚本安装</strong> 的，可以在安装路径下执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./alist admin <span class="hljs-built_in">set</span> NEW_PASSWORD<br></code></pre></td></tr></table></figure></li><li><p>通过 <strong>doekcer-compose</strong> 安装的，可执行如下命令。注意，如果你的容器名称不是 <code>alist</code>，需要将 <code>-it</code> 后面的 <code>alist</code> 替换为你的容器名称：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it alist ./alist admin <span class="hljs-built_in">set</span> NEW_PASSWORD<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-配置-Alist"><a href="#3-配置-Alist" class="headerlink" title="3. 配置 Alist"></a>3. 配置 Alist</h2><p>默认情况下，应用程序将在 <a href="http://localhost:5244/">http://localhost:5244</a> 上启动。</p><p>我们还需要进行一些配置，才可以正常使用我们部署的网盘。浏览器访问上述链接，输入用户名 <code>admin</code> 和初始化后的 <code>密码</code>，点击登陆，点击页脚的 <code>管理</code> 进入管理页面。</p><h3 id="3-1-添加存储"><a href="#3-1-添加存储" class="headerlink" title="3.1 添加存储"></a>3.1 添加存储</h3><p>Alist 支持多种存储，包括本地存储、OneDrive、Google Drive 等。这里我们以本地存储为例。</p><ol><li><p>在 <code>Alist 的安装路径</code> 手动创建一个目录 <code>files</code> 用于存储网盘文件。一键脚本路径为 <code>/opt/alist/files</code>；docker-compose 路径为 <code>/etc/alist/files</code>。</p></li><li><p>添加存储：<br>点击管理页面左边栏的 <code>存储</code>，然后点击<code>添加</code>，驱动选择 <code>本机存储</code>，点击<code>添加</code></p></li><li><p><code>挂载路径</code>填写 <code>/</code>，意味着这次添加的存储为 <code>Alist 网盘的根目录</code>。往下划，找到 <code>根文件夹路径</code>，也就是文件的物理存储路径。<br>  <strong>一键脚本安装</strong> 为 <code>/opt/alist/files</code>；<br>  <strong>docker-compose 安装</strong> 为 <code>/opt/alist/data/files</code>。（注意，这个是容器内的映射路径，不是宿主机的路径，参考上文 docker-compose 安装的 volumes 配置，<code>/etc/alist:/opt/alist/data</code>）</p></li></ol><p>  也就是 <code>挂载路径(/)</code> –&gt; <code>根文件夹路径(/opt/alist/files)</code>，这样就可以把 <code>/opt/alist/files</code> 映射到 <code>/</code>。也就是将 <code>/opt/alist/files</code> 映射到了网盘根目录。</p><p>网页划到最下面点击 <code>保存</code></p><h3 id="3-2-启用游客访问"><a href="#3-2-启用游客访问" class="headerlink" title="3.2 启用游客访问"></a>3.2 启用游客访问</h3><p><strong>Alist 默认情况下不允许游客访问。</strong>如果你希望游客访问你的网盘，可以按照以下步骤开启：</p><p>左边栏点击 <code>用户</code>，编辑 <code>guest</code> 用户，将 <code>停用</code> 取消勾选，点击保存。</p><h3 id="3-3-启用索引"><a href="#3-3-启用索引" class="headerlink" title="3.3 启用索引"></a>3.3 启用索引</h3><p>Alist 需要构建索引才能搜索文件，可以按照以下步骤开启搜索：</p><ol><li>转到索引页，选择一个搜索索引，并单击保存;</li><li>保存索引后，单击构建索引来构建索引;</li><li>现在你可以通过点击页面右上角的搜索块或使用快捷键 Ctrl + K 来搜索文件。</li></ol><h2 id="4-更新-Alist"><a href="#4-更新-Alist" class="headerlink" title="4. 更新 Alist"></a>4. 更新 Alist</h2>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-9c65f244" role="button" aria-expanded="false" aria-controls="collapse-9c65f244">        <div class="fold-arrow">▶</div>1Panel 一键安装      </div>      <div class="fold-collapse collapse" id="collapse-9c65f244">        <div class="fold-content">          <p>打开 <code>1Panel</code> 面板，点击 <code>应用商店</code>，点击 <code>可升级</code>，找到 <code>Alist</code>，点击 <code>升级</code> 即可。</p>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-8bbf6858" role="button" aria-expanded="false" aria-controls="collapse-8bbf6858">        <div class="fold-arrow">▶</div>一键脚本安装      </div>      <div class="fold-collapse collapse" id="collapse-8bbf6858">        <div class="fold-content">          <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL <span class="hljs-string">&quot;https://alist.nn.ci/v3.sh&quot;</span> | bash -s update<br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-8e159bd8" role="button" aria-expanded="false" aria-controls="collapse-8e159bd8">        <div class="fold-arrow">▶</div>docker-compose 安装      </div>      <div class="fold-collapse collapse" id="collapse-8e159bd8">        <div class="fold-content">          <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose pull<br>docker-compose up -d<br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-default collapsed" data-toggle="collapse" href="#collapse-624799f7" role="button" aria-expanded="false" aria-controls="collapse-624799f7">        <div class="fold-arrow">▶</div>手动安装      </div>      <div class="fold-collapse collapse" id="collapse-624799f7">        <div class="fold-content">          <p>下载最新版本的 Alist，解压后替换原有文件即可。</p>        </div>      </div>    </div><h2 id="5-高级配置"><a href="#5-高级配置" class="headerlink" title="5. 高级配置"></a>5. 高级配置</h2><p>更多高级配置请参照官网 <a href="https://alist.nn.ci/zh/guide/advanced/">https://alist.nn.ci/zh/guide/advanced/</a></p>]]></content><tags><tag>部署</tag><tag>AList</tag></tags></entry><entry><title>Java 随谈 — 聊聊我对 Java 的看法</title><link href="/posts/f7c262de/"/><url>/posts/f7c262de/</url><content type="html"><![CDATA[<div class="note note-secondary">            <p>Java 是一种高级的、基于类的面向对象的编程语言，其设计目的是尽可能减少对实现的依赖。它是一种通用编程语言，旨在让程序员一次编写，到处运行（WORA），也就是说，编译后的 Java 代码可以在所有支持 Java 的平台上运行，而无需重新编译。Java 应用程序通常被编译成字节码，可以在任何 Java 虚拟机（JVM）上运行，而不受底层计算机体系结构的限制。Java 的语法与 C 和 C++ 相似，但比它们少了一些底层设施。Java 运行时提供了传统编译语言通常不具备的动态功能（如反射和运行时代码修改）。 - wikipedia</p>          </div><p>Java 是一门历史悠久的面向对象的编程语言，生态与产品众多，国内与 Java 有关的开发技术栈也是相当热门。我写过不少关于 Java 的博客（在 CSDN），接触它的时间也不短了，去年还学习了两门新兴的编程语言。</p><p>今天以一个 Java 用户的身份来聊一聊我个人对 Java 的看法：<code>它的优缺点</code>、<code>与其他语言的比较</code>、<code>以及我对它的未来的看法</code>。</p><p><strong>本文默认你是一个有一定 Java 基础的读者，并且对其他编程语言也有一定的了解。</strong></p><h2 id="1-Java-的优点"><a href="#1-Java-的优点" class="headerlink" title="1. Java 的优点"></a>1. Java 的优点</h2><p>首先呢，Java 它绝对不失为一门好语言。 </p><p>Java 语言的优点有很多：</p><ol><li><strong>跨平台</strong>，Java 语言编写的应用程序可以在不同的操作系统系统上运行（write once, run anywhere）。这种跨平台性是通过 JVM (Java Virtual Machine)。JVM 屏蔽了与具体操作系统平台相关的信息，使得 Java 程序只需生成在 Java 虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。<br>当然，这种跨平台实现<code>有利有弊</code>，也是我们后面要讨论的重点。</li><li><strong>语法相对比 C&#x2F;C++ 较容易理解</strong>，Java 工具类也特别全面。当我学完 C++ 再来写 Java 代码时直呼太方便了，什么代码库都有现成的供调用。</li><li><strong>生态相当丰富</strong>（maven 仓库、安卓开发、服务端开发框架），很多功能只有你想不到，没有它做不到，直接导包使用就可以。</li><li><strong>对线程的支持相当好</strong>，线程的创建、销毁、同步等等都有现成的 API 可以使用。同步异步写起来也很方便。</li><li><strong>健壮性</strong>，Java 的强类型机制、异常处理、垃圾的自动收集等是 Java 程序健壮性的重要保证。</li></ol><h2 id="2-Java-的缺点"><a href="#2-Java-的缺点" class="headerlink" title="2. Java 的缺点"></a>2. Java 的缺点</h2><p>但是呢，Java 也有很多为人诟病的问题。 </p><p>下面就来具体阐述一下我的看法，如果有不周到或者浅显、错误的观点，敬请指出。 </p><h3 id="2-1-性能与-JVM-的问题"><a href="#2-1-性能与-JVM-的问题" class="headerlink" title="2.1 性能与 JVM 的问题"></a>2.1 性能与 JVM 的问题</h3><p>Java 的性能是令人诟病的，其中有相当一部分是因为 Java 的虚拟机 JVM。其性能表现不理想甚至还体现在基于 Java 的 Android 上。何出此言？ </p><p>众所周知，编程语言大体上可分为两类，一类是<code>编译型</code>，一类是<code>脚本型</code>。</p><p>Java 表面上虽然是一门编译型语言，但它终归是要在虚拟机里面执行的，光从这一点上来看，它就和脚本语言极为相似（脚本也要依靠解释器去执行）。</p><p>即使虚拟机再怎么精简，运行时也是需要占用相当部分容量的内存。这一点也体现在打包一个简单的 Java 项目的时候你会很头疼：即使你只写了一个 <code>hello world</code> 代码，但是你想要把这个 <code>hello world</code> 在系统上以二进制形式直接跑起来，也得打包完整的 JRE。（比如你写好了 Java 代码想 Windows 双击 exe 运行就得打包，因为小白用户总不可能给你提前装个 JRE 吧）</p><p>AOT 编译（Ahead-of-time compilation, 预编译）将代码编译成本地机器代码，能够大大提高 Java 程序的性能，但 Java 不能完全依赖 AOT 去提高性能，多数情况 JIT(Just-in-time, 实时编译) 也是必不可少的。因为 Java 语言具有动态性，它的动态性主要体现在反射（reflection）和动态代理（dynamic proxy）上。通过反射，你可以在运行时获取类的信息并动态操作类的属性、方法等。动态代理允许你在运行时创建代理类，拦截对真实对象的调用并执行自定义的逻辑。<br>这就决定了，你<code>无法在编译时就确定该如何使用 反射 和 动态代理</code>。因此，JVM 无法在编译时优化这些代码，只能在运行时进行优化。这就是 Java 为什么不能完全依赖 AOT 去提高性能的原因。</p><p>看到这里，我们似乎就能理解，基于 Java 的 Android 和 Objective-C&#x2F;Swift 的 iOS，为什么性能会相差甚远（安卓苹果区别较大，编程语言的不同当然只是性能差距的一个重要原因之一，还有原因如：苹果生态对软件有非常一致的规范要求，而且言出法必随 等）。</p><p>看到这里有的同学可能就会说了。你一直在吐槽 Java 平台的 JVM，但这是 Java 为跨平台性作出必要的牺牲，有了它，Java 才能实现完美的跨平台。你看看 C 语言或者别的<code>编译型语言</code>有这样的跨平台能力吗？（脚本性语言就不包括在内了，因为<code>脚本性语言</code>本来就是交由解释器来执行的） </p><p>你别说，还真有。<code>Go</code> 我觉得就是个比较好的例子。<br>简单介绍一下这门语言吧：<code>Go</code>（又称 Golang）是由 Google 开发的一门编程语言，注重简洁、高效和并发编程。它具有垃圾回收机制、强大的标准库和并发支持。没有虚拟机，代码直接编译成可执行文件，且支持跨平台编译。</p><p>众所周知，越新的语言，它的特性、语法糖和工具链等等功能就越完善。比如说 Java 它相对于 C 和 C++ 就做了很多不错的工具类内置。我当初学完 C 和 C++ 再来学习 Java 的时候就直呼太方便了。 </p><p>而 <code>Go</code> 这门语言，它在集成了一些更新更好用的语法糖和工具类的同时。还实现了编程语言一直梦寐以求的功能：跨平台编译。 </p><p>可别小瞧了这 5 个字，它代表着即使你是 <code>Windows</code> 操作系统，你写好了一份 Go 语言的代码，那么你也可以在 <code>Windows</code> 操作系统上 编译出 <code>Linux</code> 和 <code>Mac OS</code> 系统的二进制文件。（当然系统不止这三个） </p><p>Java 和 GO 的编译执行方式对比：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xl">.<span class="hljs-function"><span class="hljs-title">java</span> --&gt;</span>     .<span class="hljs-function"><span class="hljs-title">class</span>   --&gt;</span>  jvm 执行（间接和操作系统打交道） <br><br>.<span class="hljs-function"><span class="hljs-title">go</span>   --&gt;</span> 二进制文件.<span class="hljs-function"><span class="hljs-title">exe</span> --&gt;</span> 操作系统执行 <br></code></pre></td></tr></table></figure><p>我觉得后者的逻辑是比较<code>符合程序猿直觉</code>的：既然我写一份代码就可以直接跨平台编译执行二进制文件了，为什么还要用那个虚拟机占用内存呢？ </p><h3 id="2-2-版本问题"><a href="#2-2-版本问题" class="headerlink" title="2.2 版本问题"></a>2.2 版本问题</h3><p>GO 语言的开源生态相对 Java 来说还是太弱了，Java 很多时候还依然是必需品。既然如此，有没有办法去改善 Java 的性能问题呢？有，就是尽可能升级 JDK 版本，不要坚守在 Java8。</p><p>Java 版本分为<code>非长期支持版本</code>（non-LTS）和<code>长期支持版本</code>（Long Term Support, LTS）。短期支持版本每半年发布一次，长期支持版本每 3 年发布一次。短期支持版本的生命周期只有 6 个月，而长期支持版本的生命周期为 8 年。<br>目前，Java 21 是最新的 LTS 版本 但刚出还不太稳定，我推荐使用 Java 17，因为它是上个 LTS 版本 使用比较稳定。Springboot3 最低要求也是 JDK17。</p><p>性能提升还是相当明显的。<br><a href="https://kstefanj.github.io/2021/11/24/gc-progress-8-17.html">JDK8-17 性能对比</a><br><a href="https://timefold.ai/blog/2023/java-21-performance">JDK21 性能对比</a></p><p>但是国内很多公司还在使用 JDK 8，甚至还有更低的。直到现在，JDK 8 仍然是国内最流行的版本。我理解如果你的项目已经上线了，那么你肯定不会考虑去升级 JDK 版本，因为要投入不少的时间精力与人力成本，这样做还可能会引发一系列的问题。但是如果你是一个新项目，或者项目有长期规划，那么我觉得你可以考虑一下升级 JDK 版本了。Springboot2 最低要求是 JDK8，如上文提到 Springboot3 最低要求是 JDK17，有不小的跨度。希望开源社区和开源产品可以推动 JDK 的更新吧。</p><h3 id="2-3-商业化使用问题"><a href="#2-3-商业化使用问题" class="headerlink" title="2.3 商业化使用问题"></a>2.3 商业化使用问题</h3><p>最后就是不得不提的 <code>商业化使用</code> 的问题了。<br>老话说得好：“你发任你发，我用 Java8”。除了因为上文提到的<code>生态和兼容问题</code>而不升级版本，从<code>商业化角度</code>来看，这么说也并非空穴来风，Java 8u202 是 Oracle 公司当时发布的最后一个免费的 JDK 版本，之后的版本都是收费的。这也是国内很多公司还在使用 JDK 8 的原因之一。</p><p>我在写文章的时候刚好看到这篇报道：</p><div class="note note-warning">            <p>Java 自 2019 年起采用付费订阅模式，但 2023 年 1 月再次更改了定价模式，<code>宣布基于公司内总员工数来收取对应的费用，而不是使用 Java SE 的员工数</code>，这种定价模式的改变将对中小型企业产生重大影响，也引发了巨大的争议。甚至有网友直接爆料，「最近 Oracle“要求”公司每年付 72,000,000 英镑去使用 Java，所以公司关闭了所有的 Java 项目，从每台机器上卸载了 Java，并请来了几十个程序员，用 HTML 等重新创建他们的系统。」<br>源于此，根据 TIOBE 指数显示，从 2023 年 1 月到 2024 年 1 月，Java 失去了 4.34% 的市场份额。从 Java 趋势榜单上也可以非常直观地看到，Java 已经降至自 2001 年 TIOBE 指数榜单推出以来的最低位。<br>原文链接：<a href="https://blog.csdn.net/csdnnews/article/details/135469865">https://blog.csdn.net/csdnnews/article/details/135469865</a></p>          </div><p>之前就知道 Oracle 在霍霍 JDK 进行商业化，但没想到又搞出这种幺蛾子。<br>Java 开发国内有多火，相信大家应该都有所耳闻。但好端端天胡开局，搞成这样，不得不令人感叹。<br>老实讲，<code>我是真不喜欢 Oracle 这家公司</code>。一切都以商业化为目的，包括收购的 Java，MySQL 等。将一门编程语言搞得这么商业化还是独一家（主流的哪个不开源免费）。虽说挣钱嘛不寒碜，但这样真的不体面，吃相是真的不好看。</p><p>反观 C#，相较 Java 的收费与严苛的审查规则，C# 自 2014 年以来一直是开源和免费使用的，没有迹象表明要改为订阅模式。今年 C# 也摘得 2023 年编程语言称号。至于为什么 C# 能至于此，可以看看 <a href="https://blog.csdn.net/csdnnews/article/details/135469865">上文这篇博客</a>，除了这些 也与微软围绕大力推广 .NET 离不开关系</p><p>最后，我建议要用 Java 就使用开源免费的 OpenJDK，功能上并没有什么大的差别，有些厂商还有自己定制的 OpenJDK。Linux 上默认的 JDK 就是 OpenJDK。</p><p>如果你是 Windows 系统，甚至可以直接安装 Microsoft 提供的 OpenJDK !（选择 .msi 安装包可以帮你安装、设置 JAVA_HOME，一条龙）。 </p><p>另附上一份 Oracle 旗下的另一款数据库产品 MySQL（大家应该都熟悉）的开源免费替代品 MariaDB 的介绍：</p><div class="note note-info">            <p>被甲骨文公司收购后，Oracle 大幅调涨 MySQL 商业版的售价，且甲骨文公司不再支持另一个自由软件项目 OpenSolaris 的发展，因此导致自由软件社群们对于 Oracle 是否还会持续支持 MySQL 社群版（MySQL 之中唯一的免费版本）有所隐忧，MySQL 的创始人麦克尔·维德纽斯 <code>以 MySQL 为基础</code>，成立分支计划 MariaDB。  -wikipedia</p>          </div><p>所以基于开源的考虑，现在 Linux 发行版默认的 JDK 几乎都是 OpenJDK，数据库几乎都是 MariaDB（兼容 MySQL）。（如 Debian 和 ArchLinux）</p><h2 id="3-Java-与其他语言的比较"><a href="#3-Java-与其他语言的比较" class="headerlink" title="3. Java 与其他语言的比较"></a>3. Java 与其他语言的比较</h2><h3 id="3-1-Java-与-C-C-的比较"><a href="#3-1-Java-与-C-C-的比较" class="headerlink" title="3.1 Java 与 C&#x2F;C++ 的比较"></a>3.1 Java 与 C&#x2F;C++ 的比较</h3><ul><li><p>性能：在性能上 C&#x2F;C++ 是遥遥领先于 Java 的，这也是很多游戏引擎都用 C&#x2F;C++ 编写的原因。甚至连 Java 的 JVM 本身都是用 C&#x2F;C++ 写的。JVM 需要与底层系统进行交互，例如内存管理、线程控制等。而众所周知，C&#x2F;C++ 是最接近底层的高级语言、是系统级编程语言，性能也优异，具有对这些底层操作的更好支持，使得实现 JVM 时更容易处理这些系统级任务。</p></li><li><p>语法：Java 语法相对 C&#x2F;C++ 来说更加简洁，没有指针和复杂的底层操作；C&#x2F;C++ 语法更加灵活和复杂，支持指针，可以进行更复杂的底层操作。</p></li><li><p>内存管理：Java 使用垃圾回收机制，程序员无需手动管理内存。这减少了内存泄漏和悬挂指针等问题，但也可能导致一些性能开销；而 C&#x2F;C++ 没有垃圾回收机制，C&#x2F;C++ 允许程序员手动管理内存，包括内存的分配和释放。这给了程序员更大的灵活性，但也增加了出错的可能性。</p></li><li><p>跨平台和编译执行过程：<br>Java 被设计为一种 “Write Once, Run Anywhere”（一次编写，到处运行）的语言，即 Java 程序可以在不同平台上运行而无需重新编译。编译执行过程是：<code>代码（.java）</code>先编译成<code>字节码（.class）</code>，然后<code>字节码</code>由 JVM 解释执行；<br>C&#x2F;C++ 的可移植性相对较低（针对不同的操作系统和硬件有不同的写法，生成的二进制文件也不通用），它通常需要针对特定平台进行编译。编译执行过程是：直接编译成二进制文件，由<code>操作系统</code>执行。</p></li><li><p>应用场景：Java 适合开发大型应用程序，例如企业级应用程序、Web 应用程序、移动应用程序等；C&#x2F;C++ 适合开发系统级应用程序或对性能有较高要求的程序，例如操作系统、驱动程序、游戏引擎、图形应用程序等。</p></li></ul><h3 id="3-2-Java-与-Python-的比较"><a href="#3-2-Java-与-Python-的比较" class="headerlink" title="3.2 Java 与 Python 的比较"></a>3.2 Java 与 Python 的比较</h3><ul><li><p>性能：Python 是脚本语言，性能不如 Java。Python 代码在执行时会被解释器逐行解释，性能较低。而 Java 代码是先编译成字节码（编译优化），然后由 JVM 解释执行。</p></li><li><p>语法：Python 以其简洁的语法而闻名，比 Java 更简洁。没有类型声明、分号等，代码量更少。</p></li><li><p>内存管理：都是使用垃圾回收机制，程序员无需手动管理内存。</p></li><li><p>跨平台和编译执行过程：Python 也是一种跨平台语言，但是 Python 代码在不同平台上运行时需要安装 Python 解释器，通过解释器解释执行代码，而 Java 代码在不同平台上运行时需要安装 JVM。实现思路都是类似的，JVM 在我看来何尝不是种解释器呢。</p></li><li><p>应用场景：Python 适合用于多种应用场景。例如自动化脚本和任务、Web 应用程序、数据分析、人工智能和自然语言处理等</p></li></ul><h3 id="3-3-Java-与-Go-的比较"><a href="#3-3-Java-与-Go-的比较" class="headerlink" title="3.3 Java 与 Go 的比较"></a>3.3 Java 与 Go 的比较</h3><ul><li><p>性能：Go 语言的性能比 Java 稍好，但是差距不大。Go 被设计为一门轻量级语言，具有很好的性能。它使用了垃圾回收机制，帮助管理内存，避免了一些常见的内存错误。Go 语言的性能优势主要体现在并发编程上，Go 语言的并发编程更加简单高效。</p></li><li><p>语法：Go 语言的语法比 Java 更简单、直观、清晰，强调代码的可读性和易理解性。</p></li><li><p>内存管理：都使用垃圾回收机制，程序员无需手动管理内存。</p></li><li><p>跨平台和编译执行过程：Go 是一种静态编译语言，它的程序可以编译成本地机器码。这意味着 Go 程序不需要依赖于虚拟机，可直接在目标平台上运行，无需安装其他运行时环境。而且 Go 还提供了方便的交叉编译工具，可以生成不同操作系统和体系结构的可执行文件！使在一个平台上编译出另一个平台的可执行文件变得容易。编译执行过程是：<code>代码（.go）</code>直接编译成二进制文件，然后由<code>操作系统</code>执行。</p></li><li><p>应用场景：Go 适合用于开发 网络编程、分布式系统、云原生开发、Web 应用程序、系统工具、命令行工具等。</p></li></ul><h3 id="3-4-Java-与-C-的比较"><a href="#3-4-Java-与-C-的比较" class="headerlink" title="3.4 Java 与 C# 的比较"></a>3.4 Java 与 C# 的比较</h3><ul><li><p>性能：在性能方面，Java 和 C# 在很多方面都非常接近，并且难以明确地说哪一个性能更好。二者都是类似的编译执行过程，也都使用垃圾回收机制。PS：主要是，我几乎没怎么用过 C#，所以不好评价。</p></li><li><p>语法：Java 语法是强类型、面向对象的编程范式，语法相对传统和熟悉；C# 的语法设计更加灵活和现代化。它引入了一些先进的语言特性，如 LINQ（Language Integrated Query）、异步编程等，使得代码更为简洁。C#使用属性（Attributes），而Java使用注解（Annotations）来添加元数据和特殊行为。</p></li><li><p>内存管理：都是使用垃圾回收机制，程序员无需手动管理内存。</p></li><li><p>跨平台和编译执行过程：C# 虽然最初是为 Windows 平台设计的，但通过 .NET Core 和 .NET 5+ 的推动，现在也支持跨平台开发。C# 程序可以使用跨平台的 .NET Core 运行时来执行。</p></li><li><p>应用场景：Java 广泛应用于企业级应用、大型系统、Web 开发、移动应用（Android 开发）、云计算等领域。由于其平台无关性和强大的生态系统，Java 在企业级开发中有着重要地位。C# 主要用于 Windows 平台上的开发，包括桌面应用、Web 应用、游戏开发（Unity 游戏引擎）、云服务等。近年来，通过 .NET Core 和 .NET 5+ 的跨平台支持，C# 在开发跨平台应用上的应用场景也在不断增加。</p></li></ul><h2 id="4-对-Java-的未来的展望"><a href="#4-对-Java-的未来的展望" class="headerlink" title="4. 对 Java 的未来的展望"></a>4. 对 Java 的未来的展望</h2><h3 id="4-1-GraalVM-的广泛使用，提高性能"><a href="#4-1-GraalVM-的广泛使用，提高性能" class="headerlink" title="4.1 GraalVM 的广泛使用，提高性能"></a>4.1 GraalVM 的广泛使用，提高性能</h3><p>GraalVM 是由 Oracle 开发的一个高性能、通用的虚拟机，支持多种编程语言，包括 Java、JavaScript、Python、Ruby 等。以下是一些关键特性和用途：<br>多语言支持：GraalVM 支持多种编程语言，使得开发者可以在同一个运行时环境中使用不同语言编写的代码，包括 Java、JavaScript、Python、Ruby 等。这为混合语言的开发提供了便利。<br>即时编译器（JIT）：GraalVM 包含一个先进的 JIT 编译器，可以提供比传统的 Java 虚拟机更好的性能。它允许将程序源代码直接编译成机器码，而不需要预先将代码编译成字节码。<br>Native Image：GraalVM 提供了 Native Image 工具，可以将 Java 程序直接编译成本地可执行文件，减少启动时间和内存占用。也就是我们提到的 AOT 编译。<br>嵌入式执行：GraalVM 可以嵌入到其他应用程序中，使得开发者可以在自己的应用中利用 GraalVM 的多语言支持和性能优势。<br>支持 Java 17+ 版本。</p><h3 id="4-2-使用-Kotlin-代替-Java"><a href="#4-2-使用-Kotlin-代替-Java" class="headerlink" title="4.2 使用 Kotlin 代替 Java"></a>4.2 使用 Kotlin 代替 Java</h3><p>Kotlin 是一种静态类型的编程语言，它可以编译成 Java 字节码，也可以编译成本地机器码。Kotlin 由 JetBrains 开发，目前已经成为 Android 开发的首选语言。Kotlin 与 Java 兼容，可以与 Java 代码无缝集成，也可以直接使用 Kotlin 编写 Android 应用程序。Kotlin 语法简洁，易于学习，具有很好的可读性和可维护性。Kotlin 也可以嵌入到其他应用程序中，使得开发者可以在自己的应用中利用 Kotlin 的多语言支持和性能优势。Kotlin 也是一种跨平台语言，Kotlin&#x2F;Native 允许将 Kotlin 代码编译成本地机器代码，而不是 Java 字节码，可以脱离 JVM，直接在支持的平台上运行编译后的二进制文件。</p><p>但是如果还是虚拟机运行，好像有点换汤不换药？:)</p>]]></content><tags><tag>Java</tag></tags></entry><entry><title>Uptime-Kuma 安装使用教程</title><link href="/posts/c7c2ca22/"/><url>/posts/c7c2ca22/</url><content type="html"><![CDATA[<blockquote><p>A fancy self-hosted monitoring tool</p><p>一个精致的自托管监控工具</p></blockquote><h2 id="1-什么是-uptime-kuma，为什么要使用它？"><a href="#1-什么是-uptime-kuma，为什么要使用它？" class="headerlink" title="1. 什么是 uptime-kuma，为什么要使用它？"></a>1. 什么是 uptime-kuma，为什么要使用它？</h2><p>uptime-kuma 是一个开源的 Status Page，它可以帮助你监控你的网站、服务器、API 等，当你的网站、服务器、API 等出现故障时，它会在网页上显示，同时它还可以作为一个 Status Page，展示你的网站、服务器、API 等的状态。<br>支持多种监测方式如 HTTP(S), TCP Port, Ping, DNS, Docker 等等</p><p>在线体验：<a href="https://demo.uptime.kuma.pet/">https://demo.uptime.kuma.pet</a></p><p>官网安装教程：<a href="https://github.com/louislam/uptime-kuma/wiki/%F0%9F%94%A7-How-to-Install">louislam&#x2F;uptime-kuma</a></p><h2 id="2-安装-uptime-kuma"><a href="#2-安装-uptime-kuma" class="headerlink" title="2. 安装 uptime-kuma"></a>2. 安装 uptime-kuma</h2>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-6a1d9bcf" role="button" aria-expanded="false" aria-controls="collapse-6a1d9bcf">        <div class="fold-arrow">▶</div>1Panel 一键安装      </div>      <div class="fold-collapse collapse" id="collapse-6a1d9bcf">        <div class="fold-content">          <p>打开 <code>1Panel</code> 面板，点击 <code>应用商店</code>，搜索 <code>uptime kuma</code>，点击 <code>安装</code> 即可。</p><p><a href="/posts/15c02856/" title="1Panel 安装配置教程">1Panel 安装配置教程</a></p>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-e691695b" role="button" aria-expanded="false" aria-controls="collapse-e691695b">        <div class="fold-arrow">▶</div>docker-compose 安装      </div>      <div class="fold-collapse collapse" id="collapse-e691695b">        <div class="fold-content">          <p>在安装之前，先确保你的服务器已经安装了 <code>docker</code> 和 <code>docker-compose</code></p><p>在准备好的安装目录下，新建一个 <code>docker-compose.yml</code><br>内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">uptime-kuma:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">louislam/uptime-kuma:1</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data:/app/data</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-comment"># &lt;Host Port&gt;:&lt;Container Port&gt;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">3001</span><span class="hljs-string">:3001</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br></code></pre></td></tr></table></figure><p>编辑好以后在 <code>docker-compose.yml</code> 所在目录下执行 <code>docker-compose up -d</code> 启动服务。</p>        </div>      </div>    </div><p>现在访问 <code>http://&lt;ip&gt;:3001</code> 即可看到 uptime-kuma 的首页。</p><p>配置反向代理（过程略），二级域名 status 映射 3001 端口，即 <code>status.example.com</code>，用域名而不是 ip 访问。</p><h2 id="3-配置-uptime-kuma"><a href="#3-配置-uptime-kuma" class="headerlink" title="3. 配置 uptime-kuma"></a>3. 配置 uptime-kuma</h2><p>访问 <code>status.example.com</code>，进入配置页面。<br><img src="https://pic1.zhimg.com/80/v2-d2c29dd21a893eeb98ed6baa480a0268_1440w.webp" alt="配置页面"><br>设置账号密码，然后点击 <code>创建</code>。</p><h2 id="4-添加监控项"><a href="#4-添加监控项" class="headerlink" title="4. 添加监控项"></a>4. 添加监控项</h2><p>我们尝试添加一个监控项，监控 <code>Github</code>.<br><img src="https://pic2.zhimg.com/80/v2-1528df98aa77c6dc52dd950b27d4ca3d_1440w.webp" alt="添加监控项"><br>填写相关信息 如 <code>监控类型</code> <code>名称</code> <code>URL</code> <code>心跳间隔（监控频率）</code>  等，然后<br>点击保存<br>（如果你想监控 <code>chatgpt</code> 可能要使用 <code>ping</code> 的方式，<code>https</code> 由于官方限制会 <code>403</code>，不知道加什么请求头才行，有懂的朋友可以评论区说一下）</p><p>这个时候我们可以看到，我们的监控项已经添加成功了。显示了 <code>Github</code> 的响应状态等信息。但是这个时候我们还不能直接访问，因为我们还没有添加对外展示的 <code>Status Page</code>。<br><img src="https://pic1.zhimg.com/80/v2-2e8308882c77f75a5500b5ca5bc89e30_1440w.webp" alt="监控项"></p><h2 id="5-添加-Status-Page"><a href="#5-添加-Status-Page" class="headerlink" title="5. 添加 Status Page"></a>5. 添加 Status Page</h2><p>点击 <code>状态页面</code>，然后点击 <code>新的状态页</code>。</p><p><img src="https://pic4.zhimg.com/80/v2-85471f0624ddaa475eb9f53ea1ea6e57_1440w.webp" alt="添加状态页面"></p><p>填写 <code>名称</code> 和 <code>路径</code>，然后点击 <code>创建</code>。</p><p><code>路径</code> 就是你的状态页面的访问路径，比如我填写的是 <code>show</code>，那么我的状态页面的访问路径就是 <code>http://&lt;ip&gt;:3001/status/show</code>。如果你不想这样，而是想直接访问 <code>status.example.com</code> 就能得到 <code>Status Page</code>。可以先填写一个值 等进去再配置。<br><img src="https://pic3.zhimg.com/80/v2-259949550d0be9cfa78847eb4c16deca_1440w.webp" alt="添加状态页面"></p><h2 id="6-配置-Status-Page"><a href="#6-配置-Status-Page" class="headerlink" title="6. 配置 Status Page"></a>6. 配置 Status Page</h2><p>点击 <code>添加分组</code>，再点击 <code>添加监控项</code>（就是前面配置的）。<br><img src="https://pic3.zhimg.com/80/v2-98926849dc41e2d454655bcfbc2284ba_1440w.webp" alt="配置状态页面"></p><p>点击左边的 <code>域名</code>，填写你的域名，然后点击 <code>保存</code>。这样就可以使用域名 <code>status.example.com</code> 访问 而不是 <code>status.example.com/status/show</code> 。<br><img src="https://pic2.zhimg.com/80/v2-1c4c9719809e32dab8c6be704b622695_1440w.webp" alt="填写域名"></p><p>换个浏览器访问域名验证一下，我们的状态页面已经添加成功了。显示了 <code>Github</code> 的响应状态信息。<br><img src="https://pic2.zhimg.com/80/v2-02107bc3749d6bd8ef35bda2f3121d95_1440w.webp" alt="状态页面"></p><h2 id="7-配置邮件通知"><a href="#7-配置邮件通知" class="headerlink" title="7. 配置邮件通知"></a>7. 配置邮件通知</h2><p><img src="https://pic1.zhimg.com/80/v2-2e8308882c77f75a5500b5ca5bc89e30_1440w.webp" alt="监控项"><br>点击一个监控项的 <code>编辑</code>，然后点击 <code>设置通知</code>，<code>通知类型</code> 选择 <code>SMTP</code>，然后填写你的邮箱信息，点击 <code>保存</code>。</p><p>这里我以 <code>outlook</code> 为例，参考 <a href="https://support.microsoft.com/zh-cn/office/outlook-com-%E7%9A%84-pop-imap-%E5%92%8C-smtp-%E8%AE%BE%E7%BD%AE-d088b986-291d-42b8-9564-9c414e2aa040">微软 Outlook.com 的 POP、IMAP 和 SMTP 设置</a></p><p>微软邮箱的参数如下：<br><strong>SMTP 主机名</strong>：<code>smtp-mail.outlook.com</code><br><strong>SMTP 端口</strong>：<code>587</code><br><strong>SMTP 加密</strong>：<code>STARTTLS</code></p><p><strong>用户密码</strong>就是你的 <code>outlook</code> 邮箱和密码。</p><p><strong>发信人</strong>写成 <code>Uptime Kuma &lt;你的邮箱&gt;</code>，收信人写 <code>你的邮箱</code>。</p><p><strong>邮件主题</strong>可以自定义，我建议为 <code>Uptime Kuma - &#123;&#123;NAME&#125;&#125;: is &#123;&#123;STATUS&#125;&#125;</code></p><p>填写完毕后点击 <code>测试</code>，如果收到邮件，说明配置成功。</p><p><img src="https://pic2.zhimg.com/80/v2-4139c28c2b3f13eaa274ed1c0e1ef445_1440w.webp" alt="测试成功，可以收到邮件"></p>]]></content><tags><tag>部署</tag><tag>Uptime-kuma</tag></tags></entry><entry><title>2024, Happy New Year!</title><link href="/posts/1c0214de/"/><url>/posts/1c0214de/</url><content type="html"><![CDATA[<p>祝大家元旦快乐！！！<br>虽然今年并不一帆风顺，但新的一年还是要开心啊！<br><img src="https://pic1.zhimg.com/80/v2-9b61bc53f9b1d5709685d6c91909f5d0_1440w.webp" alt="2024"><br><img src="https://pic4.zhimg.com/80/v2-d4fccb20b739c6b799f25d9d63e14c03_1440w.webp" alt="bing-wallpaper-fireworks"></p>]]></content></entry><entry><title>启用博客评论 Giscus</title><link href="/posts/7671c28e/"/><url>/posts/7671c28e/</url><content type="html"><![CDATA[<div class="note note-secondary">            <p>我认为评论功能是一个博客不可或缺的组成部分，作者可以通过评论获得读者反馈，比如说我文章哪里写错了或者哪里需要更新，而读者也可以通过评论与作者交流。</p><p>又由于我 Hexo 部署的是 GitHub Pages 静态博客网页，依靠后端的评论系统不现实。所以我考虑依靠 Github 自带的 Issues 或者 Discussions 评论系统来实现评论功能。</p>          </div><h2 id="1-配置-Giscus"><a href="#1-配置-Giscus" class="headerlink" title="1. 配置 Giscus"></a>1. 配置 Giscus</h2><p><a href="https://giscus.app/zh-CN">Giscus 配置页</a></p><p>往下滑动，来到仓库这个选项，填入你的 GitHub 仓库地址。<br><img src="https://pic4.zhimg.com/80/v2-63ad66bdd73fa2abe329b96135f89923_1440w.webp" alt="填入你的仓库 url"></p><p>可以看到报错了，这是因为我们还没有满足开启 Giscus 的条件</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">选择 giscus 连接到的仓库。请确保：<br><br><span class="hljs-bullet">1.</span> 该仓库是公开的，否则访客将无法查看 discussion。<br><span class="hljs-bullet">2.</span> giscus app 已安装，否则访客将无法评论和回应。<br><span class="hljs-bullet">3.</span> Discussions 功能已在你的仓库中启用。<br></code></pre></td></tr></table></figure><h3 id="1-1-仓库公开"><a href="#1-1-仓库公开" class="headerlink" title="1.1 仓库公开"></a>1.1 仓库公开</h3><p>先确保你的仓库是公开的，如果不是，可以在仓库的 Settings 里面修改。或者创建一个新的公开仓库，用来存放博客的评论。<br><img src="https://pic1.zhimg.com/80/v2-f6a7d078b2bba550b711d0842a50a510_1440w.webp" alt="修改仓库为公开"></p><h3 id="1-2-安装-giscus-app"><a href="#1-2-安装-giscus-app" class="headerlink" title="1.2 安装 giscus app"></a>1.2 安装 giscus app</h3><p>安装 giscus app，点击 <a href="https://github.com/apps/giscus">giscus app</a> 按钮，跳转到 GitHub 的安装页面，点击 <code>Install</code> 按钮，选择你的仓库，安装成功后，会跳转回 Giscus 配置页面。<br><img src="https://pic1.zhimg.com/80/v2-48fbbe27f37257b728b6a51c18582e18_1440w.webp" alt="安装 giscus app"><br><img src="https://pic4.zhimg.com/80/v2-e1175a1a8532fad2e0e65e0a1728ed1b_1440w.webp" alt="选择仓库"><br><img src="https://pic4.zhimg.com/80/v2-9ff4af2af602fe3d8b26b9e9e1b46b47_1440w.webp" alt="安装成功"></p><h3 id="1-3-启用-Discussions-功能"><a href="#1-3-启用-Discussions-功能" class="headerlink" title="1.3 启用 Discussions 功能"></a>1.3 启用 Discussions 功能</h3><p>启用 Discussions 功能，点击仓库的 <code>Settings</code>，在 <code>Features</code> 选项卡下，勾选 <code>Discussions</code>.</p><p>现在我们就满足他的要求了<br><img src="https://pic2.zhimg.com/80/v2-87f6a97a98bd253ff8fd78b89115aa0d_1440w.webp" alt="配置成功"></p><h3 id="1-4-配置-Giscus-参数"><a href="#1-4-配置-Giscus-参数" class="headerlink" title="1.4 配置 Giscus 参数"></a>1.4 配置 Giscus 参数</h3><p>下面我们来配置 Giscus 的参数。<br><img src="https://pic3.zhimg.com/80/v2-3ab1980b9fe5b4569f9c4a83ee39854a_1440w.webp" alt="配置 giscus 参数"><br><img src="https://pic2.zhimg.com/80/v2-2d04b343bbeac93921c736e6c040f5d9_1440w.webp" alt="配置 giscus 参数"></p><p>配置完毕之后滑到下面，这个 <code>script</code> 标签会显示你相应的参数。<br><img src="https://pic3.zhimg.com/80/v2-f130a5c4da97dbd1704254cb5098471a_1440w.webp" alt="参数列表"></p><h2 id="2-配置-comment-参数"><a href="#2-配置-comment-参数" class="headerlink" title="2. 配置 comment 参数"></a>2. 配置 comment 参数</h2>    <div class="fold">      <div class="fold-title fold-default collapsed" data-toggle="collapse" href="#collapse-a2127b7d" role="button" aria-expanded="false" aria-controls="collapse-a2127b7d">        <div class="fold-arrow">▶</div>手动配置 Giscus      </div>      <div class="fold-collapse collapse" id="collapse-a2127b7d">        <div class="fold-content">          <p>在你想让评论出现的位置添加上图的 <code>script</code> 标签。</p><p>但如果已经存在带有 giscus 类的元素，则评论会被放在那里。你可以在嵌入的页面中使用 .giscus 和 .giscus-frame 选择器来自定义容器布局。</p>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-default collapsed" data-toggle="collapse" href="#collapse-e125c45e" role="button" aria-expanded="false" aria-controls="collapse-e125c45e">        <div class="fold-arrow">▶</div> 主题配置 Giscus      </div>      <div class="fold-collapse collapse" id="collapse-e125c45e">        <div class="fold-content">          <p>如果你的博客主题支持 Giscus，那么直接在主题配置中配置 Giscus 即可。建议参照主题的文档，找到对应的配置项，进行配置。</p><p>下面我以 Fluid 主题为例，配置 Giscus。</p><p>来到 giscus: 标签下，对照着 script 标签，填入相应的参数</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">giscus:</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">你的</span> <span class="hljs-string">repo</span><br>  <span class="hljs-attr">repo-id:</span> <span class="hljs-string">你的</span> <span class="hljs-string">repo-id</span><br>  <span class="hljs-attr">category:</span> <span class="hljs-string">你的</span> <span class="hljs-string">category</span><br>  <span class="hljs-attr">category-id:</span> <span class="hljs-string">你的</span> <span class="hljs-string">category-id</span><br>  <span class="hljs-attr">theme-light:</span> <span class="hljs-string">light</span><br>  <span class="hljs-attr">theme-dark:</span> <span class="hljs-string">dark</span><br>  <span class="hljs-attr">mapping:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-attr">reactions-enabled:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">emit-metadata:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">input-position:</span> <span class="hljs-string">top</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">zh-CN</span><br></code></pre></td></tr></table></figure><p>检查无误后，清除一下缓存 <code>hexo clean</code> 再部署 Hexo 就可以看到评论功能了。</p><p><img src="https://pic3.zhimg.com/80/v2-5958c4ce55d4ea0210a551e7fe10501e_1440w.webp" alt="ok"></p><p>如果没有看见评论功能，注意检查一下你的参数配置是否正确。</p>        </div>      </div>    </div><p>在配置完成后，<code>giscus</code> 加载时，会使用 GitHub Discussions 搜索 API 根据选定的映射方式（如 URL、pathname、title 等）来查找与当前页面关联的 discussion。如果找不到匹配的 discussion，giscus bot 就会在第一次有人留下评论或回应时自动创建一个 discussion。这样你的博客读者 登陆 Github 即可对文章评论了。</p><h2 id="3-进阶配置"><a href="#3-进阶配置" class="headerlink" title="3. 进阶配置"></a>3. 进阶配置</h2><p>进阶配置可通过在 仓库根目录下 创建一个 <code>giscus.json</code> 文件来完成。<br>如设置 <strong>限制允许评论的域名</strong>，<strong>评论的默认排序</strong>等。</p><p>示例如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;origins&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;https://giscus.app&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;https://giscus.vercel.app&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;https://giscus-component.vercel.app&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;originsRegex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;https://giscus-git-([A-z0-9]|-)*giscus\\.vercel\\.app&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;https://giscus-component-git-([A-z0-9]|-)*giscus\\.vercel\\.app&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;http://selfhost:[0-9]+&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;defaultCommentOrder&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;oldest&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>你可以使用 <code>origins</code> 键限制可以加载 giscus 以及 存储库 Discussion 的域名。 <code>origins</code> 键接受一个字符串列表，将与 加载 giscus 的页面的 <code>window.origin</code> 进行校验。</li><li><code>originsRegex</code> 键使用正则表达式来校验 <code>origin</code>。</li><li><code>defaultCommentOrder</code> 键用于设置评论的默认排序方式。可选值为 <code>oldest</code> 或 <code>newest</code>。默认是 <code>oldest</code>。</li></ul>]]></content><tags><tag>Giscus</tag></tags></entry><entry><title>1Panel 安装配置教程</title><link href="/posts/15c02856/"/><url>/posts/15c02856/</url><content type="html"><![CDATA[<div class="note note-primary">            <p>本文旨在介绍 <code>1Panel</code> 的安装和基本使用，以及一些常用的功能和技巧。</p>          </div><h2 id="1-什么是-1Panel，为什么要使用它？"><a href="#1-什么是-1Panel，为什么要使用它？" class="headerlink" title="1. 什么是 1Panel，为什么要使用它？"></a>1. 什么是 <code>1Panel</code>，为什么要使用它？</h2><p><img src="https://pic4.zhimg.com/80/v2-d303c292b709c8702e3537ed161009d7_1440w.webp" alt="1panel 的官网简介"></p><br><p><a href="https://github.com/1Panel-dev/1Panel">1Panel</a> 是一个现代化、开源的 <strong>服务器管理面板</strong>，封装了很多常用的操作，比如安装软件、配置反向代理、申请 SSL 证书等等。UI 界面好看，操作也很简单。是宝塔面板的一个很好的替代品。</p><p>1Panel 在线体验：<a href="https://demo.1panel.cn/">https://demo.1panel.cn</a></p><h2 id="2-安装-1Panel"><a href="#2-安装-1Panel" class="headerlink" title="2. 安装 1Panel"></a>2. 安装 <code>1Panel</code></h2><p>开始之前先确保你的服务器安装了 <code>curl</code></p><h3 id="2-1-执行安装脚本"><a href="#2-1-执行安装脚本" class="headerlink" title="2.1 执行安装脚本"></a>2.1 执行安装脚本</h3><p>ssh 连接到你的服务器，执行下面的命令，安装 1panel。过程会输出很多日志信息，等待安装完成即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; sudo bash quick_start.sh<br></code></pre></td></tr></table></figure><h3 id="2-2-安装配置"><a href="#2-2-安装配置" class="headerlink" title="2.2 安装配置"></a>2.2 安装配置</h3><p>命令行提示输入 安装目录，敲回车，默认安装路径为 <code>/opt/1panel</code>.<br><img src="https://pic4.zhimg.com/80/v2-eb429def76fbfb36e4f687b775943eeb_1440w.webp" alt="安装目录"></p><p>命令行提示输入 端口，用户名，密码。这里可以自定义，也可以直接回车使用默认值。<br><img src="https://pic2.zhimg.com/80/v2-5b8e8453a01ec99e11d39690bfb4b469_1440w.webp" alt="输入信息"></p><h3 id="2-3-安装完成"><a href="#2-3-安装完成" class="headerlink" title="2.3 安装完成"></a>2.3 安装完成</h3><p>记住 1panel 面板生成的 <strong><code>端口号</code></strong> 和 <strong><code>账号密码</code></strong><br>注意，如果你的服务器供应商有防火墙，记得开放 1panel 的端口。</p><p>如果没有什么报错的话，那么恭喜你，1panel 已经安装成功了。</p><h3 id="2-4-登陆-1panel-面板"><a href="#2-4-登陆-1panel-面板" class="headerlink" title="2.4 登陆 1panel 面板"></a>2.4 登陆 1panel 面板</h3><p>我们可以从命令行输出的信息中找到 <code>外网地址</code>，如下图所示。<br><img src="https://pic2.zhimg.com/80/v2-1a55a84f560aac043c1e43623cf08739_1440w.webp" alt="登陆信息"></p><p>使用浏览器访问 命令行输出的 <code>外网地址</code> 就可以登陆 1panel 面板了。<br><img src="https://pic4.zhimg.com/80/v2-8805f288fd97f192d0ac30e389079043_1440w.webp" alt="登陆界面"></p><p>输入账号密码 登陆以后我们可以看到 1panel 的界面。<br><img src="https://pic1.zhimg.com/80/v2-b9b93ab5e5ec5c6a7fecade5b617dec4_1440w.webp" alt="1panel 首页"></p><p>首页显示的是<code>服务器的基本信息</code>，我们可以看到服务器的内存、cpu、硬盘、负载、系统的发行版本、内核、主机名等信息。</p><p>点击应用商店，这里有 1panel 社区维护的一些应用，我们可以直接安装使用。<br>应用商店包括了一些很热门的应用和开源项目 如：<code>AList</code> <code>MySQL</code> <code>Bitwarden</code> <code>WordPress</code> <code>Umami</code> <code>Uptime Kuma</code> <code>Jenkins</code> <code>Redis</code> <code>MongoDB</code> <code>PostgreSQL</code> 等等。都是运行在 docker 容器中的，安装和卸载都很方便。<br><img src="https://pic2.zhimg.com/80/v2-23de72dbdaaccb84c8b6e40b83c6a159_1440w.webp" alt="应用商店"></p><h2 id="3-安装-openresty-应用"><a href="#3-安装-openresty-应用" class="headerlink" title="3. 安装 openresty 应用"></a>3. 安装 <code>openresty</code> 应用</h2><p>我们选择安装 <code>openresty</code>，<code>安装</code> -&gt; <code>确认</code> 即可。<code>openresty</code> 是 nginx 的开源 fork，支持 lua 脚本，安装了它才能在 1panel 编辑网页、配置反向代理。</p><p><img src="https://pic1.zhimg.com/80/v2-3ec6423285e4bf9ec5c94c948aea4bb8_1440w.webp" alt="openresty"><br>不要修改配置！直接点确定即可。</p><h2 id="4-设置域名解析"><a href="#4-设置域名解析" class="headerlink" title="4. 设置域名解析"></a>4. 设置域名解析</h2><p>域名服务商设置域名解析，将 <code>域名</code> 解析到服务器的 <code>IP</code> 上。<br><img src="https://pic3.zhimg.com/80/v2-319ce2637512c2c64b7f64136d60b8ca_1440w.webp" alt="域名解析"></p><h2 id="5-配置反向代理"><a href="#5-配置反向代理" class="headerlink" title="5. 配置反向代理"></a>5. 配置反向代理</h2><p>点击网页左侧的 <code>网站</code>，然后点击 <code>创建网站</code>，选择反向代理，填入主域名和代理地址，点击确认。</p><p><img src="https://pic3.zhimg.com/80/v2-fb495404d4641ff7a789dec2c45225c2_1440w.webp" alt="反向代理"></p><p>配置好后，就可以使用域名访问 1panel 面板了。</p><h2 id="6-配置域名-SSL-证书"><a href="#6-配置域名-SSL-证书" class="headerlink" title="6. 配置域名 SSL 证书"></a>6. 配置域名 SSL 证书</h2><h3 id="6-1-创建-ACME-账户"><a href="#6-1-创建-ACME-账户" class="headerlink" title="6.1 创建 ACME 账户"></a>6.1 创建 ACME 账户</h3><p><code>网站</code> -&gt; <code>证书</code> -&gt; <code>ACME 账户</code> -&gt; <code>创建账户</code>，填入邮箱地址，点击确认。</p><p><img src="https://pic3.zhimg.com/80/v2-0eddfef77e614c09f57ca8e9b32992c6_1440w.webp" alt="创建 ACME 账户"></p><h3 id="6-2-申请证书"><a href="#6-2-申请证书" class="headerlink" title="6.2 申请证书"></a>6.2 申请证书</h3><p><code>网站</code> -&gt; <code>证书</code> -&gt; <code>申请证书</code>，填入主域名，选择 ACME 账户，验证方式选择 <code>HTTP</code>，勾选 <code>自动续签</code>，点击确认。你就可以在 <code>证书</code> 页面看到你的证书了。</p><p><img src="https://pic4.zhimg.com/80/v2-a41668e2d037b4d107e2cf7c3912ccd3_1440w.webp" alt="申请证书"></p><h3 id="6-3-配置证书"><a href="#6-3-配置证书" class="headerlink" title="6.3 配置证书"></a>6.3 配置证书</h3><p><code>网站</code> -&gt; 找到你的网站，点击 <code>编辑</code>，点击 <code>HTTPS</code> 并启用，选择你的证书，点击保存。</p><p><img src="https://pic1.zhimg.com/80/v2-bdcaa006f53c65672ad3358285e13f74_1440w.webp" alt="配置证书"></p><h2 id="7-1Panel-实用功能"><a href="#7-1Panel-实用功能" class="headerlink" title="7. 1Panel 实用功能"></a>7. <code>1Panel</code> 实用功能</h2><h3 id="7-1-设置-swap-分区"><a href="#7-1-设置-swap-分区" class="headerlink" title="7.1 设置 swap 分区"></a>7.1 设置 swap 分区</h3><p>swap 是操作系统用来扩展内存的一种机制。当物理内存不足时，系统会将一部分内存转移到硬盘的 swap 分区，来减轻内存压力。适当使用 swap 可以提高系统的稳定性和性能。<br>swap 的大小应该是物理内存的 1 到 2 倍，可根据具体情况进行调整。</p><p>设置步骤：<code>工具箱</code> -&gt; <code>Swap</code> -&gt; <code>设置</code>，填入大小，点击保存。</p><h3 id="7-2-计划任务"><a href="#7-2-计划任务" class="headerlink" title="7.2 计划任务"></a>7.2 计划任务</h3><p><code>计划任务</code> -&gt; <code>创建计划任务</code>，选择任务类型，填入任务名称，选择执行周期，点击保存。</p><p><img src="https://pic2.zhimg.com/80/v2-4ff9f3333ef8aa450b67b44c71082bed_1440w.webp" alt="计划任务"></p><h3 id="7-3-缓存清理"><a href="#7-3-缓存清理" class="headerlink" title="7.3 缓存清理"></a>7.3 缓存清理</h3><p><code>工具箱</code> -&gt; <code>缓存清理</code>，点击 <code>开始扫描</code>，扫描完成后勾选需要清理的缓存，点击 <code>立即清理</code>。</p><h3 id="7-4-Fail2ban"><a href="#7-4-Fail2ban" class="headerlink" title="7.4 Fail2ban"></a>7.4 Fail2ban</h3><p>Fail2Ban 是一个入侵检测系统框架，它可以监控服务器的日志文件，当发现有暴力破解行为时，会自动封禁攻击者的 IP 地址，保护电脑服务器免受暴力破解。</p><p><code>工具箱</code> -&gt; <code>Fail2ban</code>，点击 <code>启用</code>，即可开启 Fail2ban 防火墙。<br>具体使用可以参考我的文章：<a href="/posts/1acd162e/" title="Fail2ban 安装使用教程">Fail2ban 安装使用教程</a></p><h3 id="7-5-日志审计"><a href="#7-5-日志审计" class="headerlink" title="7.5 日志审计"></a>7.5 日志审计</h3><p><code>日志审计</code> 里可以查看各种各样的日志，包括面板日志、登陆日志、网站日志等等。对于运维排查问题非常有用。</p><h2 id="8-1Panel-实用技巧"><a href="#8-1Panel-实用技巧" class="headerlink" title="8. 1Panel 实用技巧"></a>8. <code>1Panel</code> 实用技巧</h2><h3 id="8-1-迁移应用到其他服务器"><a href="#8-1-迁移应用到其他服务器" class="headerlink" title="8.1 迁移应用到其他服务器"></a>8.1 迁移应用到其他服务器</h3><p><code>1Panel</code> 应用商店里的应用都是运行在 docker 容器中的，所以迁移起来非常方便。</p><p><code>应用商店</code> -&gt; <code>已安装</code>，找到你要迁移的应用（这里用 Umami 演示），点击应用的 <code>备份</code>，下载备份文件。</p><p><img src="https://pic1.zhimg.com/80/v2-534e0133ab62317a74b9a6b862c8c5b8_1440w.webp" alt="备份"></p><p>在新服务器上安装 <code>1Panel</code>，然后在 <code>应用商店</code> 中安装 Umami 和 MySQL，来到 <code>已安装</code> -&gt; 点击应用的 <code>导入备份</code>，上传备份文件 点击恢复，即可迁移应用。</p><p><img src="https://pic4.zhimg.com/80/v2-9a307618af09578ae21ac843c852070b_1440w.webp" alt="导入备份"></p><h3 id="8-2-定时备份应用数据到网盘"><a href="#8-2-定时备份应用数据到网盘" class="headerlink" title="8.2 定时备份应用数据到网盘"></a>8.2 定时备份应用数据到网盘</h3><p>点击 <code>面板设置</code> -&gt; <code>备份账号</code>，选择你的网盘，参考 <a href="https://1panel.cn/docs/user_manual/settings/#3">https://1panel.cn/docs/user_manual/settings/#3</a> 进行授权配置。</p><p>点击 <code>计划任务</code> -&gt; <code>创建计划任务</code>，选择 <code>备份应用</code>，填入任务名称，选择执行周期，选择备份的应用，选择备份的账号和默认下载地址，点击保存。</p><p><img src="https://pic1.zhimg.com/80/v2-e61e3b7b91f2528b3a0444937b1260e4_1440w.webp" alt="备份应用"></p>]]></content><tags><tag>1Panel</tag><tag>运维</tag><tag>服务器</tag><tag>部署</tag></tags></entry><entry><title>如何在博客中使用霞鹜文楷字体</title><link href="/posts/f24b41b1/"/><url>/posts/f24b41b1/</url><content type="html"><![CDATA[<p>近来阅读竹林里有冰的博客，发现他的博客字体很好看，想着把他的字体也用到我的博客里，于是就有了这篇文章。</p><h2 id="1-字体介绍"><a href="#1-字体介绍" class="headerlink" title="1. 字体介绍"></a>1. 字体介绍</h2><p><a href="https://github.com/lxgw/LxgwWenKai">霞鹜文楷字体仓库</a><br>霞鹜文楷 我之前其实在手机上用过，不过后面由于装机加上懒得折腾就没有再设置了，但是博客我觉得为了好的阅读体验还是可以换一下的<br><img src="https://pic1.zhimg.com/80/v2-c1e0f7f058fbbf1cc6ac3aa0a2480178_1440w.webp" alt="霞鹜文楷"></p><p>关于在 web 中使用 霞鹜文楷 请参阅 <a href="https://github.com/lxgw/LxgwWenKai/issues/24">issue#24</a></p><p>其中 <a href="https://github.com/chawyehsu/lxgw-wenkai-webfont">chawyehsu</a> 提供了打包，竹林里有冰教程中引用的就是其打包字体，但是点进去仓库发现已经有半年没更新了。在 issue 的下面我们可以看到 <a href="https://github.com/CMBill/lxgw-wenkai-screen-web">CMBill</a> 提供了一个新的打包，我的教程就是这个打包。</p><p>在 <a href="https://github.com/CMBill/lxgw-wenkai-screen-web">CMBill</a> 的仓库 README 中跳转 <a href="https://cdn.jsdelivr.net/npm/lxgw-wenkai-screen-web/style.css">css</a> 看看内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&#x27;./lxgwwenkaigbscreen/result.css&#x27;</span>);<br><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&#x27;./lxgwwenkaimonogbscreen/result.css&#x27;</span>);<br><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&#x27;./lxgwwenkaimonoscreen/result.css&#x27;</span>);<br><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&#x27;./lxgwwenkaiscreen/result.css&#x27;</span>);<br></code></pre></td></tr></table></figure><p>可以发现这个 css 分了几个不同的字体种类，有不同的霞鹜文楷变体可供选择<br>将 <code>style.css</code> 替换为 <code>@import url</code> 之后的内容（去掉.&#x2F;），就可以直接使用了</p><p>我的博客字体文件为<br><code>https://cdn.jsdelivr.net/npm/lxgw-wenkai-screen-web/lxgwwenkaiscreen/result.css</code></p><h2 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2. 使用方法"></a>2. 使用方法</h2><h3 id="2-1-直接引用"><a href="#2-1-直接引用" class="headerlink" title="2.1 直接引用"></a>2.1 直接引用</h3><p>直接将文后提供的链接以 <code>&lt;link&gt;</code> 的形式添加到网页的 <code>&lt;head&gt;</code> 内即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/lxgw-wenkai-screen-web/lxgwwenkaiscreen/result.css&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;LXGW WenKai Screen&quot;</span>;</span><br><span class="language-css">      <span class="hljs-attribute">font-weight</span>: normal;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-Hexo-博客"><a href="#2-2-Hexo-博客" class="headerlink" title="2.2 Hexo 博客"></a>2.2 Hexo 博客</h3><p>如果你使用的是 Hexo 博客，可以采用注入的方式，将字体 css 注入到你的博客中。<br>首先在根目录创建一个 <code>scripts</code> 文件夹，然后在 <code>scripts</code> 文件夹中创建一个 <code>font.js</code> 文件，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;head_end&#x27;</span>,<br><span class="hljs-string">&#x27;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/lxgw-wenkai-screen-web/lxgwwenkaiscreen/result.css&quot; /&gt;&#x27;</span>,<br><span class="hljs-string">&#x27;default&#x27;</span>);<br></code></pre></td></tr></table></figure><p>然后修改你的主题配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">font:</span><br>  <span class="hljs-attr">font_size:</span> <span class="hljs-string">17px</span><br>  <span class="hljs-attr">font_family:</span> <span class="hljs-string">&quot;LXGW WenKai GB&quot;</span><br>  <span class="hljs-attr">letter_spacing:</span> <span class="hljs-number">0.</span><span class="hljs-string">02em</span><br>  <span class="hljs-attr">code_font_size:</span> <span class="hljs-number">85</span><span class="hljs-string">%</span><br></code></pre></td></tr></table></figure><h3 id="2-3-Fluid-主题"><a href="#2-3-Fluid-主题" class="headerlink" title="2.3 Fluid 主题"></a>2.3 Fluid 主题</h3><p>如果你使用 Hexo 的 Fluid 主题，那么恭喜你，替换字体很简单，只需要在主题的配置文件里加上一行 <code>custom_css: https://xxxx</code>代码就可以了，再修改 font_family。比如我的是 <code>fontFamily: LXGW WenKai GB</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 主题字体配置</span><br><span class="hljs-attr">font:</span><br>  <span class="hljs-attr">font_size:</span> <span class="hljs-string">17px</span><br>  <span class="hljs-attr">font_family:</span> <span class="hljs-string">&quot;LXGW WenKai GB&quot;</span><br>  <span class="hljs-attr">letter_spacing:</span> <span class="hljs-number">0.</span><span class="hljs-string">02em</span><br>  <span class="hljs-attr">code_font_size:</span> <span class="hljs-number">85</span><span class="hljs-string">%</span><br><br><span class="hljs-attr">custom_js:</span><br><span class="hljs-attr">custom_css:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/lxgw-wenkai-screen-web/lxgwwenkaiscreen/result.css</span><br></code></pre></td></tr></table></figure><h2 id="3-效果展示"><a href="#3-效果展示" class="headerlink" title="3. 效果展示"></a>3. 效果展示</h2><p><img src="https://pic4.zhimg.com/80/v2-7a56f955ee9907745c1445b4efed89fb_1440w.webp" alt="效果"></p>]]></content><tags><tag>Hexo</tag><tag>Fluid</tag></tags></entry><entry><title>Hexo 安装 Fluid 主题</title><link href="/posts/5eba38dc/"/><url>/posts/5eba38dc/</url><content type="html"><![CDATA[<p><a href="https://hexo.fluid-dev.com/docs/start">官方文档</a>其实挺详细的了。本文记录一下自己的操作。</p><h2 id="1-安装主题"><a href="#1-安装主题" class="headerlink" title="1. 安装主题"></a>1. 安装主题</h2><h3 id="1-1-安装方式一：从-NPM-安装"><a href="#1-1-安装方式一：从-NPM-安装" class="headerlink" title="1.1 安装方式一：从 NPM 安装"></a>1.1 安装方式一：从 NPM 安装</h3><p>在博客目录执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后在博客根目录下创建 _config.fluid.yml，将官方仓库的主题配置 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a> 内容复制过去。</p><p>现在目录下有这三个 yml 文件：<br><img src="https://pic2.zhimg.com/80/v2-052fdc56939475513bf83af1bd6b1bb5_1440w.webp" alt="yml-files"></p><p>可删除 <code>_config.landscape.yml</code> , 它是 hexo 默认的主题文件。</p><h3 id="1-2-安装方式二：解压-GitHub-源码包"><a href="#1-2-安装方式二：解压-GitHub-源码包" class="headerlink" title="1.2 安装方式二：解压 GitHub 源码包"></a>1.2 安装方式二：解压 GitHub 源码包</h3><p>下载 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">主题最新 release 版本</a> 解压到 themes 目录，并将解压出的文件夹重命名为 fluid。注意，这种方式安装的主题自带配置文件 <code>_config.yml</code>，位于主题根目录，不需要手动创建。</p><p>这种方式适用于想灵活修改主题的用户，因为 Fluid 更新较慢，如果你有一些自定义需求，可以直接修改源码。</p><h2 id="2-修改-hexo-配置"><a href="#2-修改-hexo-配置" class="headerlink" title="2. 修改 hexo 配置"></a>2. 修改 hexo 配置</h2><p>修改 Hexo 博客目录中的 <code>_config.yml</code>，将 <code>theme</code> 属性改为 <code>fluid</code>, <code>language</code> 属性改为 <code>zh-CN</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><br><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br></code></pre></td></tr></table></figure><h2 id="3-创建「关于页」"><a href="#3-创建「关于页」" class="headerlink" title="3. 创建「关于页」"></a>3. 创建「关于页」</h2><p>Fluid 默认不会创建「关于页」，需要手动创建。</p><p>执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2023-12-26 22:43:21</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">这里写关于页的正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span><br></code></pre></td></tr></table></figure><p>不出意外你就可以看到关于页了。</p><p>执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s -o<br></code></pre></td></tr></table></figure><p>后访问 <code>http://localhost:4000/about/</code> 即可看到效果。</p><p><img src="https://pic2.zhimg.com/80/v2-c807849599bc8439c765cf501ca36419_1440w.webp" alt="关于页"></p><p>PS: 可以跟着文档把关于页面的几个 icon 一起改了。</p><h2 id="4-修改主题配置"><a href="#4-修改主题配置" class="headerlink" title="4. 修改主题配置"></a>4. 修改主题配置</h2><p><a href="https://hexo.fluid-dev.com/docs/guide/">官方文档</a> 比较完善，耐心看完即可，有详细的配置说明。</p><h2 id="5-修改网站图标"><a href="#5-修改网站图标" class="headerlink" title="5. 修改网站图标"></a>5. 修改网站图标</h2><p><code>修改网站图标</code> 文档好像没提到，我这里写一下<br>首先把你的图标放到 <code>/source/images/</code> 目录下，然后<br>打开 <code>_config.fluid.yml</code> 找到这个配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 用于浏览器标签的图标</span><br><span class="hljs-comment"># Icon for browser tab</span><br><span class="hljs-attr">favicon:</span> <span class="hljs-string">images/favicon.png</span><br><br><span class="hljs-comment"># 用于苹果设备的图标</span><br><span class="hljs-comment"># Icon for Apple touch</span><br><span class="hljs-attr">apple_touch_icon:</span> <span class="hljs-string">images/favicon.png</span><br></code></pre></td></tr></table></figure><p>将 <code>favicon.png</code> 改为你的图标路径即可。</p><h2 id="6-修改-slogan-为-api-语录"><a href="#6-修改-slogan-为-api-语录" class="headerlink" title="6. 修改 slogan 为 api 语录"></a>6. 修改 slogan 为 api 语录</h2><p>效果如图所示：<br><img src="https://pic4.zhimg.com/80/v2-de40d65e16c881935c1acc00eb51ab0f_1440w.webp" alt="语录"></p><p>在主题配置 <code>_config.fluid.yml</code> 中开启：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">index:</span><br>  <span class="hljs-attr">slogan:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">text:</span> <span class="hljs-string">这是一条</span> <span class="hljs-string">Slogan</span><br>    <span class="hljs-attr">api:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://v1.hitokoto.cn/&quot;</span><br>      <span class="hljs-attr">method:</span> <span class="hljs-string">&quot;GET&quot;</span><br>      <span class="hljs-attr">headers:</span> &#123;&#125;<br>      <span class="hljs-attr">keys:</span> [<span class="hljs-string">&quot;hitokoto&quot;</span>]<br></code></pre></td></tr></table></figure><p>把 <code>url</code> 改为你想要的 api 地址，<code>keys</code> 改为你想要的字段。具体参数可以看<a href="https://hexo.fluid-dev.com/docs/guide/#slogan-%E6%89%93%E5%AD%97%E6%9C%BA">官方文档</a></p><h2 id="7-修改背景图片-为-api-图片"><a href="#7-修改背景图片-为-api-图片" class="headerlink" title="7. 修改背景图片 为 api 图片"></a>7. 修改背景图片 为 api 图片</h2><p>既然可以改 slogan 为 api 语录，那么背景图片当然也可以改为 api 图片 笑）。</p><p>效果如图所示：<br><img src="https://pic4.zhimg.com/80/v2-6a515a3f1baedebcec5499c1d20eb467_1440w.webp" alt="api 图片"></p><p>在主题配置 <code>_config.fluid.yml</code> 中搜索</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">/img/default.png</span><br></code></pre></td></tr></table></figure><p>将其改为你想要的 api 地址即可。<br>我使用的是 <a href="https://api.vvhan.com/api/bing">Bing 每日图片</a><br>感谢接口提供者！！！</p>]]></content><tags><tag>部署</tag><tag>Hexo</tag><tag>Fluid</tag></tags></entry><entry><title>Hexo 博客部署教程</title><link href="/posts/7a862802/"/><url>/posts/7a862802/</url><content type="html"><![CDATA[<blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。本文旨在记录 Hexo 博客部署到 Github Pages 的过程，以及 Github Actions 自动部署的过程。</p></blockquote><p>本文环境：</p><blockquote><p>Nodejs 20<br>Git 2.44</p></blockquote><p>本文最终实现成果：一个项目仓库，<code>main</code> 分支存放源代码，<code>gh-pages</code> 存放生成后的网页代码。每当我们 push 代码到 <code>main</code> 分支的时候，Github Actions 会自动构建并将代码发布到 <code>gh-pages</code> 分支，Github Pages 会自动加载 <code>gh-pages</code> 分支的代码，这样就实现了博客自动化部署。</p><p>注意：本文会用 <code>用户名</code> 来指代 Github 用户名，你需要将 <code>用户名</code> 替换为你的 Github 用户名。如 <code>用户名.github.io</code> 替换为 <code>zhangsan.github.io</code>。</p><h2 id="0-开发环境准备"><a href="#0-开发环境准备" class="headerlink" title="0. 开发环境准备"></a>0. 开发环境准备</h2><h3 id="0-1-开发工具"><a href="#0-1-开发工具" class="headerlink" title="0.1 开发工具"></a>0.1 开发工具</h3><p>在开始之前，你需要安装好 Nodejs 和 Git。</p><p>如果你是 Linux &#x2F; Mac 用户，那么通过发行版的 <strong>包管理器</strong> 即可安装。</p><p>如果你是 Windows 用户，那么可以通过 <a href="https://nodejs.org/en/download">Nodejs 官网</a> 下载安装 Nodejs，Git 可以通过 <a href="https://git-scm.com/downloads">Git 官网</a> 下载安装，并配置好对应的 Nodejs 环境变量。</p><p>安装完毕后，输入以下命令检验是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br>npm -v<br>git --version<br></code></pre></td></tr></table></figure><h3 id="0-2-配置-Git"><a href="#0-2-配置-Git" class="headerlink" title="0.2 配置 Git"></a>0.2 配置 Git</h3><p>如果你是第一次使用 Git，那么你可能需要配置用户名和邮箱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;用户名&quot;</span><br>git config --global user.email 邮箱<br>git config --global init.defaultBranch main<br></code></pre></td></tr></table></figure><p>执行以下命令检验是否配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global --list<br></code></pre></td></tr></table></figure><h3 id="0-3-配置-Github-SSH"><a href="#0-3-配置-Github-SSH" class="headerlink" title="0.3 配置 Github SSH"></a>0.3 配置 Github SSH</h3><h4 id="生成-SSH-密钥"><a href="#生成-SSH-密钥" class="headerlink" title="生成 SSH 密钥"></a>生成 SSH 密钥</h4><p>输入以下命令来生成 SSH 密钥，将示例中使用的电子邮件替换为 GitHub 电子邮件地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>遇到提示信息可以一路回车。</p><p>现在你已经生成了 SSH 密钥对，你可以在 <code>~/.ssh</code> 目录或者你指定的目录下找到你的密钥对。</p><h4 id="将-SSH-密钥添加到-Github"><a href="#将-SSH-密钥添加到-Github" class="headerlink" title="将 SSH 密钥添加到 Github"></a>将 SSH 密钥添加到 Github</h4><p>浏览器打开 Github，点击个人头像 –&gt; 点击 <code>设置</code> –&gt; 点击左边导航栏的 <code>SSH and GPG keys</code> –&gt; 点击靠近右上角的 <code>New SSH key</code>。</p><p><code>Key type</code> 选择 <code>Authentication Key</code>，随便起一个 Tittle，复制你刚刚生成的 <code>id_ed25519.pub</code> 内容到 <code>Key</code> 中，点击 <code>Add SSH key</code> 保存。</p><p><img src="https://pic3.zhimg.com/80/v2-4b9ba3553dc717bd9723afb9ee43a7fe_1440w.webp" alt="将 SSH 密钥添加到 Github"></p><h2 id="1-安装-Hexo"><a href="#1-安装-Hexo" class="headerlink" title="1. 安装 Hexo"></a>1. 安装 Hexo</h2><p>打开系统终端，输入以下命令安装 Hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br></code></pre></td></tr></table></figure><p>Linux 可能需要 sudo 权限来执行上述命令，Windows 可能需要管理员权限来执行上述命令。</p><p>安装完毕后，输入以下命令检验是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br></code></pre></td></tr></table></figure><h2 id="2-新建-Github-仓库"><a href="#2-新建-Github-仓库" class="headerlink" title="2. 新建 Github 仓库"></a>2. 新建 Github 仓库</h2><p>点击 Github 首页左导航栏的 <code>New</code> 按钮，新建一个仓库，仓库名建议为 <code>用户名.github.io</code>。将 <code>用户名</code> 替换为你的 Github 用户名。</p><p><img src="https://pic1.zhimg.com/80/v2-ca65acc37e795a863ce23f2282ec6e1c_1440w.webp" alt="新建仓库"></p><p>然后点击 <code>Create repository</code> 按钮，完成仓库的创建。</p><h2 id="3-初始化-Hexo-博客目录"><a href="#3-初始化-Hexo-博客目录" class="headerlink" title="3. 初始化 Hexo 博客目录"></a>3. 初始化 Hexo 博客目录</h2><p>找一个空目录，执行以下命令。将 <code>用户名</code> 替换为你的 Github 用户名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init 用户名.github.io &amp;&amp; <span class="hljs-built_in">cd</span> 用户名.github.io<br></code></pre></td></tr></table></figure><h2 id="4-将-Git-项目初始化并推送到-Github"><a href="#4-将-Git-项目初始化并推送到-Github" class="headerlink" title="4. 将 Git 项目初始化并推送到 Github"></a>4. 将 Git 项目初始化并推送到 Github</h2><p>我们首先初始化 Git 仓库并创建 <code>gh-pages</code> 分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br>git add .<br>git commit -m <span class="hljs-string">&quot;Initial commit&quot;</span><br>git branch gh-pages<br></code></pre></td></tr></table></figure><p>将本地仓库与 Github 仓库关联并推送到 Github：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin git@github.com:用户名/用户名.github.io.git<br>git push -u origin main gh-pages<br></code></pre></td></tr></table></figure><p>此时，我们访问我们的 Github 仓库可以发现代码已经成功上传到 Github 了。</p><h2 id="5-配置-Github-Pages"><a href="#5-配置-Github-Pages" class="headerlink" title="5. 配置 Github Pages"></a>5. 配置 Github Pages</h2><p>点击仓库的 <code>Settings</code>，点击左边导航栏的 <code>Pages</code>。选择 <code>Branch</code> 的 <code>gh-pages</code> 分支，点击 <code>Save</code> 保存。<br><img src="https://pic1.zhimg.com/80/v2-f3c82ba51458689af83e72d8228eaae8_1440w.webp" alt="选择部署分支"></p><h2 id="6-编写-Github-Actions-配置文件"><a href="#6-编写-Github-Actions-配置文件" class="headerlink" title="6. 编写 Github Actions 配置文件"></a>6. 编写 Github Actions 配置文件</h2><p>在本地已有的项目下 新建一个目录为 <code>.github/workflows/deploy.yml</code> 的文件。</p><p><code>deploy.yml</code> 文件内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">Hexo</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br>  <span class="hljs-attr">workflow_dispatch:</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">permissions:</span><br>      <span class="hljs-attr">contents:</span> <span class="hljs-string">write</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Check</span> <span class="hljs-string">Out</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v4</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">fetch-depth:</span> <span class="hljs-number">0</span> <span class="hljs-comment"># 用于获取提交记录，获取文件更新时间</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v4</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-number">20</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">Dependencies</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          npm install</span><br><span class="hljs-string"></span><br>      <span class="hljs-comment"># https://github.com/zhullyb/zhullyb.github.io/blob/master/.github/workflows/deploy.yml</span><br>      <span class="hljs-comment"># 修复 hexo 生成的文件更新时间 为当前时间，实际应为提交时间</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Fix</span> <span class="hljs-string">File</span> <span class="hljs-string">Updated</span> <span class="hljs-string">Date</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          git ls-files | while read filepath; do touch -d &quot;$(git log -1 --format=&#x27;@%ct&#x27; $filepath)&quot; &quot;$filepath&quot; &amp;&amp; echo &quot;Fixed: $filepath&quot;; done</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">Site</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          export TZ=&#x27;Asia/Shanghai&#x27;</span><br><span class="hljs-string">          npm run clean</span><br><span class="hljs-string">          npm run build</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">to</span> <span class="hljs-string">GitHub</span> <span class="hljs-string">Pages</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">peaceiris/actions-gh-pages@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">github_token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">publish_dir:</span> <span class="hljs-string">public</span><br></code></pre></td></tr></table></figure><p>然后将其推送到 Github：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;Add deploy.yml&quot;</span><br>git push<br></code></pre></td></tr></table></figure><p>耐心等待 Github Actions 的构建</p><h2 id="7-查看博客"><a href="#7-查看博客" class="headerlink" title="7. 查看博客"></a>7. 查看博客</h2><p>浏览器访问 <a href="https://用户名.github.io/">https:&#x2F;&#x2F;用户名.github.io&#x2F;</a></p><p>即可查看到你的博客</p><p><img src="https://pic1.zhimg.com/80/v2-313dd9a390364bf21812010b4dcc77dc_1440w.webp" alt="博客首页"></p>]]></content><tags><tag>部署</tag><tag>Hexo</tag><tag>Github</tag><tag>Github-Pages</tag><tag>Github-Actions</tag></tags></entry><entry><title>Hello World</title><link href="/posts/4a17b156/"/><url>/posts/4a17b156/</url><content type="html"><![CDATA[<p>欢迎来到 <a href="https://blog.ovvv.top/">mobeicanyue’s Blog</a>! 这是我的第一篇博客。</p>]]></content></entry></search>